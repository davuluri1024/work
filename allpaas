CREATE INDEX BATCH_ID_IDX ON RTY_I027_ERR_TBL
(BATCH_ID)
LOGGING
NOPARALLEL;

CREATE INDEX CUST_DATA_IDX ON RTY_I027_CUSTOMER_DATA_TBL
(BATCH_ID, FLOW_ID, RA0_ID)
LOGGING
NOPARALLEL;

CREATE INDEX DAILYRATE_IDX1 ON RTY_CX_B_DAILYRATES_TBL
(DAILYRATECONVERSIONDATE)
LOGGING
NOPARALLEL;

CREATE INDEX DAILYRATE_IDX2 ON RTY_CX_B_DAILYRATES_TBL
(DAILYRATEFROMCURRENCY)
LOGGING
NOPARALLEL;

CREATE INDEX DAILYRATE_IDX3 ON RTY_CX_B_DAILYRATES_TBL
(DAILYRATETOCURRENCY)
LOGGING
NOPARALLEL;

CREATE INDEX DAILYRATE_STG_IDX1 ON RTY_CX_B_DAILYRATES_STG_TBL
(DAILYRATECONVERSIONDATE)
LOGGING
NOPARALLEL;

CREATE INDEX DAILYRATE_STG_IDX2 ON RTY_CX_B_DAILYRATES_STG_TBL
(DAILYRATEFROMCURRENCY)
LOGGING
NOPARALLEL;

CREATE INDEX DAILYRATE_STG_IDX3 ON RTY_CX_B_DAILYRATES_STG_TBL
(DAILYRATETOCURRENCY)
LOGGING
NOPARALLEL;

CREATE INDEX DONOR_ID_C ON RTY_CX_B_TRACKED_DONOR_TBL
(DONOR_ID_C)
LOGGING
NOPARALLEL;

CREATE INDEX FILE_ID_IDX1 ON RTY_CX_PMT_STG_TBL
(FILE_ID)
LOGGING
NOPARALLEL;

CREATE INDEX FILE_NAME_IDX ON RTY_I027_ERROR_LOG_TBL
(FILE_NAME)
LOGGING
NOPARALLEL;

CREATE INDEX HDR_IDX ON RTY_CX_PMT_UPLOADS_STG_TBL
(FILE_ID)
LOGGING
NOPARALLEL;

CREATE INDEX ID_C ON RTY_CX_B_TRACKED_DONOR_TBL
(ID)
LOGGING
NOPARALLEL;

CREATE INDEX IMPORT_BATCHID_IDX ON RTY_I027_IMPORT_MANAGER_ERR_TBL
(BATCH_ID)
LOGGING
NOPARALLEL;

CREATE INDEX IMPORT_FILE_ID_IDX ON RTY_CX_PMT_UPLOADS_IMPORT_ERR_TBL
(FILE_ID)
LOGGING
NOPARALLEL;

CREATE INDEX INSTANCEID_IDX ON RTY_I010_GRANTS_INVOICE_TBL
(INSTANCE_ID)
LOGGING
NOPARALLEL;

CREATE INDEX INVOICE_NUM_IDX ON RTY_I010_GRANTS_INVOICE_TBL
(INVOICE_NUMBER)
LOGGING
NOPARALLEL;

CREATE INDEX LINE_IDX ON RTY_CX_PMT_DTL_STG_TBL
(FILE_ID)
LOGGING
NOPARALLEL;

CREATE INDEX PARENTINSTANCEID_IDX ON RTY_CX_GET_INTEGRATION_STATUS
(PARENT_INSTANCE_ID)
LOGGING
NOPARALLEL;

CREATE INDEX PARTYID_IDX1 ON RTY_CX_B_ACCOUNTS_TBL
(PARTYID)
LOGGING
NOPARALLEL;

CREATE INDEX PARTYID_STG_IDX ON RTY_CX_B_ACCOUNTS_STG_TBL
(PARTYID)
LOGGING
NOPARALLEL;

CREATE INDEX PARTYUMBER1_IDX ON RTY_CX_B_ACCOUNTS_STG_TBL
(PARTYNUMBER)
LOGGING
NOPARALLEL;

CREATE INDEX PARTYUMBER_IDX ON RTY_CX_B_ACCOUNTS_TBL
(PARTYNUMBER)
LOGGING
NOPARALLEL;

CREATE INDEX PARTYUMBER_IDX1 ON RTY_CX_B_PARTY_NFID_TBL
(PARTYID)
LOGGING
NOPARALLEL;

CREATE INDEX PARTYUMBER_IDX2 ON RTY_CX_B_PARTY_NFID_STG_TBL
(PARTYID)
LOGGING
NOPARALLEL;

CREATE INDEX PARTYUMBER_IDX3 ON RTY_CX_B_PARTY_NFID_TBL
(PARTYNUMBER)
LOGGING
NOPARALLEL;

CREATE INDEX RECORDNAME_IDX ON RTY_CX_B_ACCOUNTPII_TBL
(RECORDNAME)
LOGGING
NOPARALLEL;

CREATE INDEX RELSHIPREC_IDX1 ON RTY_CX_B_RELATIONSHIP_TBL
(RELATIONSHIPRECID)
LOGGING
NOPARALLEL;

CREATE INDEX RELSHIPREC_STG_IDX1 ON RTY_CX_B_RELATIONSHIP_STG_TBL
(RELATIONSHIPRECID)
LOGGING
NOPARALLEL;

CREATE INDEX RTY_ERR_IDX1 ON RTY_CX_PMT_ERR_TBL
(FILE_ID)
LOGGING
NOPARALLEL;

CREATE INDEX RTY_FILENTRY_IDX1 ON RTY_CX_PMT_FILE_ENTRY_TBL
(FILE_ID)
LOGGING
NOPARALLEL;

CREATE INDEX RTY_PLEDGEID_IDX ON RTY_CX_B_PLEDGES_TBL
(ID)
LOGGING
NOPARALLEL;

CREATE INDEX RTY_RELSHIP_IDX ON RTY_CX_B_RELATIONSHIP_TBL
(OBJECTPARTYPEOPARTYID, SUBJECTPARTYPEOSUBJECTPARTYID)
LOGGING
NOPARALLEL;

CREATE INDEX RTY_RELSHIP_IDX1 ON RTY_CX_B_RELATIONSHIP_TBL
(SUBJECTPARTYPEOPARTYNUMBER, OBJECTPARTYPEOPARTYNUMBER)
LOGGING
NOPARALLEL;

CREATE INDEX RTY_STG_RELSHIP_IDX ON RTY_CX_B_RELATIONSHIP_STG_TBL
(OBJECTPARTYPEOPARTYID, SUBJECTPARTYPEOSUBJECTPARTYID, SUBJECTPARTYPEOPARTYNUMBER, OBJECTPARTYPEOPARTYNUMBER)
LOGGING
NOPARALLEL;

CREATE INDEX RTY_TERITORY_IDX1 ON RTY_CX_B_TERRITORIES
(TERRITORYSHORTNAME)
LOGGING
NOPARALLEL;

CREATE INDEX TRACKED_ALIASID ON RTY_CX_B_TRACKED_TBL
(ALIAS_ID_C)
LOGGING
NOPARALLEL;

CREATE INDEX TRACKED_ID ON RTY_CX_B_TRACKED_TBL
(ID)
LOGGING
NOPARALLEL;

CREATE INDEX TRACKED_ID_C ON RTY_CX_B_TRACKED_DONOR_TBL
(TRACKED_ID_C)
LOGGING
NOPARALLEL;

CREATE INDEX TRACKED_RECORDNAME ON RTY_CX_B_TRACKED_TBL
(RECORDNAME)
LOGGING
NOPARALLEL;

CREATE INDEX TRACKED_REC_STA ON RTY_CX_B_TRACKED_TBL
(RECORDNAME, STATUSID_C)
LOGGING
NOPARALLEL;

CREATE INDEX TRACK_IDX ON RTY_I027_TRACK_TBL
(BATCH_ID)
LOGGING
NOPARALLEL;

CREATE OR REPLACE PACKAGE rty_common_db_pkg AS
    PROCEDURE update_statement (
        p_instance_id        VARCHAR2,
        p_table_name         VARCHAR2,
        p_operation          VARCHAR2,
        l_set_column1        VARCHAR2,
        l_andcondition_col1  VARCHAR2

    );

END;
/


CREATE OR REPLACE PACKAGE "RTY_CX_BICC_ATP_PKG" 
as

/***************************************************************************************************
Procedure:          RTY_CX_BICC_ATP_PKG
Create Date:        2022-09-01
Author:             Rakesh Gurrapu
Description:        Process OCI Object storage files to ATP (Inserts and Updates)
---------------------------------------------------------------------------------------------------
Version     Name        Date            Comments
1.0         Rakesh G    01-FEB-2024     Initial Version
***************************************************************************************************/    

--used to process all data to atp 
--it should be used for only one time to get all historical data
   Procedure bulkdata_prc(p_namespace IN VARCHAR2,
                             p_bucketname IN VARCHAR2,
                             p_file_name IN VARCHAR2);

--copy data from object stotage to ATP tables
Procedure copy_data(p_table_name1 varchar2,p_namespace varchar2,p_bucketname varchar2,p_file_name varchar2);

						
procedure populate_error(p_instnace_id number,p_file_name varchar2,p_tbl_name varchar2,p_err_msg varchar2);

procedure CLEANSESTGTBL;

--proceess which calls copy data procedure based on table name
Procedure insertdata_prc(p_namespace IN VARCHAR2,
                             p_bucketname IN VARCHAR2,
                             p_file_name IN VARCHAR2);
                             
--updates incrmental data from OCI object storage to ATP tables
Procedure update_data(p_tbl_name IN VARCHAR2,p_file_name VARCHAR2);


--Async call to avoid time out issuws which call by main procedure
PROCEDURE ics_async_call(p_namespace IN VARCHAR2,
						 p_bucketname IN VARCHAR2,
						 p_file_name IN VARCHAR2,
						 p_flow_id IN number,
						 p_job_name OUT varchar2);


end RTY_CX_BICC_ATP_PKG;
/


CREATE OR REPLACE PACKAGE "RTY_CX_PAYMENTS_IMPORT_PKG" 
as

/***************************************************************************************************
Procedure:          RTY_CX_PAYMENTS_IMPORT_PKG
Create Date:        2023-09-01
Author:             Rakesh Gurrapu
Description:        Process payment file data to ATP tables followed by 
                    validations and ready to process for payment header and lines
---------------------------------------------------------------------------------------------------
Version     Name        Date            Comments
1.0         Rakesh G    01-FEB-2024     Initial Version                                       
***************************************************************************************************/

g_debug_var VARCHAR2(10) := 'Y';


Procedure enable_logs(p_msg varchar2);

--update pledge amount against for each payment detail amount
Procedure upd_pledge_amount(                     
                        p_file_id varchar2,
                        p_flow_id varchar2);

--validate pledge data agianst donor
Procedure validate_pledge(p_alias varchar2,
						p_donor_id VARCHAR2,
						p_donor_type VARCHAR2,
						p_accountingdate VARCHAR2,
						x_pledge_id OUT VARCHAR2);

--create batches if payment file contains > 800 records
Procedure split_batch(
                            p_file_id NUMBER,
                            p_flow_id NUMBER,
                            p_batch_limit NUMBER);


--update payment detail CT_ID for reprocessing records
Procedure upd_reprocess_ctid(
                            p_file_id NUMBER,
                            p_flow_id NUMBER,
                            p_hdr_id number,
                            p_line_id number,
                             p_ct_id varchar2);

--update currency conversionrate to payment stage tables
Procedure upd_conversion_rate(
                            p_flow_id NUMBER,
                            p_file_id NUMBER,
                             p_currency varchar2,
                             p_conversionrate varchar2);

--update import job id to payment stage tables for feature purpose
Procedure upd_importroute_id(p_file_id NUMBER,
                            p_flow_id NUMBER,
                            p_integration_name varchar2,
                            p_row varchar2,
                             p_error_msg varchar2,
                            p_import_id number);

TYPE header_rec_type IS RECORD(py_id varchar2(100),recordnumber varchar2(1000), id number);

TYPE line_rec_type IS RECORD(ct_id varchar2(100),recordnumber varchar2(1000), id number);

TYPE pledge_id_type IS RECORD(pledge_id varchar2(100),pledge_amount varchar2(1000));

TYPE header_rec_tbl IS TABLE OF header_rec_type INDEX BY BINARY_INTEGER; 

TYPE line_rec_tbl IS TABLE OF line_rec_type INDEX BY BINARY_INTEGER;

TYPE pledge_id_tbl IS TABLE OF pledge_id_type INDEX BY BINARY_INTEGER;

--get payment header and detail error records count
Procedure get_err_status(p_file_id NUMBER,
                            p_flow_id NUMBER,
                            p_err_status OUT varchar2);

--update payment header and line import job error records to stage tables
Procedure upd_payment_errors(p_file_id NUMBER,
                            p_flow_id NUMBER,
                            p_batch_id NUMBER,
                             p_level VARCHAR2,
                            p_header_rec header_rec_tbl,
                            p_line_rec line_rec_tbl,
                            p_pledge_rec pledge_id_tbl);

--Insert file data to payment stage tables
Procedure populate_stg_data(p_file_id NUMBER,
                            p_flow_id NUMBER,
                            p_status OUT VARCHAR2,
                            p_err_msg OUT VARCHAR2);

--to avoid 4 mintutes timeout for plsql main procedure using async logic
PROCEDURE ics_async_call1(p_file_id number, p_flow_id number,p_batch_limit NUMBER,p_job_name OUT varchar2);

--performing all validations
Procedure validate_stg_data(p_file_id NUMBER,
                            p_flow_id NUMBER,
                            p_batch_limit NUMBER
                           );
--performing line validations
Procedure validate_pmt_detail_data(p_file_id NUMBER,
                            p_flow_id NUMBER,
                            p_status OUT VARCHAR2,
                            p_err_msg OUT VARCHAR2);                            

--capture plsql run time errors to stage table
PROCEDURE pmt_err(p_file_id NUMBER,
                             p_flow_id NUMBER,
                             p_hdr_id NUMBER,
                             p_line_id VARCHAR2,
                             p_err_code VARCHAR2,
                             p_err_msg VARCHAR2);                          

--update Integration errors to payment tables
Procedure upd_pmt_err(p_file_id NUMBER,
                            p_flow_id NUMBER,
                            p_status VARCHAR2,
                            p_hdr_id NUMBER,
                            p_line_id NUMBER,
                            p_err_msg VARCHAR2);


end RTY_CX_PAYMENTS_IMPORT_PKG;
/


CREATE OR REPLACE PACKAGE "RTY_CX_PAYMENTS_REVERSAL_IMPORT" AS 

/***************************************************************************************************
Object Name :        RTY_CX_PAYMENTS_REVERSAL_IMPORT
Type        :        Package Spec 
Create Date :        29-Jan-2025
Author      :        Vamsi Kiran
Description :        To Process - Cancel payment which has more then 500 CT lines. 

---------------------------------------------------------------------------------------------------
Version     Name        Date            Comments
1.0         Vamsi Kiran 29-Jan-2025     FS-699, 772

***************************************************************************************************/


TYPE PAY_REC_TYPE IS RECORD
(
     Flow_id            VARCHAR2(200) 
    ,File_Id            VARCHAR2(200) 
	,InstanceId         VARCHAR2(200)
	,Status             VARCHAR2(20)
    ,Error_msg          VARCHAR2(2000)	
	,PYID  				VARCHAR2(50)
    ,CTId                                VARCHAR2(50)            
    ,RecordName                          VARCHAR2(200)             
    ,RecordNumber                        VARCHAR2(2000)          
    ,Payments_Id_c                       VARCHAR2(2000)          
    ,LastUpdateLogin                     VARCHAR2(2000)          
    ,ConflictId                          VARCHAR2(2000)          
    ,UserLastUpdateDate                  VARCHAR2(2000)          
    ,CurrencyCode                        VARCHAR2(2000)          
    ,CurcyConvRateType                   VARCHAR2(2000)          
    ,CorpCurrencyCode                    VARCHAR2(2000)          
    ,DonorName_Id_c                      VARCHAR2(2000)          
    ,DonorName_c                         VARCHAR2(2000)          
    ,Alias_Id_c                          VARCHAR2(2000)          
    ,Alias_c                             VARCHAR2(2000)          
    ,TrackedGiftID_Id_c                  VARCHAR2(2000)          
    ,TrackedGiftID_c                     VARCHAR2(2000)          
    ,TaxReceiptRequired_c                VARCHAR2(2000)          
    ,TaxReceiptPrint_c                   VARCHAR2(2000)          
    ,Comments_c                          VARCHAR2(2000)          
    ,Grants_Id_c                         VARCHAR2(2000)          
    ,Grants_c                            VARCHAR2(2000)          
    ,TaxReceipt_c                        VARCHAR2(2000)          
    ,PaymentID_c                         VARCHAR2(2000)          
    ,AnonymousFlag_c                     VARCHAR2(2000)          
    ,Deceased_c                          VARCHAR2(2000)          
    ,TransferType_c                      VARCHAR2(2000)          
    ,DonorAddressLine1_c                 VARCHAR2(2000)          
    ,SendERPFlag_c                       VARCHAR2(2000)          
    ,SendToRPM_c                         VARCHAR2(2000)          
    ,PaymentAmount_c                     VARCHAR2(2000)          
    ,RateType_c                          VARCHAR2(2000)          
    ,ConversionRate_c                    VARCHAR2(2000)          
    ,USDAmount_c                         VARCHAR2(2000)          
    ,QUIDPROQUOCOUNT_c                   VARCHAR2(2000)          
    ,QUIDPROQUORATE_c                    VARCHAR2(2000)          
    ,QUIDPROQUORATES_c                   VARCHAR2(2000)          
    ,CommitmentID_Id_c                   VARCHAR2(2000)          
    ,CommitmentID_c                      VARCHAR2(2000)          
    ,PaymentCurrencies_c                 VARCHAR2(2000)          
    ,USDAmounts_c                        VARCHAR2(2000)          
    ,DonorDistrict_c                     VARCHAR2(2000)          
    ,AdminFee_c                          VARCHAR2(2000)          
    ,ProgramYear_c                       VARCHAR2(2000)          
    ,PledgeID_Id_c                       VARCHAR2(2000)          
    ,PledgeID_c                          VARCHAR2(2000)          
    ,MultiplePaymentDetailIds_c          VARCHAR2(2000)          
    ,RecipientName_Id_c                  VARCHAR2(2000)          
    ,RecipientName_c                     VARCHAR2(2000)          
    ,RecipientID_c                       VARCHAR2(2000)          
    ,CreditOrg_Id_c                      VARCHAR2(2000)          
    ,CreditOrg_c                         VARCHAR2(2000)          
    ,CreditOrgType_c                     VARCHAR2(2000)          
    ,CreditOrganizationId_c              VARCHAR2(2000)          
    ,TemplateName_c                      VARCHAR2(2000)          
    ,AssociateToPledge_c                 VARCHAR2(2000)          
    ,CopyCollapse_c                      VARCHAR2(2000)          
    ,TaxReceiptNumber_c                  VARCHAR2(2000)          
    ,ERPUpdateDate_c                     VARCHAR2(2000)          
    ,IRAFlag_c                           VARCHAR2(2000)          
    ,ExternalDAFFlag_c                   VARCHAR2(2000)          
    ,CharitableFoundation_c              VARCHAR2(2000)          
    ,PaymentCancel_c                     VARCHAR2(2000)          
    ,TotalPaymentAmmount_c               VARCHAR2(2000)          
    ,PD_DonorID_c                        VARCHAR2(2000)          
    ,Split_c                             VARCHAR2(2000)          
    ,CampaignID_c                        VARCHAR2(2000)          
    ,CorporateMatchingGift_c             VARCHAR2(2000)          
    ,ChangeCategory_c                    VARCHAR2(2000)          
    ,OriginalPaymentDetailId_c           VARCHAR2(2000)          
    ,Status_c                            VARCHAR2(2000)          
    ,PayrollDeduction_c                  VARCHAR2(2000)          
    ,PaymentHeaderAmount_c               VARCHAR2(2000)          
    ,ProgramYear2_c                      VARCHAR2(2000)          
    ,PHS_c                               VARCHAR2(2000)          
    ,EstateInProcess_c                   VARCHAR2(2000)          
    ,Legacy_c                            VARCHAR2(2000)          
    ,MemorialPHF_c                       VARCHAR2(2000)          
    ,SequentialLineNumber_c              VARCHAR2(2000)          
    ,QuidProQuoDescription_c             VARCHAR2(2000)          
    ,QuidProQuoAmount1_c                 VARCHAR2(2000)          
    ,PDDonorIDType_c                     VARCHAR2(2000)          
    ,MemorialTributeFamilyName_c         VARCHAR2(2000)          
    ,MemorialTributeOccasion_c           VARCHAR2(2000)          
    ,MemorialTributeSuppressFamilyLetter_c  VARCHAR2(2000)        
    ,MemorialHoneree_c                      VARCHAR2(2000)        
    ,MemorialTributeDescriptionOverride_c   VARCHAR2(2000)        
    ,MemorialTributeDonorId_c               VARCHAR2(2000)        
    ,MemorialTributeDonorIdType_c           VARCHAR2(2000)        
    ,MmrlHonoreeAddress1_c                  VARCHAR2(2000)        
    ,MmrlHonoreeAddress2_c                  VARCHAR2(2000)        
    ,MmrlHonoreeCity_c                      VARCHAR2(2000)        
    ,MmrlHonoreeCountry_c                   VARCHAR2(2000)        
    ,MmrlHonoreeEmail_c                     VARCHAR2(2000)        
    ,MmrlHonoreePostal_c                    VARCHAR2(2000)        
    ,MmrlHonoreeStateProvince_c             VARCHAR2(2000)        
    ,ShipToAddress1_c                       VARCHAR2(2000)        
    ,ShipToAddress2_c                       VARCHAR2(2000)        
    ,ShipToAddress3_c                       VARCHAR2(2000)        
    ,ShipToCity_c                           VARCHAR2(2000)        
    ,ShipToCountry_c                        VARCHAR2(2000)        
    ,ShipToName_c                           VARCHAR2(2000)        
    ,ShipToOfficer_c                        VARCHAR2(2000)        
    ,ShipToPhone_c                          VARCHAR2(2000)        
    ,ShipToPostal_c                         VARCHAR2(2000)        
    ,ShipToStateProvence_c                  VARCHAR2(2000)        
    ,CrystalCertifName_c                    VARCHAR2(2000)        
    ,PresentationDate_c                     VARCHAR2(2000)        
    ,MmrlHonoreeAddress3_c                  VARCHAR2(2000)        
    ,NameOnLetter_c                         VARCHAR2(2000)        
    ,SendRecognition_c                      VARCHAR2(2000)        
    ,AdminFeePercent_c                      VARCHAR2(2000)        
    ,RecipientIDType_c                      VARCHAR2(2000)        
    ,DonorEmail_c                           VARCHAR2(2000)        
    ,DonorCountry_c                         VARCHAR2(2000)        
    ,LineType_c                             VARCHAR2(2000)        
    ,ErrorStatisticsCode_c                  VARCHAR2(2000)        
    ,ErrorStatisticsQty_c                   VARCHAR2(2000)        
    ,ReceiptFrequency_c                     VARCHAR2(2000)        
    ,PYCalculation_c                        VARCHAR2(2000)        
    ,ShipToEmail_c                          VARCHAR2(2000)        
    ,ShipToStateProvince1_c                 VARCHAR2(2000)        
    ,ConvertedTransactionID_c               VARCHAR2(2000)        
    ,SourceName_c                           VARCHAR2(2000)        
    ,CampaignIdentifier_c                   VARCHAR2(2000)        
    ,ChunkNumber_c                          VARCHAR2(2000)        
    ,GLStatus_c                             VARCHAR2(2000)        
    ,TaxReceiptInProgress_c                 VARCHAR2(2000)        
    ,AcknowledgementSent_c                  VARCHAR2(2000)        
    ,AcknowledgementSentDate_c              VARCHAR2(2000)        
    ,CreatedBy                           VARCHAR2(200)          
    ,CreationDate                        VARCHAR2(2000)          
    ,LastUpdatedBy                       VARCHAR2(2000)          
    ,LastUpdateDate                      VARCHAR2(2000)
);


TYPE PAY_TAB_TYPE IS TABLE OF PAY_REC_TYPE;

PROCEDURE enable_logs ( p_msg VARCHAR2 );

PROCEDURE insert_into_stg_tbl_prc (	 P_TAB_TYPE                IN  PAY_TAB_TYPE
								   , x_status                 OUT  VARCHAR2
								   , x_error_msg              OUT  VARCHAR2
								  );

PROCEDURE update_na_status_prc (
								p_file_id IN  VARCHAR2,
								p_flow_id IN  VARCHAR2,
								p_status  OUT VARCHAR2,
								p_err_msg OUT VARCHAR2
								) ;

PROCEDURE validate_pledge_data_prc (
									p_file_id IN  VARCHAR2,
									p_flow_id IN  VARCHAR2,
									p_status  OUT VARCHAR2,
									p_err_msg OUT VARCHAR2
									) ;

PROCEDURE split_batch (p_file_id IN VARCHAR2 ,p_flow_id IN VARCHAR2,p_batch_limit  IN NUMBER);

PROCEDURE validate_pmt_detail_data (
									p_file_id IN  VARCHAR2,
									p_flow_id IN  VARCHAR2,
									p_batch_limit  NUMBER
									--p_status  OUT VARCHAR2,
									--p_err_msg OUT VARCHAR2
									) ;


PROCEDURE ics_async_call1(p_file_id IN VARCHAR2, p_flow_id IN VARCHAR2,p_batch_limit IN NUMBER, p_job_name OUT varchar2);

PROCEDURE update_PY_status_prc (
								p_file_id  		IN  VARCHAR2,
								p_flow_id  		IN  VARCHAR2,
								p_pystatus 		IN  VARCHAR2,
								p_revline_count OUT VARCHAR2,
								p_totline_count	OUT VARCHAR2,								
								p_status  		OUT VARCHAR2,
								p_err_msg 		OUT VARCHAR2
								);
END;
/


CREATE OR REPLACE PACKAGE rty_i027_atp_pkg AS
/***************************************************************************************************
PACKAGE:          RTY_I027_ATP_PKG
Create Date:        2023-08-01
Author:             Rakesh Gurrapu
Description:        Process NETFORUM bulk data i.e. Object storage --> ATP --> CX
                    Process NOI and NOU bulk errors for Individual and Affiliations
                    This inteegation proess only NETFORUM Individual and Affiliations
---------------------------------------------------------------------------------------------------
Version     Name        Date            Comments
1.0         Rakesh G    01-FEB-2024     Initial Version                    
***************************************************************************************************/

--procedure to get filename to write errors and move the file to FTP
PROCEDURE get_file_name (
        x_file_name OUT VARCHAR2,
        x_file_status OUT VARCHAR2);

--track plsql package debug messages from track table
    PROCEDURE log_info (
        p_log_y_n VARCHAR2,
        p_flow_id NUMBER,
        message   VARCHAR2
    );

  --terminate NF individual's status
    PROCEDURE terminate_account (
        p_flow_id         NUMBER,
        p_credentail_name IN VARCHAR2,
        p_batch_id        NUMBER,
        p_namespace       VARCHAR2,
        p_bucket          VARCHAR2,
        p_debug           IN VARCHAR2
    );

  --Process NF Affiliation relationship to CX via Import route
    PROCEDURE process_affiliation (
        p_flow_id         NUMBER,
        p_credentail_name IN VARCHAR2,
        p_batch_id        NUMBER,
        p_namespace       VARCHAR2,
        p_bucket          VARCHAR2,
        p_debug           IN VARCHAR2
    );

    FUNCTION get_sts_count (
        p_batch_id    NUMBER,
        p_object_name VARCHAR2,
        p_column_name VARCHAR2
    ) RETURN VARCHAR2;

    --populate plsql run time erors to ATP table
    PROCEDURE populate_runtime_error (
        p_flow_id      IN NUMBER,
        p_batch_id     IN NUMBER,
        p_error_detail IN VARCHAR2
    );

   --validating credit org relationship and updating ATP stats flags
    PROCEDURE validate_credit_org_relationship (
        p_flow_id         IN NUMBER,
        p_credentail_name IN VARCHAR2,
        p_batch_id        IN NUMBER,
        p_namespace       VARCHAR2,
        p_bucket          VARCHAR2,
        p_debug           IN VARCHAR2
    );

    --update import batch information to ATP main table
    PROCEDURE update_batch (
        p_flow_id        IN NUMBER,
        p_import_id      VARCHAR2,
        p_ucm_content_id VARCHAR2,
        p_object_name    VARCHAR2,
        p_batch_id       NUMBER,
        p_batch_flow_id  NUMBER
    );


    --validating NF Indivudual/Organization updating ATP stats flags
    PROCEDURE validate_customer_data (
        p_flow_id IN NUMBER,
        p_debug   IN VARCHAR2
    );

    PROCEDURE update_batch_route (
        p_batch_limit IN NUMBER,
        p_retry_limit IN NUMBER
    );

  --process credit org relatinship flow such as end and create to CX via Import Route
    PROCEDURE process_acc_flow_sts (
        p_flow_id         NUMBER,
        p_credentail_name IN VARCHAR2,
        p_batch_id        NUMBER,
        p_namespace       VARCHAR2,
        p_bucket          VARCHAR2,
        p_debug           IN VARCHAR2
    );

    --process Individual/Organizations data to CX via import route
    PROCEDURE account_update (
        p_credentail_name IN VARCHAR2,
        p_flow_id         IN NUMBER,
        p_batch_id        IN NUMBER,
        p_namespace       VARCHAR2,
        p_bucket          VARCHAR2,
        p_debug           IN VARCHAR2
    );

   --creating Indiviudal/Organizations batches depends on OIC lookup batch threshold
    PROCEDURE split_batches (
        p_flow_id     IN NUMBER,
        p_batch_limit NUMBER,
        p_debug       IN VARCHAR2
    );

   --creating Affiliation batches depends on OIC lookup batch threshold
    PROCEDURE split_relship_batches (
        p_flow_id     IN NUMBER,
        p_batch_limit NUMBER,
        p_debug       IN VARCHAR2
    );

   --update Import route errors to ATP table
    PROCEDURE update_batch_err (
        p_flow_id          NUMBER,
        p_credentail_name  IN VARCHAR2,
        p_batch_id         NUMBER,
        p_status           VARCHAR2,
        p_object_name      VARCHAR2,
        p_object_hierarchy VARCHAR2,
        p_namespace        VARCHAR2,
        p_bucket           VARCHAR2,
        p_debug            IN VARCHAR2
    );

    --creating credit org relationship's via import route to cx
    PROCEDURE create_credit_org_relship (
        p_flow_id         NUMBER,
        p_credentail_name IN VARCHAR2,
        p_batch_id        NUMBER,
        p_namespace       VARCHAR2,
        p_bucket          VARCHAR2,
        p_debug           IN VARCHAR2
    );

   --validating affiliatedat and updating ATP stats flags
    PROCEDURE validate_affiliate_relship (
        p_flow_id         NUMBER,
        p_batch_id        NUMBER,
        p_credentail_name IN VARCHAR2,
        p_namespace       VARCHAR2,
        p_bucket          VARCHAR2,
        p_debug           IN VARCHAR2
    );

      PROCEDURE populate_error (
        p_flow_id      IN NUMBER,
        p_error_reason VARCHAR2,
        p_error_detail VARCHAR2);

END;
/


CREATE OR REPLACE package RTY_I027_CMN_PKG
as
PROCEDURE get_file_name (
        x_file_name OUT VARCHAR2,
        x_file_status OUT VARCHAR2);

end;
/

CREATE OR REPLACE PACKAGE BODY rty_common_db_pkg AS
    PROCEDURE update_statement (
        p_instance_id        VARCHAR2,
        p_table_name         VARCHAR2,
        p_operation          VARCHAR2,
        l_set_column1        VARCHAR2,
        l_andcondition_col1  VARCHAR2
    ) AS

        l_sqlstmt      VARCHAR2(1000);
        l_set_clause   VARCHAR2(1000);
        l_set_clause_c VARCHAR2(1000);
        l_and_clause_c VARCHAR2(1000);
        l_set_clause2  VARCHAR2(1000);
        l_where_clause VARCHAR2(1000);
        l_andcondition VARCHAR2(1000);
        l_sql          VARCHAR2(10000);
        l_sqlerrm      VARCHAR2(1000);
    BEGIN
        IF p_operation = 'UPDATE' THEN
            l_sqlstmt := p_operation
                         || ' '
                         || p_table_name
                         || ' SET ';
            IF l_set_column1 IS NOT NULL THEN

	--l_set_clause_c := (l_set_column1);
                l_set_clause := l_set_column1; --l_set_clause_c;
            END IF;


--where clause
            IF l_andcondition_col1 IS NOT NULL THEN
                l_and_clause_c := 'WHERE 1=1';
                l_and_clause_c := l_and_clause_c
                                  || ' '
                                  || l_andcondition_col1;
                l_where_clause := ' '
                                  || l_where_clause
                                  || ' '
                                  || l_and_clause_c;
            END IF;

            l_where_clause := l_where_clause || '';
            dbms_output.put_line(l_sqlstmt
                                 || l_set_clause
                                 || l_where_clause);
            l_sql := l_sqlstmt
                     || l_set_clause
                     || l_where_clause;
            l_sql := l_sql;
            BEGIN
                INSERT INTO rty_i010_crud_tbl VALUES (
                    p_instance_id,
                    l_sql,
                    sysdate,
                    '',
                    p_operation
                );

            END;

            dbms_output.put_line('l_sql--> ' || l_sql);
            BEGIN
                EXECUTE IMMEDIATE l_sql;
            END;
            COMMIT;
        END IF;

--delete statment

        IF p_operation = 'DELETE' THEN
            l_sqlstmt := p_operation
                         || ' '
                         || p_table_name
                         || '  WHERE 1=1 ';
--where clause
            IF l_andcondition_col1 IS NOT NULL THEN
                l_and_clause_c := l_and_clause_c
                                  || ' '
                                  || ( l_andcondition_col1 );
                l_where_clause := ' '
                                  || l_where_clause
                                  || ' '
                                  || l_and_clause_c;
            END IF;

            l_where_clause := l_where_clause || '';
            dbms_output.put_line(l_sqlstmt
                                 || l_set_clause
                                 || l_where_clause);
            l_sql := l_sqlstmt
                     || l_set_clause
                     || l_where_clause;
            l_sql := l_sql;
            BEGIN
                INSERT INTO rty_i010_crud_tbl VALUES (
                    p_instance_id,
                    l_sql,
                    sysdate,
                    '',
                    p_operation
                );

            END;

            dbms_output.put_line('l_sql--> ' || l_sql);
            BEGIN
                EXECUTE IMMEDIATE l_sql;
            END;
            COMMIT;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            l_sqlerrm := sqlerrm;
            INSERT INTO rty_i010_crud_tbl VALUES (
                p_instance_id,
                l_sql,
                sysdate,
                l_sqlerrm,
                p_operation
            );

            COMMIT;
    END;

END;
/


CREATE OR REPLACE PACKAGE BODY "RTY_CX_BICC_ATP_PKG" 
    as
    
/***************************************************************************************************
Procedure:          RTY_CX_BICC_ATP_PKG
Create Date:        2022-09-01
Author:             Rakesh Gurrapu
Description:        Process OCI Object storage files to ATP (Inserts and Updates)
---------------------------------------------------------------------------------------------------
Version     Name        Date            Comments
1.0         Rakesh G    01-FEB-2024     Initial Version
1.1         Rakesh G    16-FEB-2024     Added DailyRateTable to BICC FAM-3572
1.2         Rakesh G    03-Apr-2024     FAM-3788 -
                                        Package: Added condition to maintain corporate entries in  RTY_CX_B_DAILYRATES_TBL.
                                        BICC Sync: Check Primary column flag has been enabled or not.
										Truncate Table: RTY_CX_B_DAILYRATES_TBL
										BICC Sync: Rest Full Extract for the file: %dailyrateextractpvo%
1.3         Vamsi       29-Mar-2024     FAM-3851 Added Tracked Gift Donor Table / BICC alos Offering added Newly
                                        Added New Column in Tracked_c object: LIMITEDTODONORS_C. Table/Index chnages 
										Restructured: RTY_CX_B_TRACKED_STG_TBL
										-- Reactivate Integration
1.4         Rakesh G    20-June-2024    FS-411: Commented COMMIT for Incremental Updates/INSERTS
										updated cursor logic for Relationship, Accounts and PartyNFID tables
1.5         Sriram      120July-2024    FC-263: Added Events Object.
***************************************************************************************************/  

    l_object_storage VARCHAR2(500) := 'https://swiftobjectstorage.us-ashburn-1.oraclecloud.com/v1/';
    l_credential VARCHAR2(100) := 'RTY_ATP_OS_CRED';
    l_status VARCHAR2(10) := 'N';
    l_temp_file blob;
    p_table_name VARCHAR2(100);

procedure populate_error(p_instnace_id number,p_file_name varchar2,p_tbl_name varchar2,p_err_msg varchar2)
AS
PRAGMA AUTONOMOUS_TRANSACTION; 
BEGIN
	insert into rty_cx_bicc_error_tbl(instance_id,file_name,table_name,error_message,creation_date) values (p_instnace_id,p_file_name,p_tbl_name,p_err_msg,sysdate);
commit;
    exception when others then
    null;
end;						

    PROCEDURE cleansestgtbl
    as
    begin
        execute immediate 'TRUNCATE table RTY_CX_B_ALIAS_STG_TBL';
		execute immediate 'TRUNCATE table RTY_CX_B_GRANTS_STG_TBL';
		execute immediate 'TRUNCATE table RTY_CX_B_TRACKED_STG_TBL';
		execute immediate 'TRUNCATE table RTY_CX_B_TRACKED_DONOR_STG_TBL';  -- FAM-3851
		execute immediate 'TRUNCATE table RTY_CX_B_RELATIONSHIP_STG_TBL';
		execute immediate 'TRUNCATE table RTY_CX_B_ACCTPERIOD_STG_TBL';
		execute immediate 'TRUNCATE table RTY_CX_B_ACCOUNTS_STG_TBL';
		execute immediate 'TRUNCATE table RTY_CX_TMP_TERRITORIES';
		execute immediate 'TRUNCATE table RTY_CX_B_COMMITMENTS_STG_TBL';
		execute immediate 'TRUNCATE table RTY_CX_B_PLEDGES_STG_TBL';
		execute immediate 'TRUNCATE table RTY_CX_TMP_LOOKUP_TBL';
		execute immediate 'TRUNCATE table RTY_CX_B_EVENTS_STG_TBL';
		execute immediate 'TRUNCATE table RTY_CX_B_PARTY_NFID_STG_TBL';
		execute immediate 'TRUNCATE table RTY_CX_B_DAILYRATES_STG_TBL'; --FAM-3572


    end;

    Procedure copy_data(p_table_name1 varchar2,p_namespace varchar2,p_bucketname varchar2,p_file_name varchar2)
    as
    l_err_msg varchar2(1000);
    BEGIN
    --inserting data into stage table from main bucket
      BEGIN
       dbms_output.put_line('p_table_name1: '||p_table_name1||'-'||'p_file_name: '||p_file_name);
      dbms_cloud.copy_data(table_name      => p_table_name1,
                            credential_name => l_credential,
                            file_uri_list   => l_object_storage||p_namespace||'/'||p_bucketname||'/'||p_file_name,
                            format          =>  json_object('ignoremissingcolumns' value 'true','removequotes' value 'true',  'blankasnull' value 'true', 'delimiter' value ',', 'skipheaders' value '1')
                            );


       dbms_output.put_line('track2');
       COMMIT;
        exception
          when others then
         NULL;
         l_err_msg := sqlerrm;
          populate_error(null,p_file_name ,p_table_name1,'ERR-15: '||l_err_msg);
          END;


    END;

Procedure update_data(p_tbl_name IN VARCHAR2,p_file_name VARCHAR2)
AS

    --ALIAS UPDATES/INSERTS to MAIN TABLE
	cursor cur_upd_alias
    IS
    SELECT distinct alias_b.*
    from RTY_CX_B_ALIAS_STG_TBL alias_b,
         RTY_CX_B_ALIAS_TBL alias
    where alias_b.id = alias.id;

	 --EVENTS UPDATES/INSERTS to MAIN TABLE
	cursor cur_upd_events
    IS
    SELECT distinct  a.*
    from RTY_CX_B_EVENTS_STG_TBL A,
         RTY_CX_B_EVENTS_TBL b
    where a.id = b.id;

		 --GRANTS UPDATES/INSERTS to MAIN TABLE
	cursor cur_upd_grants
    IS
    SELECT distinct a.*
    from RTY_CX_B_GRANTS_STG_TBL A,
         RTY_CX_B_GRANTS_TBL b
    where a.id = b.id;


	--TRACK UPDATES/INSERTS to MAIN TABLE
	cursor cur_upd_track
    IS
    SELECT distinct a.*
    from RTY_CX_B_TRACKED_STG_TBL A,
         RTY_CX_B_TRACKED_TBL b
    where a.id = b.id;

   -- FAM - 3851 Tracked Donors 
	cursor cur_upd_track_d
    IS
    SELECT distinct a.*
    from RTY_CX_B_TRACKED_DONOR_STG_TBL A,
         RTY_CX_B_TRACKED_DONOR_TBL b
    where a.id = b.id;

	--RELATIONSHIP UPDATES/INSERTS to MAIN TABLE
	cursor cur_upd_rel
    IS
    SELECT distinct a.*
    from RTY_CX_B_RELATIONSHIP_STG_TBL A,
         RTY_CX_B_RELATIONSHIP_TBL b
    where a.RELATIONSHIPRECID = b.RELATIONSHIPRECID;

    --ACCTPERIOD UPDATES/INSERTS to MAIN TABLE
	cursor cur_upd_acctperiod
    IS
    SELECT distinct a.*
    from RTY_CX_B_ACCTPERIOD_STG_TBL A,
         RTY_CX_B_ACCTPERIOD_TBL b
    where a.id = b.id;

	--ACCTUPDATES UPDATES/INSERTS to MAIN TABLE
	cursor cur_upd_acct
    IS
    SELECT distinct a.*
    from RTY_CX_B_ACCOUNTS_STG_TBL A,
         RTY_CX_B_ACCOUNTS_TBL b
    where a.PARTYID = b.PARTYID;

	--territories UPDATES/INSERTS to MAIN TABLE
	cursor cur_upd_territory
    IS
    SELECT distinct b.*
    from RTY_CX_B_TERRITORIES A,
         RTY_CX_TMP_TERRITORIES b
    where a.TERRITORYCODE = b.TERRITORYCODE;

	--pledges UPDATES/INSERTS to MAIN TABLE
	cursor cur_upd_pledges
    IS
    SELECT distinct b.*
    from RTY_CX_B_Pledges_tbl A,
         RTY_CX_B_Pledges_stg_tbl b
    where a.id = b.id;

	--commitments UPDATES/INSERTS to MAIN TABLE
	cursor cur_upd_commitments
    IS
    SELECT distinct b.*
    from RTY_CX_B_Commitments_tbl A,
         RTY_CX_B_Commitments_stg_tbl b
    where a.id = b.id;

	--NFID PARTY UPDATES/INSERTS to MAIN TABLE
	cursor cur_upd_nfidparties
    IS
    SELECT distinct b.*
    from RTY_CX_B_PARTY_NFID_TBL A,
         RTY_CX_B_PARTY_NFID_STG_TBL b
    where a.PARTYID = b.PARTYID; 


	--Lookup UPDATES/INSERTS to MAIN TABLE
	cursor cur_upd_lookup
    IS
    SELECT distinct b.*
    from rty_cx_b_lookup_tbl A,
         rty_cx_tmp_lookup_tbl b
    where a.lookupcode1 = b.lookupcode1;

	--FAM-3572
	--DailyRates UPDATES/INSERTS to MAIN TABLE
	cursor cur_upd_dailyrates
    IS
    SELECT distinct b.*
    from RTY_CX_B_DAILYRATES_TBL A,
         RTY_CX_B_DAILYRATES_STG_TBL b
    where a.DAILYRATECONVERSIONDATE = b.DAILYRATECONVERSIONDATE
	and a.DAILYRATETOCURRENCY = b.DAILYRATETOCURRENCY
	and a.DAILYRATEFROMCURRENCY = b.DAILYRATEFROMCURRENCY;

	type cur_upd_rel_t is table of cur_upd_rel%rowtype;
	l_rel_rec_list     cur_upd_rel_t; 

    type cur_upd_acct_t is table of cur_upd_acct%rowtype;
	l_acct_rec_list     cur_upd_acct_t; 

    type cur_upd_nfidparties_t is table of cur_upd_nfidparties%rowtype;
	l_rec_list     cur_upd_nfidparties_t; 

	l_rows_max number := 10000;

    begin

	IF p_tbl_name = 'RTY_CX_B_ALIAS_STG_TBL' THEN

	--updating incremental data
    for alias_rec_upd in cur_upd_alias LOOP
        update RTY_CX_B_ALIAS_TBL
        set ACTIVE_C = alias_rec_upd.ACTIVE_C,
            ALIASDESRIPTION_C = alias_rec_upd.ALIASDESRIPTION_C,
            ALIAS_ID_C = alias_rec_upd.ALIAS_ID_C,
            CONTRIBUTIONFLAG_C = alias_rec_upd.CONTRIBUTIONFLAG_C,
            CORPCURRENCYCODE = alias_rec_upd.CORPCURRENCYCODE,
            CREATEDBY = alias_rec_upd.CREATEDBY,
            CREATIONDATE = alias_rec_upd.CREATIONDATE,
            CURCYCONVRATETYPE = alias_rec_upd.CURCYCONVRATETYPE,
            CURRENCYCODE = alias_rec_upd.CURRENCYCODE,
            DESRIPTION_C = alias_rec_upd.DESRIPTION_C,
            FEEPERCENTAGE_C = alias_rec_upd.FEEPERCENTAGE_C,
            FUND_C = alias_rec_upd.FUND_C,
            GRANTRELATED_C = alias_rec_upd.GRANTRELATED_C,
            LASTUPDATEDATE = alias_rec_upd.LASTUPDATEDATE,
            LASTUPDATELOGIN = alias_rec_upd.LASTUPDATELOGIN,
            LASTUPDATEDBY = alias_rec_upd.LASTUPDATEDBY,
            NONCONTRIBUTIONRELATED_C = alias_rec_upd.NONCONTRIBUTIONRELATED_C,
            ORAZCXOWNER_ID_C = alias_rec_upd.ORAZCXOWNER_ID_C,
            ORAZCXSEARCHFILTER_C = alias_rec_upd.ORAZCXSEARCHFILTER_C,
            PYCALCULATION_C = alias_rec_upd.PYCALCULATION_C,
            PLEDGERELATED_C = alias_rec_upd.PLEDGERELATED_C,
            RECORDNAME = alias_rec_upd.RECORDNAME,
            RECORDNUMBER = alias_rec_upd.RECORDNUMBER,
            SUBFUND_C = alias_rec_upd.SUBFUND_C,
            TEMPLATENAME_C = alias_rec_upd.TEMPLATENAME_C,
            TRACKEDGIFTRELATED_C = alias_rec_upd.TRACKEDGIFTRELATED_C,
            TRACKEDGIFT_ID_C = alias_rec_upd.TRACKEDGIFT_ID_C
        where id = alias_rec_upd.id;
    -- COMMIT; 
    end loop;

	-- inserting new records
    BEGIN
       insert into RTY_CX_B_ALIAS_TBL 
		SELECT *
        from RTY_CX_B_ALIAS_STG_TBL A
        where not exists 
                (select 1 from RTY_CX_B_ALIAS_TBL where id = a.id);
    -- COMMIT; 
    EXCEPTION
    WHEN OTHERS THEN
      populate_error(null,p_file_name ,p_table_name,'ERR-16:'||substr(sqlerrm,1,1000));
    END;

	ELSIF p_tbl_name = 'RTY_CX_B_EVENTS_STG_TBL' THEN

		--updating incremental data
    for events_rec_upd in cur_upd_events LOOP
        update RTY_CX_B_EVENTS_TBL
        set CORPCURRENCYCODE = events_rec_upd.CORPCURRENCYCODE,
            CREATEDBY = events_rec_upd.CREATEDBY,
            CREATIONDATE = events_rec_upd.CREATIONDATE,
            CURCYCONVRATETYPE = events_rec_upd.CURCYCONVRATETYPE,
            CURRENCYCODE = events_rec_upd.CURRENCYCODE,
            DECSRIPTION_C = events_rec_upd.DECSRIPTION_C,
            ERPPROJECTID_C = events_rec_upd.ERPPROJECTID_C,
            EVENTDESCIPTION_C = events_rec_upd.EVENTDESCIPTION_C,
            LASTUPDATEDATE = events_rec_upd.LASTUPDATEDATE,
            LASTUPDATELOGIN = events_rec_upd.LASTUPDATELOGIN,
            LASTUPDATEDBY = events_rec_upd.LASTUPDATEDBY,
            ORAZCXOWNER_ID_C = events_rec_upd.ORAZCXOWNER_ID_C,
            ORAZCXSEARCHFILTER_C = events_rec_upd.ORAZCXSEARCHFILTER_C,
            RECORDNAME = events_rec_upd.RECORDNAME,
            RECORDNUMBER = events_rec_upd.RECORDNUMBER,
            REGISTRATIONALIAS_ID_C = events_rec_upd.REGISTRATIONALIAS_ID_C,
            TAXALIAS_ID_C = events_rec_upd.TAXALIAS_ID_C,
            TAXPERCENTAGE_C = events_rec_upd.TAXPERCENTAGE_C,
            TEMPLATENAME_C = events_rec_upd.TEMPLATENAME_C
        where id = events_rec_upd.id;
    -- COMMIT; 
    end loop;
         --populate_error(null,p_file_name ,p_table_name,'Track1:'||substr(sqlerrm,1,1000));
	-- inserting new records
    BEGIN
       insert into RTY_CX_B_EVENTS_TBL 
		SELECT *
        from RTY_CX_B_EVENTS_STG_TBL A
        where not exists 
                (select 1 from RTY_CX_B_EVENTS_TBL where id = a.id);
     --COMMIT; 
	          --populate_error(null,p_file_name ,p_table_name,'Track2:'||substr(sqlerrm,1,1000));
    EXCEPTION
    WHEN OTHERS THEN
      populate_error(null,p_file_name ,p_table_name,'ERR-15:'||substr(sqlerrm,1,1000));
    END;

	ELSIF p_tbl_name = 'RTY_CX_B_GRANTS_STG_TBL' THEN

		--updating incremental data
    for grants_rec_upd in cur_upd_grants LOOP
        update RTY_CX_B_GRANTS_TBL
        set CREATIONDATE = grants_rec_upd.CREATIONDATE,
			CURRENCYCODE = grants_rec_upd.CURRENCYCODE,
			DESCRIPTION_C = grants_rec_upd.DESCRIPTION_C,
			LASTUPDATEDATE = grants_rec_upd.LASTUPDATEDATE,
			LASTUPDATEDBY = grants_rec_upd.LASTUPDATEDBY,
			RECORDNAME = grants_rec_upd.RECORDNAME,
			RECORDNUMBER = grants_rec_upd.RECORDNUMBER,
			TEMPLATENAME_C = grants_rec_upd.TEMPLATENAME_C
        where id = grants_rec_upd.id;
    end loop;

	-- inserting new records
    BEGIN
       insert into RTY_CX_B_GRANTS_TBL 
		SELECT *
        from RTY_CX_B_GRANTS_STG_TBL A
        where not exists 
                (select 1 from RTY_CX_B_GRANTS_TBL where id = a.id);
    -- COMMIT; 
    EXCEPTION
    WHEN OTHERS THEN
     populate_error(null,p_file_name ,p_table_name,'ERR-14:'||substr(sqlerrm,1,1000));
    END;

	ELSIF p_tbl_name = 'RTY_CX_B_TRACKED_STG_TBL' THEN

		--updating incremental data
    for track_rec_upd in cur_upd_track LOOP
        update RTY_CX_B_TRACKED_TBL
        set ALIAS_ID_C = track_rec_upd.ALIAS_ID_C,
			AREAOFFOCUS_C  = track_rec_upd.AREAOFFOCUS_C ,
			CREATIONDATE  = track_rec_upd.CREATIONDATE ,
			CURRENCYCODE  = track_rec_upd.CURRENCYCODE ,
			DESIGNATION_ID_C  = track_rec_upd.DESIGNATION_ID_C ,
			DONORNAME_ID_C  = track_rec_upd.DONORNAME_ID_C ,
			ENTITY_C  = track_rec_upd.ENTITY_C ,
			FUND_C  = track_rec_upd.FUND_C ,
			GIFTNAME_C  = track_rec_upd.GIFTNAME_C ,
			GIFTTYPE_C  = track_rec_upd.GIFTTYPE_C ,
			LASTUPDATEDATE  = track_rec_upd.LASTUPDATEDATE ,
			LIMITEDTODONORS_C = track_rec_upd.LIMITEDTODONORS_C,       -- FAM- 3851 
			LASTUPDATEDBY  = track_rec_upd.LASTUPDATEDBY ,
			ORAZCXOWNER_ID_C  = track_rec_upd.ORAZCXOWNER_ID_C ,
			PRIMARYDONORIDTYPE_C  = track_rec_upd.PRIMARYDONORIDTYPE_C ,
			PRIMARYDONORID_C  = track_rec_upd.PRIMARYDONORID_C ,
			RECORDNAME  = track_rec_upd.RECORDNAME ,
			RECORDNUMBER  = track_rec_upd.RECORDNUMBER ,
			REPORTPREFERRED_C   = track_rec_upd.REPORTPREFERRED_C  ,
			STATUSID_C  = track_rec_upd.STATUSID_C ,
			TEMPLATENAME_C = track_rec_upd.TEMPLATENAME_C
        where id = track_rec_upd.id;
    end loop;

	-- inserting new records
    BEGIN
       insert into RTY_CX_B_TRACKED_TBL 
		SELECT *
        from RTY_CX_B_TRACKED_STG_TBL A
        where not exists 
                (select 1 from RTY_CX_B_TRACKED_TBL where id = a.id);
     --COMMIT; 
    EXCEPTION
    WHEN OTHERS THEN
      populate_error(null,p_file_name ,p_table_name,'ERR-13:'||substr(sqlerrm,1,1000));
    END;

   -- FAM -3851 Added for Tracked Donor 
   ELSIF p_tbl_name = 'RTY_CX_B_TRACKED_DONOR_STG_TBL' THEN

	--updating incremental data
    for track_d_rec_upd in cur_upd_track_d LOOP
        update RTY_CX_B_TRACKED_DONOR_TBL
        set 
			ACTUALCONTRIBUTOR_C      =    track_d_rec_upd.ACTUALCONTRIBUTOR_C   
			,CORPCURRENCYCODE	     =    track_d_rec_upd.CORPCURRENCYCODE	  
			,CREATEDBY	             =    track_d_rec_upd.CREATEDBY	          
			,CREATIONDATE	         =    track_d_rec_upd.CREATIONDATE	      
			,CURCYCONVRATETYPE	     =    track_d_rec_upd.CURCYCONVRATETYPE	  
			,CURRENCYCODE	         =    track_d_rec_upd.CURRENCYCODE	      
			,DONOR_ID_C	             =    track_d_rec_upd.DONOR_ID_C	          
			,ID	                     =    track_d_rec_upd.ID	                  
			,LASTUPDATEDATE	         =    track_d_rec_upd.LASTUPDATEDATE	      
			,LASTUPDATELOGIN	     =    track_d_rec_upd.LASTUPDATELOGIN	 
			,LASTUPDATEDBY	         =    track_d_rec_upd.LASTUPDATEDBY
			,PRIMARYDONOR_C	         =    track_d_rec_upd.PRIMARYDONOR_C	      
			,RECORDNAME	             =    track_d_rec_upd.RECORDNAME	          
			,RECORDNUMBER	         =    track_d_rec_upd.RECORDNUMBER	      
			,REPORTRECIPIENT_C       =    track_d_rec_upd.REPORTRECIPIENT_C    
			,REPORTRECIPIENTS_C      =    track_d_rec_upd.REPORTRECIPIENTS_C   
			,ROWTYPE	             =    track_d_rec_upd.ROWTYPE	          
			,TG_DONOR_ID_C	         =    track_d_rec_upd.TG_DONOR_ID_C	      
			,TG_DONORTYPE_C	         =    track_d_rec_upd.TG_DONORTYPE_C	      
			,TEMPLATENAME_C	         =    track_d_rec_upd.TEMPLATENAME_C	      
			,TRACKED_ID_C	         =    track_d_rec_upd.TRACKED_ID_C	      
			   where id = track_d_rec_upd.id;
				end loop;


	-- inserting new records
    BEGIN
       insert into RTY_CX_B_TRACKED_DONOR_TBL 
		SELECT *
        from RTY_CX_B_TRACKED_DONOR_STG_TBL A
        where not exists 
                (select 1 from RTY_CX_B_TRACKED_DONOR_TBL where id = a.id);
    -- COMMIT; 
    EXCEPTION
    WHEN OTHERS THEN
      populate_error(null,p_file_name ,p_table_name,'ERR-13:'||substr(sqlerrm,1,1000));
    END;


	ELSIF p_tbl_name = 'RTY_CX_B_RELATIONSHIP_STG_TBL' THEN

        
        begin
             SELECT distinct a.*
             bulk collect into l_rel_rec_list
            from RTY_CX_B_RELATIONSHIP_STG_TBL A,
                 RTY_CX_B_RELATIONSHIP_TBL b
            where a.RELATIONSHIPRECID = b.RELATIONSHIPRECID;
         EXCEPTION
		WHEN OTHERS THEN
		  populate_error(null,p_file_name ,p_table_name,'ERR-7.3:'||substr(sqlerrm,1,1000));
		END; --V 1.4 Updates

		forall i in 1 .. l_rel_rec_list.count          
            update RTY_CX_B_RELATIONSHIP_TBL
               set  OBJECTPARTYPEOPARTYID =			 l_rel_rec_list(i).OBJECTPARTYPEOPARTYID,
					RELATIONSHIPCODE  = 			 l_rel_rec_list(i).RELATIONSHIPCODE ,
					RELATIONSHIPCREATIONDATE  =	 	 l_rel_rec_list(i).RELATIONSHIPCREATIONDATE ,
					RELATIONSHIPSTARTDATE  =	 	 l_rel_rec_list(i).RELATIONSHIPSTARTDATE ,
					RELATIONSHIPENDDATE  =	 		 l_rel_rec_list(i).RELATIONSHIPENDDATE ,
					RELATIONSHIPID  = 				 l_rel_rec_list(i).RELATIONSHIPID ,
					RELATIONSHIPTYPE  = 			 l_rel_rec_list(i).RELATIONSHIPTYPE ,
					SUBJECTPARTYPEOPARTYNAME  =		 l_rel_rec_list(i).SUBJECTPARTYPEOPARTYNAME ,
					SUBJECTPARTYPEOPARTYNUMBER  = 	 l_rel_rec_list(i).SUBJECTPARTYPEOPARTYNUMBER ,
					SUBJECTPARTYPEOPARTYTYPE  = 	 l_rel_rec_list(i).SUBJECTPARTYPEOPARTYTYPE ,
					SUBJECTPARTYPEOPARTYUNIQUENAME = l_rel_rec_list(i).SUBJECTPARTYPEOPARTYUNIQUENAME ,
					SUBJECTPARTYPEOSUBJECTPARTYID  = l_rel_rec_list(i).SUBJECTPARTYPEOSUBJECTPARTYID
             where RELATIONSHIPRECID = 				 l_rel_rec_list(i).RELATIONSHIPRECID;

	-- inserting new records
    BEGIN
       insert into RTY_CX_B_RELATIONSHIP_TBL 
		SELECT *
        from RTY_CX_B_RELATIONSHIP_STG_TBL A
        where not exists 
                (select 1 from RTY_CX_B_RELATIONSHIP_TBL where RELATIONSHIPRECID = a.RELATIONSHIPRECID);
     --COMMIT; 
    EXCEPTION
    WHEN OTHERS THEN
     populate_error(null,p_file_name ,p_table_name,'ERR-12:'||substr(sqlerrm,1,1000));
    END;

    ELSIF p_tbl_name = 'RTY_CX_B_ACCTPERIOD_STG_TBL' THEN

		--updating incremental data
    for acctperiod_rec_upd in cur_upd_acctperiod LOOP
        update RTY_CX_B_ACCTPERIOD_TBL
        set CALENDARYEAR_C = acctperiod_rec_upd.CALENDARYEAR_C,
            CREATEDBY = acctperiod_rec_upd.CREATEDBY,
            CREATIONDATE = acctperiod_rec_upd.CREATIONDATE,
            FISCALYEAR_C = acctperiod_rec_upd.FISCALYEAR_C,
            ID = acctperiod_rec_upd.ID,
            LASTUPDATEDATE = acctperiod_rec_upd.LASTUPDATEDATE,
            LASTUPDATELOGIN = acctperiod_rec_upd.LASTUPDATELOGIN,
            LASTUPDATEDBY = acctperiod_rec_upd.LASTUPDATEDBY,
            PERIODENDDATE_C = acctperiod_rec_upd.PERIODENDDATE_C,
            PERIODMONTH_C = acctperiod_rec_upd.PERIODMONTH_C,
            PERIODSTARTDATE_C = acctperiod_rec_upd.PERIODSTARTDATE_C,
            PERIOD_C = acctperiod_rec_upd.PERIOD_C,
            RECORDNAME = acctperiod_rec_upd.RECORDNAME,
            STATUS_C = acctperiod_rec_upd.STATUS_C
        where id = acctperiod_rec_upd.id;
  --  COMMIT; 
    end loop;

	-- inserting new records
    BEGIN
       insert into RTY_CX_B_ACCTPERIOD_TBL 
		SELECT *
        from RTY_CX_B_ACCTPERIOD_STG_TBL A
        where not exists 
                (select 1 from RTY_CX_B_ACCTPERIOD_TBL where id = a.id);
    COMMIT; 
    EXCEPTION
    WHEN OTHERS THEN
      populate_error(null,p_file_name ,p_table_name,'ERR-11:'||substr(sqlerrm,1,1000));
    END;


	ELSIF p_tbl_name = 'RTY_CX_B_ACCOUNTS_STG_TBL' THEN
	
	
	begin
		 SELECT distinct a.*
		 BULK COLLECT INTO l_acct_rec_list
		from RTY_CX_B_ACCOUNTS_STG_TBL A,
			 RTY_CX_B_ACCOUNTS_TBL b
		where a.PARTYID = b.PARTYID;
	 EXCEPTION
    WHEN OTHERS THEN
      populate_error(null,p_file_name ,p_table_name,'ERR-7.2:'||substr(sqlerrm,1,1000));
	end; --V 1.4 Updates

		--updating incremental data
    forall i in 1 .. l_acct_rec_list.count  
        update RTY_CX_B_ACCOUNTS_TBL
        set CURRENCYCODE  = l_acct_rec_list(i).CURRENCYCODE,
			ORGANIZATIONNAME = l_acct_rec_list(i).ORGANIZATIONNAME,
			ORGANIZATIONPROFILEID = l_acct_rec_list(i).ORGANIZATIONPROFILEID,
			ORGANIZATIONTYPE = l_acct_rec_list(i).ORGANIZATIONTYPE,
			PARTYID = l_acct_rec_list(i).PARTYID,
			PARTYNAME = l_acct_rec_list(i).PARTYNAME,
			PARTYNUMBER = l_acct_rec_list(i).PARTYNUMBER,
			PARTYTYPE = l_acct_rec_list(i).PARTYTYPE,
            ADDRESS1 = l_acct_rec_list(i).ADDRESS1,
            COUNTRY = l_acct_rec_list(i).COUNTRY,
            EMAILADDRESS = l_acct_rec_list(i).EMAILADDRESS
        where PARTYID = l_acct_rec_list(i).PARTYID;
        
	-- inserting new records
    BEGIN
       insert into RTY_CX_B_ACCOUNTS_TBL 
		SELECT *
        from RTY_CX_B_ACCOUNTS_STG_TBL A
        where not exists 
                (select 1 from RTY_CX_B_ACCOUNTS_TBL where PARTYID = a.PARTYID);
  --  COMMIT;            
    EXCEPTION
    WHEN OTHERS THEN
      populate_error(null,p_file_name ,p_table_name,'ERR-10:'||substr(sqlerrm,1,1000));
    END;


	ELSIF p_tbl_name = 'RTY_CX_TMP_TERRITORIES' THEN

		--updating incremental data
    for terri_rec in cur_upd_territory LOOP
        update RTY_CX_B_TERRITORIES
        set CREATIONDATE  = terri_rec.CREATIONDATE,
			TERRITORYCODE = terri_rec.TERRITORYCODE,
			TERRITORYSHORTNAME = terri_rec.TERRITORYSHORTNAME,
			RECORD_CREATION_DATE = terri_rec.RECORD_CREATION_DATE
        where TERRITORYCODE = terri_rec.TERRITORYCODE;
     --COMMIT; 
    end loop;

	-- inserting new records
    BEGIN
       insert into RTY_CX_B_TERRITORIES 
		SELECT *
        from RTY_CX_TMP_TERRITORIES A
        where not exists 
                (select 1 from RTY_CX_B_TERRITORIES where TERRITORYCODE = a.TERRITORYCODE);
   -- COMMIT;            
    EXCEPTION
    WHEN OTHERS THEN
     populate_error(null,p_file_name ,p_table_name,'ERR-09:'||substr(sqlerrm,1,1000));
    END;

	ELSIF p_tbl_name = 'RTY_CX_B_COMMITMENTS_STG_TBL' THEN

	--updating incremental data
    for commitments_rec in cur_upd_commitments LOOP
        update RTY_CX_B_COMMITMENTS_TBL
        set   CREATIONDATE	= commitments_rec.CREATIONDATE,
			   LASTUPDATEDATE	= commitments_rec.LASTUPDATEDATE,
			   RECORDNAME	= commitments_rec.RECORDNAME,
			   RECORDNUMBER	= commitments_rec.RECORDNUMBER,
			   TRANSACTIONDATE_C = commitments_rec.TRANSACTIONDATE_C
		where  ID = commitments_rec.id;
    -- COMMIT; 
    end loop;

	-- inserting new records
    BEGIN
       insert into RTY_CX_B_COMMITMENTS_TBL 
		SELECT *
        from RTY_CX_B_COMMITMENTS_STG_TBL A
        where not exists 
                (select 1 from RTY_CX_B_COMMITMENTS_TBL where id = a.id);
  --  COMMIT;            
    EXCEPTION
    WHEN OTHERS THEN
      populate_error(null,p_file_name ,p_table_name,'ERR-08:'||substr(sqlerrm,1,1000));
    END;

ELSIF p_tbl_name = 'RTY_CX_B_PARTY_NFID_STG_TBL' THEN

	BEGIN
	 SELECT distinct b.*
	 BULK COLLECT INTO l_rec_list
		from RTY_CX_B_PARTY_NFID_TBL A,
			 RTY_CX_B_PARTY_NFID_STG_TBL b
		where a.PARTYID = b.PARTYID;
	 EXCEPTION
		WHEN OTHERS THEN
		  populate_error(null,p_file_name ,p_table_name,'ERR-7.1:'||substr(sqlerrm,1,1000));
	END;--V 1.4 Updates

	--updating incremental data
    forall i in 1 .. l_rec_list.count  
        update RTY_CX_B_PARTY_NFID_TBL
        set    CREATEDBY = l_rec_list(i).CREATEDBY,
				CREATIONDATE  = l_rec_list(i).CREATIONDATE,
				EXTNATTRIBUTECHAR002  = l_rec_list(i).EXTNATTRIBUTECHAR002,
				LASTUPDATEDATE  = l_rec_list(i).LASTUPDATEDATE,
				LASTUPDATEDBY  = l_rec_list(i).LASTUPDATEDBY,
				ORGPARTYPARTYID  = l_rec_list(i).ORGPARTYPARTYID,
				ORGPARTYPARTYTYPE  = l_rec_list(i).ORGPARTYPARTYTYPE,
				ORGPARTYSTATUS  = l_rec_list(i).ORGPARTYSTATUS,
				ORGANIZATIONPROFILEID  = l_rec_list(i).ORGANIZATIONPROFILEID,
				PARTYNUMBER  = l_rec_list(i).PARTYNUMBER,
				STATUS  = l_rec_list(i).STATUS
        where   partyid	= l_rec_list(i).partyid;

	-- inserting new records
    BEGIN
       insert into RTY_CX_B_PARTY_NFID_TBL 
		SELECT *
        from RTY_CX_B_PARTY_NFID_STG_TBL A
        where not exists 
                (select 1 from RTY_CX_B_PARTY_NFID_TBL where PARTYID = a.PARTYID);
   -- COMMIT;            
    EXCEPTION
    WHEN OTHERS THEN
      populate_error(null,p_file_name ,p_table_name,'ERR-07:'||substr(sqlerrm,1,1000));
    END;

	ELSIF p_tbl_name = 'RTY_CX_B_PLEDGES_STG_TBL' THEN
dbms_output.put_line('track1');
	--updating incremental data
    for lookup_rec in cur_upd_pledges LOOP
        update RTY_CX_B_Pledges_tbl
        set    ACCOUNTID_C = lookup_rec.ACCOUNTID_C,
 ACCOUNTTYPE_C	= lookup_rec.ACCOUNTTYPE_C,
  ACCOUNTINGDATE_C	= lookup_rec.ACCOUNTINGDATE_C,
  ALIAS_ID_C	= lookup_rec.ALIAS_ID_C,
  CREATIONDATE	= lookup_rec.CREATIONDATE,
  FUND_C	= lookup_rec.FUND_C,
  LASTUPDATEDATE = lookup_rec.LASTUPDATEDATE,
  PLEDGEAMOUNT_C	= lookup_rec.PLEDGEAMOUNT_C,
  PLEDGECLOSEDATE_C	= lookup_rec.PLEDGECLOSEDATE_C,
  PLEDGENAME_C	= lookup_rec.PLEDGENAME_C,
  PLEDGESTATUS_C	= lookup_rec.PLEDGESTATUS_C,
  RECORDNAME	= lookup_rec.RECORDNAME,
  RECORDNUMBER	= lookup_rec.RECORDNUMBER
        where   ID	= lookup_rec.id;
   --  COMMIT; 
    end loop;

	-- inserting new records
    BEGIN
       insert into RTY_CX_B_Pledges_tbl 
		SELECT *
        from RTY_CX_B_PLEDGES_STG_TBL A
        where not exists 
                (select 1 from RTY_CX_B_Pledges_tbl where id = a.id);
   -- COMMIT;            
    EXCEPTION
    WHEN OTHERS THEN
      populate_error(null,p_file_name ,p_table_name,'ERR-06:'||substr(sqlerrm,1,1000));
    END;	

--lookup table
ELSIF p_tbl_name = 'RTY_CX_TMP_LOOKUP_TBL' THEN
dbms_output.put_line('track1');
	--updating incremental data
    for lookup_rec in cur_upd_lookup LOOP
        update RTY_CX_B_LOOKUP_TBL
        set     CREATIONDATE = lookup_rec.CREATIONDATE,
				ENABLEDFLAG = lookup_rec.ENABLEDFLAG,
				LANGUAGE  = lookup_rec.LANGUAGE,
				LASTUPDATEDATE = lookup_rec.LASTUPDATEDATE,
				LASTUPDATEDBY =  lookup_rec.LASTUPDATEDBY,
				LOOKUPCODE1 = lookup_rec.LOOKUPCODE1,
				LOOKUPTYPE1 = lookup_rec.LOOKUPTYPE1,
				MEANING  = lookup_rec.MEANING,
				STARTDATEACTIVE = lookup_rec.STARTDATEACTIVE,
				TAG = lookup_rec.TAG,
				TERRITORYCODE  = lookup_rec.TERRITORYCODE
        where   lookupcode1	= lookup_rec.lookupcode1;
  --   COMMIT; 
    end loop;

	-- inserting new records
    BEGIN
       insert into RTY_CX_B_LOOKUP_TBL 
		SELECT *
        from RTY_CX_TMP_LOOKUP_TBL A
        where not exists 
                (select 1 from RTY_CX_B_LOOKUP_TBL where lookupcode1	= a.lookupcode1);
  --  COMMIT;            
    EXCEPTION
    WHEN OTHERS THEN
   populate_error(null,p_file_name ,p_table_name,'ERR-05:'||substr(sqlerrm,1,1000));
    END;

--FAM-3572
--Daily rates table
ELSIF p_tbl_name = 'RTY_CX_B_DAILYRATES_STG_TBL' THEN
	--updating incremental data
    for dailyrate_rec in cur_upd_dailyrates LOOP
        update RTY_CX_B_DAILYRATES_TBL
		set     DAILYRATECONVERSIONDATE  	= dailyrate_rec.DAILYRATECONVERSIONDATE, 
				DAILYRATECONVERSIONRATE   	= dailyrate_rec.DAILYRATECONVERSIONRATE,
				DAILYRATECONVERSIONTYPE   	= dailyrate_rec.DAILYRATECONVERSIONTYPE,
				DAILYRATECREATEDBY   		= dailyrate_rec.DAILYRATECREATEDBY,
				DAILYRATECREATIONDATE   	= dailyrate_rec.DAILYRATECREATIONDATE,
				DAILYRATEFROMCURRENCY   	= dailyrate_rec.DAILYRATEFROMCURRENCY,
				DAILYRATELASTUPDATEDATE   	= dailyrate_rec.DAILYRATELASTUPDATEDATE,
				DAILYRATELASTUPDATELOGIN   	= dailyrate_rec.DAILYRATELASTUPDATELOGIN,
				DAILYRATELASTUPDATEDBY   	= dailyrate_rec.DAILYRATELASTUPDATEDBY,
				DAILYRATEOBJECTVERSIONNUMBER   = dailyrate_rec.DAILYRATEOBJECTVERSIONNUMBER,
				DAILYRATESTATUSCODE   			= dailyrate_rec.DAILYRATESTATUSCODE,
				DAILYRATETOCURRENCY  			= dailyrate_rec.DAILYRATETOCURRENCY
        where   DAILYRATECONVERSIONDATE = dailyrate_rec.DAILYRATECONVERSIONDATE
		and DAILYRATETOCURRENCY = dailyrate_rec.DAILYRATETOCURRENCY
		and DAILYRATEFROMCURRENCY = dailyrate_rec.DAILYRATEFROMCURRENCY
		and DAILYRATECONVERSIONTYPE = dailyrate_rec.DAILYRATECONVERSIONTYPE;  ---- FAM-3788

   --  COMMIT; 
    end loop;

	-- inserting new records
    BEGIN
       insert into RTY_CX_B_DAILYRATES_TBL 
		SELECT *
        from RTY_CX_B_DAILYRATES_STG_TBL A
        where not exists 
                (select 1 from RTY_CX_B_DAILYRATES_TBL 
					 where   DAILYRATECONVERSIONDATE = a.DAILYRATECONVERSIONDATE
					and DAILYRATETOCURRENCY = a.DAILYRATETOCURRENCY
					and DAILYRATEFROMCURRENCY = a.DAILYRATEFROMCURRENCY
					and DAILYRATECONVERSIONTYPE = a.DAILYRATECONVERSIONTYPE);  -- FAM-3788
		--COMMIT;            
    EXCEPTION
    WHEN OTHERS THEN
   populate_error(null,p_file_name ,p_table_name,'ERR-05:'||substr(sqlerrm,1,1000));
    END;


	END IF;

EXCEPTION
WHEN OTHERS THEN
populate_error(null,p_file_name ,p_table_name,'ERR-04: '||sqlerrm);
END;


    Procedure bulkdata_prc(p_namespace IN VARCHAR2,
                             p_bucketname IN VARCHAR2,
                             p_file_name IN VARCHAR2)

    AS
    l_tbl_count NUMBER;
    begin

    IF p_bucketname IS NOT NULL AND p_file_name IS NOT NULL THEN

       cleansestgtbl();

        IF p_file_name like '%alias_c%' THEN    

                 p_table_name := 'RTY_CX_B_ALIAS_TBL'; 
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
     --        
        ELSIF p_file_name like '%grants_c%' THEN    
                --

                 p_table_name := 'RTY_CX_B_GRANTS_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);

        --        
        ELSIF p_file_name like '%relationship%' THEN   

                 p_table_name := 'RTY_CX_B_RELATIONSHIP_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);

        --        
        ELSIF p_file_name like '%partyorganization%' THEN    
                --

                 p_table_name := 'RTY_CX_B_ACCOUNTS_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);


         --        
        ELSIF p_file_name like '%tracked_c%' THEN    

                 p_table_name := 'RTY_CX_B_TRACKED_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);

        --  
		-- FAM - 3851 Tracked Donor 
        ELSIF p_file_name like '%trackedgiftdonor_c%' THEN    

                 p_table_name := 'RTY_CX_B_TRACKED_DONOR_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);

        -- 		
        ELSIF p_file_name like '%events_c%' THEN    

                 p_table_name := 'RTY_CX_B_EVENTS_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
        -- populate_error(null,p_file_name ,p_table_name,'Track3:'||substr(sqlerrm,1,1000));
     

          ELSIF p_file_name like '%accountingperiods_c%' THEN    

                 p_table_name := 'RTY_CX_B_ACCTPERIOD_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);

		  ELSIF p_file_name like '%territories%' THEN    

                 p_table_name := 'RTY_CX_B_TERRITORIES';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
          --
		  ELSIF p_file_name like '%commitments%' THEN   		  

                 p_table_name := 'RTY_CX_B_COMMITMENTS_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);

		  ELSIF p_file_name like '%pledges%' THEN    

                 p_table_name := 'RTY_CX_B_PLEDGES_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);	

		  ELSIF p_file_name like '%_organization-%' THEN    

                 p_table_name := 'RTY_CX_B_PARTY_NFID_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);	

		 ELSIF p_file_name like '%lookupvalues%' THEN    

                 p_table_name := 'RTY_CX_B_LOOKUP_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);		  

		--FAM-3572
		ELSIF p_file_name like '%dailyrateextractpvo%' THEN    

                 p_table_name := 'RTY_CX_B_DAILYRATES_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);		

	   END IF;

    END IF;  
      exception
      when others then
     populate_error(null,p_file_name, p_table_name,'Err-03: '||substr(sqlerrm,1,1000));
      end;

  Procedure insertdata_prc(p_namespace IN VARCHAR2,
                             p_bucketname IN VARCHAR2,
                             p_file_name IN VARCHAR2)

    AS
    l_tbl_count NUMBER;
    begin

    IF p_bucketname IS NOT NULL AND p_file_name IS NOT NULL THEN

       cleansestgtbl();

        IF p_file_name like '%alias_c%' THEN    


                --
                BEGIN                
                SELECT COUNT(1) INTO l_tbl_count from RTY_CX_B_ALIAS_TBL;
                IF l_tbl_count = 0 THEN
                 p_table_name := 'RTY_CX_B_ALIAS_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                ELSE
                 p_table_name := 'RTY_CX_B_ALIAS_STG_TBL'; 
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                 update_data(p_table_name,p_file_name);
                END IF;
                EXCEPTION 
                WHEN OTHERS THEN
                NULL;
                END;

        --        
        ELSIF p_file_name like '%grants_c%' THEN    
                --
                BEGIN
                SELECT COUNT(1) INTO l_tbl_count from RTY_CX_B_GRANTS_TBL;
                IF l_tbl_count = 0 THEN
                 p_table_name := 'RTY_CX_B_GRANTS_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                ELSE
                 p_table_name := 'RTY_CX_B_GRANTS_STG_TBL'; 
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                 update_data(p_table_name,p_file_name);
                END IF;
                EXCEPTION 
                WHEN OTHERS THEN
                NULL;
                END;			 

        --        
        ELSIF p_file_name like '%relationship%' THEN   


                 p_table_name := 'RTY_CX_B_RELATIONSHIP_STG_TBL'; 
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                 update_data(p_table_name,p_file_name);

        --        
        ELSIF p_file_name like '%partyorganization%' THEN    
                --
                BEGIN
                SELECT COUNT(1) INTO l_tbl_count from RTY_CX_B_ACCOUNTS_TBL;
                IF l_tbl_count = 0 THEN
                 p_table_name := 'RTY_CX_B_ACCOUNTS_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                ELSE
                 p_table_name := 'RTY_CX_B_ACCOUNTS_STG_TBL'; 
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                 update_data(p_table_name,p_file_name);
                END IF;
                EXCEPTION 
                WHEN OTHERS THEN
                NULL;
                END;					 


         --        
        ELSIF p_file_name like '%tracked_c%' THEN    
                --
                BEGIN
                SELECT COUNT(1) INTO l_tbl_count from RTY_CX_B_TRACKED_TBL;
                IF l_tbl_count = 0 THEN
                 p_table_name := 'RTY_CX_B_TRACKED_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                ELSE
                 p_table_name := 'RTY_CX_B_TRACKED_STG_TBL'; 
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                 update_data(p_table_name,p_file_name);
                END IF;
                EXCEPTION 
                WHEN OTHERS THEN
                NULL;
                END;							 

        -- 

		-- FAM - 3851 Tracked Donor 

		ELSIF p_file_name like '%trackedgiftdonor_c%' THEN    
		--
			BEGIN
			SELECT COUNT(1) INTO l_tbl_count from RTY_CX_B_TRACKED_DONOR_TBL;
			IF l_tbl_count = 0 THEN
			 p_table_name := 'RTY_CX_B_TRACKED_DONOR_TBL';
			 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
			ELSE
			 p_table_name := 'RTY_CX_B_TRACKED_DONOR_STG_TBL'; 
			 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
			 update_data(p_table_name,p_file_name);
			END IF;
			EXCEPTION 
			WHEN OTHERS THEN
			NULL;
			END;	
		--added FC-263
		ELSIF p_file_name like '%events_c%' THEN    
		--
			BEGIN
			SELECT COUNT(1) INTO l_tbl_count from RTY_CX_B_EVENTS_TBL;
			IF l_tbl_count = 0 THEN
			 p_table_name := 'RTY_CX_B_EVENTS_TBL';
			 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
			ELSE
			 p_table_name := 'RTY_CX_B_EVENTS_STG_TBL'; 
			 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
			 update_data(p_table_name,p_file_name);
			END IF;
			EXCEPTION 
			WHEN OTHERS THEN
			NULL;
			END;
		--End FC-263 
		
          ELSIF p_file_name like '%accountingperiods_c%' THEN    
                --
                BEGIN
                SELECT COUNT(1) INTO l_tbl_count from RTY_CX_B_ACCTPERIOD_TBL;
                IF l_tbl_count = 0 THEN
                 p_table_name := 'RTY_CX_B_ACCTPERIOD_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                ELSE
                 p_table_name := 'RTY_CX_B_ACCTPERIOD_STG_TBL'; 
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                 update_data(p_table_name,p_file_name);
                END IF;
                EXCEPTION 
                WHEN OTHERS THEN
                NULL;
                END;						 

  ELSIF p_file_name like '%commitments%' THEN    
                --
                BEGIN
                SELECT COUNT(1) INTO l_tbl_count from RTY_CX_B_COMMITMENTS_TBL;
                IF l_tbl_count = 0 THEN
                 p_table_name := 'RTY_CX_B_COMMITMENTS_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                ELSE
                 p_table_name := 'RTY_CX_B_COMMITMENTS_STG_TBL'; 
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                 update_data(p_table_name,p_file_name);
                END IF;
                EXCEPTION 
                WHEN OTHERS THEN
                NULL;
                END;						

 ELSIF p_file_name like '%pledges%' THEN 

                --
                BEGIN
                SELECT COUNT(1) INTO l_tbl_count from RTY_CX_B_PLEDGES_TBL;
                IF l_tbl_count = 0 THEN
                 p_table_name := 'RTY_CX_B_PLEDGES_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                ELSE
                 p_table_name := 'RTY_CX_B_PLEDGES_STG_TBL'; 
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                 update_data(p_table_name,p_file_name);
                END IF;
                EXCEPTION 
                WHEN OTHERS THEN
                NULL;
                END;

 ELSIF p_file_name like '%lookupvalues%' THEN 

                --
                BEGIN
                SELECT COUNT(1) INTO l_tbl_count from RTY_CX_B_LOOKUP_TBL;
                IF l_tbl_count = 0 THEN
                 p_table_name := 'RTY_CX_B_LOOKUP_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                ELSE
                 p_table_name := 'RTY_CX_TMP_LOOKUP_TBL'; 
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                 update_data(p_table_name,p_file_name);
                END IF;
                EXCEPTION 
                WHEN OTHERS THEN
                NULL;
                END;				

 ELSIF p_file_name like '%_organization-%' THEN 

                --
                BEGIN
                SELECT COUNT(1) INTO l_tbl_count from RTY_CX_B_PARTY_NFID_TBL;
                IF l_tbl_count = 0 THEN
                 p_table_name := 'RTY_CX_B_PARTY_NFID_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                ELSE
                 p_table_name := 'RTY_CX_B_PARTY_NFID_STG_TBL'; 
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                 update_data(p_table_name,p_file_name);
                END IF;
                EXCEPTION 
                WHEN OTHERS THEN
                NULL;
                END;

--FAM-3572				
 ELSIF p_file_name like '%dailyrateextractpvo%' THEN 

                --
                BEGIN
                SELECT COUNT(1) INTO l_tbl_count from RTY_CX_B_DAILYRATES_TBL;
                IF l_tbl_count = 0 THEN
                 p_table_name := 'RTY_CX_B_DAILYRATES_TBL';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                ELSE
                 p_table_name := 'RTY_CX_B_DAILYRATES_STG_TBL'; 
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                 update_data(p_table_name,p_file_name);
                END IF;
                EXCEPTION 
                WHEN OTHERS THEN
                NULL;
                END;

 ELSIF p_file_name like '%territories%' THEN 

                --
                BEGIN
                SELECT COUNT(1) INTO l_tbl_count from RTY_CX_B_TERRITORIES;
                IF l_tbl_count = 0 THEN
                 p_table_name := 'RTY_CX_B_TERRITORIES';
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                ELSE
                 p_table_name := 'RTY_CX_TMP_TERRITORIES'; 
                 copy_data(p_table_name,p_namespace,p_bucketname,p_file_name);
                 update_data(p_table_name,p_file_name);
                END IF;
                EXCEPTION 
                WHEN OTHERS THEN
                NULL;
                END;


        END IF;
    END IF;  
      exception
      when others then
      populate_error(null,p_file_name, p_table_name,'Err-02: '||substr(sqlerrm,1,1000));
      end;


---------------------------------------------------------------------------------------------------------------------------
  /*ASync Call Procedure */
  ---------------------------------------------------------------------------------------------------------------------------
PROCEDURE ics_async_call(p_namespace IN VARCHAR2,
						 p_bucketname IN VARCHAR2,
						 p_file_name IN VARCHAR2,
						 p_flow_id IN number,
						 p_job_name OUT varchar2)
IS
v_plSqlBlock varchar2(500);
v_job_int binary_integer;
l_job_name varchar2(100);
v_file_name varchar2(1000);

    BEGIN    

     v_plSqlBlock  :=
        'BEGIN ' || 'RTY_CX_BICC_ATP_PKG.bulkdata_prc('''||p_namespace||''','''||p_bucketname||''','''||p_file_name||'''); END;';
        dbms_output.put_line('v_plSqlBlock--> '||v_plSqlBlock );
        l_job_name := 'RTYBICCJOB'||to_char(sysdate,'sssss');
          dbms_scheduler.create_job
                        (  
                          job_name      =>  l_job_name,  
                          job_type      =>  'PLSQL_BLOCK',  
                          job_action    =>  v_plSqlBlock,  
                          start_date    =>  systimestamp,--sysdate,  
                          enabled       =>  TRUE,  
                          auto_drop     =>  TRUE,  
                          comments      =>  'ICS1_AR_JOB');

     dbms_scheduler.enable(l_job_name);
 commit;
      p_job_name := l_job_name;
      EXCEPTION
      WHEN OTHERS THEN
         populate_error(null,p_file_name, null,'Err-01: '||substr(sqlerrm,1,1000));
END;	  

END RTY_CX_BICC_ATP_PKG;
/


CREATE OR REPLACE package body RTY_CX_PAYMENTS_IMPORT_PKG
as

/***************************************************************************************************
Procedure:          RTY_CX_PAYMENTS_IMPORT_PKG
Create Date:        2023-09-01
Author:             Rakesh Gurrapu
Description:        Process payment file data to ATP tables followed by 
                    validations and ready to process for payment header and lines
                    Note: If FILE Transaction Type = UPLOAD_TEMPLATES_EVENT_REGI THEN not validating payment lines
                          and not creation payment lines.
---------------------------------------------------------------------------------------------------
Version     Name        Date            Comments
1.0         Rakesh G    01-FEB-2024     Initial Version
1.1         Rakesh G    14-FEB-2024     Updated Program Year Logic FAM-3751
1.1         Rakesh G    16-FEB-2024     Updated Conversion Rate Logic FAM-3754
1.2         Rakesh G    20-FEB-2024     Added SHIPTOOFFICER logic
1.3         Vamsi       01-MAR-2024     Added Header Join while updating Validation error message to Details Table
						06-Mar-2024     Added switch condition for update deposit id for Event based files. 
						07-Mar-2024     Validation logic Added for memorialtributeoccasion_c, Mapped to Attribute3/Made changes in Main OIC Intg.
                        11-Mar-2024     Added Pledge Amount Calulation logic based out of split line and pending balance.
                        18-Mar-2024     FAM - 3788: Integration look specifically for the 'Corporate' rate type when determining the exchange rate from the currency.
										            Depostitid should be Populate for Event based files too.
						15-Mar-2024     FAM-3772 :  Split Pledge amount and update accounting date correctly.
										            Pledge amount should be calculated based on currency conversion rate.
				        21-03-2024      FAM-3772/3812 :  Detail table level column Attribute4 is being used for split_c flag, This indicate Line amount has been
						                            splited into another line.
				        25-Mar-2024     Commented/ Logic for non contribution alias Credit org od and Credit Org type based on Contribution flag. 
						29-Mar-2024     FAM-3851 Tracked Gift logic derived from Child Donor Table and added in code/Added in BICC sync.
                                                 NOT CONSIDERING TRANSACTIONTYPE_C 'REAL_ESTATE','DAF', 'RDG', 'LIA'.	
1.4        Saikumar     08-APR-2024     FAM-3865 Commented the code for Pledge Payment Upload - Spouse Partnership
1.5		   Rakesh G     16-APR-2024     FS-53 multi donor pledge fix
           Vamsi        18-Apr-2024     FS - 53 Vamsi 18-Apr, Derived Donor details based on Non contribution and Contribution.
		   Vamsi        02-Apr-2024     FS- 50 Remitter Details required for INR Currency.
1.6		   Rakesh G     15-May-2024     FS-324 Italain Tax Receipt Fix
                        29-May-2024     FS-324 Remitter id and remitter type is mandatory
1.8        Vamsi        13-Jun-2024     FS-389 The CX Upload Template should only evaluate the Donor when the Limited To checkbox is checked.
1.9        Sriram       26-Jun-2024     FS-263  Event it population. Event Object Created in BICC Level.
1.10       Vamsi        04-July-2024    Monitoring : Concatinating mainrec.paymentid_c to Error Message Column for Procedure:pmt_err 
1.11       Vamsi        22-July-2024     FS- 50/FS-329-Remitter Details required for INR Currency.
1.12       Vamsi        13-Feb-2025     FS- 775 Tax Receipt Required flag is enabled based on Aias - Contibution flag in PY Detai lines.
***************************************************************************************************/

    PROCEDURE upd_pledge_amount (
        p_file_id VARCHAR2,
        p_flow_id VARCHAR2
    ) AS

        l_pledgeamount                 NUMBER := 0;
        l_contrib_amount               NUMBER := 0;
        l_new_pay_amount               NUMBER := 0;
        l_balance_amount               NUMBER := 0;
        l_correct_pay_amount           NUMBER := 0;
        l_pledgeamount_c               NUMBER := 0;
        l_usd_original_amount_on_split NUMBER := 0;
        l_original_amount_on_split     NUMBER := 0;
        CURSOR cur_pledge IS
        SELECT
            *
        FROM
            rty_cx_pmt_dtl_stg_tbl
        WHERE
                status = 'P'
            AND c_pledge_id IS NOT NULL
            AND file_id = p_file_id
            AND flow_id = p_flow_id;

    BEGIN
        enable_logs('entering into update pledge proc');
        FOR pledge_rec IN cur_pledge LOOP
            l_original_amount_on_split := 0;
            l_contrib_amount := 0;
            l_pledgeamount_c := 0;
            l_balance_amount := 0;
            l_new_pay_amount := 0;
            l_contrib_amount := ROUND(pledge_rec.paymentamount_c * pledge_rec.conversionrate,2) ;  -- FAM-3772
            enable_logs('l_contrib_amount--> ' || l_contrib_amount);
            BEGIN
                SELECT
                    pledgeamount_c
                INTO l_pledgeamount_c
                FROM
                    rty_cx_b_pledges_tbl
                WHERE
                    id = pledge_rec.c_pledge_id
				AND     pledgestatus_c = 'OPEN'
                AND    pledgeclosedate_c IS NULL; 

                enable_logs('l_PledgeAmount_c--> ' || l_pledgeamount_c);
                enable_logs('p_pledge_applied_amt--> ' || pledge_rec.pledge_applied_amount);
                IF l_pledgeamount_c IS NOT NULL THEN
                    IF pledge_rec.pledge_applied_amount <> 0 THEN
                        l_balance_amount := l_pledgeamount_c - pledge_rec.pledge_applied_amount;
                    ELSE
                        l_balance_amount := l_pledgeamount_c;
                    END IF;

                    enable_logs('l_balance_amount--> ' || l_balance_amount);
                    IF l_contrib_amount > l_balance_amount THEN
                        l_new_pay_amount := l_contrib_amount - l_balance_amount;
                        l_original_amount_on_split := ROUND(l_new_pay_amount / pledge_rec.conversionrate,2);  -- FAM-3772

						--
						UPDATE rty_cx_pmt_dtl_stg_tbl
						SET C_UPDATE_PLEDGE = 'Y'							
						WHERE
								status = 'P'
							AND file_id = pledge_rec.file_id
							AND flow_id = pledge_rec.flow_id
							AND hdr_id = pledge_rec.hdr_id
							AND line_id = pledge_rec.line_id
							AND c_pledge_id IS NOT NULL;

                    ELSIF l_contrib_amount = l_balance_amount THEN
                        l_original_amount_on_split := 0;

						--
						UPDATE rty_cx_pmt_dtl_stg_tbl
						SET C_UPDATE_PLEDGE = 'Y'							
						WHERE
								status = 'P'
							AND file_id = pledge_rec.file_id
							AND flow_id = pledge_rec.flow_id
							AND hdr_id = pledge_rec.hdr_id
							AND line_id = pledge_rec.line_id
							AND c_pledge_id IS NOT NULL;

                    END IF;

                END IF;

            EXCEPTION
			 WHEN no_data_found THEN --FS-53
						UPDATE rty_cx_pmt_dtl_stg_tbl
						SET C_UPDATE_PLEDGE = NULL,
							c_pledge_id = null						
						WHERE
								status = 'P'
							AND file_id = pledge_rec.file_id
							AND flow_id = pledge_rec.flow_id
							AND hdr_id = pledge_rec.hdr_id
							AND line_id = pledge_rec.line_id
							AND c_pledge_id IS NOT NULL; 

             WHEN OTHERS THEN
                    NULL;
            END;

            enable_logs('l_original_amount_on_split--> ' || l_original_amount_on_split);
            IF l_original_amount_on_split <> 0 THEN

			--update pledge status --FS-53
				UPDATE rty_cx_b_pledges_tbl
				SET  pledgestatus_c = 'PAID',
					pledgeclosedate_c = SYSDATE	
                WHERE
                    id = pledge_rec.c_pledge_id
				AND     pledgestatus_c = 'OPEN'
                AND    pledgeclosedate_c IS NULL; 

			   UPDATE rty_cx_pmt_dtl_stg_tbl
                SET 
        --C_UPDATE_PLEDGE = 'Y',
                    paymentamount_c = ROUND(l_balance_amount /pledge_rec.conversionrate,2)  -- FAM-3772
					--pledge_rec.paymentamount_c - l_original_amount_on_split
				  , associatetopledge_c = 'Y'                       --- FAM-3772 Added By Vamsi, to identify non split line when we have split amount 
				  , attribute4 = 'Y'                                --- FAM-3772 Added By Vamsi, to identify non split line when we have split amount
                WHERE
                        status = 'P'
                    AND file_id = pledge_rec.file_id
                    AND flow_id = pledge_rec.flow_id
                    AND hdr_id = pledge_rec.hdr_id
                    AND line_id = pledge_rec.line_id
                    AND c_pledge_id IS NOT NULL;

                COMMIT;
                BEGIN
                    INSERT INTO rty_cx_pmt_dtl_stg_tbl (
                        file_id,
                        flow_id,
                        hdr_id,
                        line_id,
                        ct_id,
                        status,
                        file_type,
                        recordname,
                        creationdate,
                        commitmentid_c,
                        mmrlhonoreeaddress3_c,
                        mmrlhonoreeaddress1_c,
                        memorialtributedonortype_c,
                        memorialtributedescriptionoverride_c,
                        charitablefoundation_c,
                        transfertype_c,
                        memorialtributefamilyname_c,
                        currencycode,
                        memorialhonoree_c,
                        comments_c,
                        shiptoofficer_c,
                        errorcomment_c,
                        shiptoaddress2_c,
                        pddonoridtype_c,
                        creditorgtype_c,
                        lastupdatedby,
                        presentationdate_c,
                        alias_c,
                        createdby,
                        orazcxowner_c,
                        memorialphf_c,
                        mmrlhonoreecountry_c,
                        shiptostateprovince_c,
                        mmrlhonoreecity_c,
                        mmrlhonoreepostal_c,
                        orazcxowner_id_c,
                        paymentcurrency_c,
                        sequentiallinenumber_c,
                        mmrlhonoreeemail_c,
                        id,
                        processflag_c,
                        recordnumber,
                        shiptophone_c,
                        mmrlhonoreestateprovince_c,
                        trackedgiftid_c,
                        recipientid_c,
                        crystalcertifname_c,
                        creditorganizationid_c,
                        mmrlhonoreeaddress2_c,
                        recipientidtype_c,
                        memorialtributeoccasion_c,
                        shiptoemail_c,
                        memorialtributedonorid_c,
                        nameonletter_c,
                        shiptoaddress1_c,
                        shiptopostal_c,
                        adminfeepercent_c,
                        errorflag_c,
                        shiptoaddress3_c,
                        uploaddateandtime_c,
                        grants_c,
                        adminfeeoverride_c,
                        taxreceiptrequired_c,
                        shiptocountry_c,
                        shiptoname_c,
                        pd_donorid_c,
                        donordistrict_c,
                        memorialtributesuppressfamilyletter_c,
                        paymentamount_c,
                        shiptocity_c,
                        lastupdatedate,
                        c_recipient_name,
                        c_donorname,
                        c_trackedgift,
                        parentrecordnumber,
                        c_grantname,
                        c_party_id,
                        totalpaymentamount,
                        c_alias_id_c,
                        c_program_year,
                        c_donordistrictname,
                        attribute1,
                        attribute2,
                        attribute3,
                        attribute4,
                        attribute5,
                        c_creditorgname,
                        c_creditorgtype,
                        c_creditorganizationid,
                        c_donor_country,
                        c_donor_email,
                        c_donor_address1,
                        import_route_id,
                        conversionrate,
                        batch_id,
                        line_row_id,
                        c_pledge_id,
                        c_commitment_id,
                        c_update_pledge,
                        receiptfrequency_c,
                        associatetopledge_c
                    )
                        SELECT
                            file_id,
                            flow_id,
                            hdr_id,
                            (
                                SELECT
                                    MAX(line_id) + 1
                                FROM
                                    rty_cx_pmt_dtl_stg_tbl
                                WHERE
                                        file_id = pledge_rec.file_id
                                    AND flow_id = pledge_rec.flow_id
                                    AND hdr_id = pledge_rec.hdr_id
                            ), --LINE_ID, 
                            ct_id,
                            status,
                            file_type,
                            recordname,
                            creationdate,
                            commitmentid_c,
                            mmrlhonoreeaddress3_c,
                            mmrlhonoreeaddress1_c,
                            memorialtributedonortype_c,
                            memorialtributedescriptionoverride_c,
                            charitablefoundation_c,
                            transfertype_c,
                            memorialtributefamilyname_c,
                            currencycode,
                            memorialhonoree_c,
                            comments_c,
                            shiptoofficer_c,
                            errorcomment_c,
                            shiptoaddress2_c,
                            pddonoridtype_c,
                            creditorgtype_c,
                            lastupdatedby,
                            presentationdate_c,
                            alias_c,
                            createdby,
                            orazcxowner_c,
                            memorialphf_c,
                            mmrlhonoreecountry_c,
                            shiptostateprovince_c,
                            mmrlhonoreecity_c,
                            mmrlhonoreepostal_c,
                            orazcxowner_id_c,
                            paymentcurrency_c,
                            sequentiallinenumber_c + 1,
                            mmrlhonoreeemail_c,
                            id,
                            processflag_c,
                            ( substr(recordnumber,
                                     1,
                                     instr(recordnumber, '~', - 1))
                              || (
                                SELECT
                                    MAX(line_id) + 1
                                FROM
                                    rty_cx_pmt_dtl_stg_tbl
                                WHERE
                                        file_id = pledge_rec.file_id
                                    AND flow_id = pledge_rec.flow_id
                                    AND hdr_id = pledge_rec.hdr_id
                            ) ),
                            shiptophone_c,
                            mmrlhonoreestateprovince_c,
                            trackedgiftid_c,
                            recipientid_c,
                            crystalcertifname_c,
                            creditorganizationid_c,
                            mmrlhonoreeaddress2_c,
                            recipientidtype_c,
                            memorialtributeoccasion_c,
                            shiptoemail_c,
                            memorialtributedonorid_c,
                            nameonletter_c,
                            shiptoaddress1_c,
                            shiptopostal_c,
                            adminfeepercent_c,
                            errorflag_c,
                            shiptoaddress3_c,
                            uploaddateandtime_c,
                            grants_c,
                            adminfeeoverride_c,
                            taxreceiptrequired_c,
                            shiptocountry_c,
                            shiptoname_c,
                            pd_donorid_c,
                            donordistrict_c,
                            memorialtributesuppressfamilyletter_c,
                            l_original_amount_on_split, --PAYMENTAMOUNT_C, 
                            shiptocity_c,
                            lastupdatedate,
                            c_recipient_name,
                            c_donorname,
                            c_trackedgift,
                            parentrecordnumber,
                            c_grantname,
                            c_party_id,
                            totalpaymentamount,
                            c_alias_id_c,
                            c_program_year,
                            c_donordistrictname,
                            attribute1,
                            attribute2,
                            attribute3,
                            'N',            --attribute4  for Split line split_c should be unchecked , added by Vamsi -- FAM-3772
                            attribute5,
                            c_creditorgname,
                            c_creditorgtype,
                            c_creditorganizationid,
                            c_donor_country,
                            c_donor_email,
                            c_donor_address1,
                            import_route_id,
                            conversionrate,
                            batch_id,
                            line_row_id,
                            NULL,
                            c_commitment_id,
                            'N',
                            receiptfrequency_c,
                            'N'                       --- associatetopledge_c, for Split line it should be unchecked , added by Vamsi -- FAM-3772
                        FROM
                            rty_cx_pmt_dtl_stg_tbl
                        WHERE
                                file_id = pledge_rec.file_id
                            AND flow_id = pledge_rec.flow_id
                            AND hdr_id = pledge_rec.hdr_id
                            AND line_id = pledge_rec.line_id;

                    COMMIT;
                EXCEPTION
                    WHEN OTHERS THEN
                        NULL;
                END;

            END IF;

        END LOOP;

    END;

    PROCEDURE validate_pledge ( p_alias VARCHAR2, p_donor_id VARCHAR2, p_donor_type VARCHAR2, p_accountingdate VARCHAR2, x_pledge_id OUT VARCHAR2 ) AS l_contributionflag_c VARCHAR2(100);
        l_fund_c                            VARCHAR2(100);
        l_pledgestatus_c                    VARCHAR2(100);
        l_pledgeclosedate_c                 VARCHAR2(100);
        l_pledge_id                         VARCHAR2(100);
        l_accountingdate_c                  VARCHAR2(100);
        l_partyid                           VARCHAR2(100);
        l_recognition_id                    VARCHAR2(100);
                BEGIN
                        enable_logs('entering into validate pledge proc');
                        IF
                                p_alias IS NOT NULL
                        THEN
                                BEGIN
                                        SELECT
                                                contributionflag_c,
                                                fund_c
                                        INTO
                                                l_contributionflag_c,
                                                l_fund_c
                                        FROM
                                                rty_cx_b_alias_tbl
                                        WHERE
                                                recordnumber       = p_alias
                                        AND     contributionflag_c = 'Y'
                                        AND     active_c           = 'Y';
                                EXCEPTION WHEN OTHERS THEN NULL;
                                END;
                        END IF;
                        -- If start for- l_contributionflag_c
                        IF
                                l_contributionflag_c = 'Y'
                        THEN
                                --CASE #1
                                enable_logs('l_ContributionFlag_c--> ' || l_contributionflag_c);
                                enable_logs('l_fund_c--> ' || l_fund_c);
                                        BEGIN
                                                enable_logs('first begin--> ');
                                                select
												pledgestatus_c   ,
                                                        pledgeclosedate_c,
                                                        id               ,
                                                        accountingdate_c --FS-53 changes
                                                 INTO
                                                        l_pledgestatus_c   ,
                                                        l_pledgeclosedate_c,
                                                        l_pledge_id        ,
                                                        l_accountingdate_c        
												FROM (		
												SELECT
                                                        pledgestatus_c   ,
                                                        pledgeclosedate_c,
                                                        id               ,
                                                        accountingdate_c
                                                FROM
                                                        rty_cx_b_pledges_tbl
                                                WHERE
                                                        accountid_c   = p_donor_id
                                                AND     accounttype_c = p_donor_type
                                                AND     fund_c        = l_fund_c
												AND     pledgestatus_c = 'OPEN'
                                                AND    pledgeclosedate_c IS NULL
												order by recordname --FS-53 changes
												)where rownum = 1;

                                        EXCEPTION WHEN OTHERS THEN NULL;
                                        END;
                                enable_logs('l_PledgeStatus_c--> ' || l_pledgestatus_c);
                                enable_logs('l_PledgeCloseDate_c--> ' || l_pledgeclosedate_c);
                                enable_logs('l_AccountingDate_c--> ' || l_accountingdate_c);
                                IF
                                        l_pledgestatus_c != 'PAID'
                                        AND l_pledgeclosedate_c IS NULL
                                        AND TO_DATE ( p_accountingdate, 'YYYY-MM-DD' ) >= TO_DATE ( l_accountingdate_c, 'YYYY-MM-DD' )
                                THEN
                                        l_pledge_id := l_pledge_id;
                                        enable_logs('l_pledge_id found track1--> ' || l_pledge_id);
                                ELSE
                                        l_pledge_id := NULL;
                                END IF;
                                --CASE #2
                                IF
                                        l_pledge_id IS NULL
                                THEN
                                        BEGIN
                                                SELECT DISTINCT
                                                        partyid
                                                INTO
                                                        l_partyid
                                                FROM
                                                        rty_cx_b_accounts_tbl
                                                WHERE
                                                        partynumber = p_donor_type || '-' || p_donor_id;
                                        EXCEPTION WHEN OTHERS THEN NULL;
                                        END;
                                enable_logs('in else after--> ' || l_partyid);
                                -- if FOR PartyID is not null
                                IF
                                        l_partyid IS NOT NULL
                                THEN
                                        enable_logs('in else after donortype_id--> ' || p_donor_type || '-' || p_donor_id);
                                                BEGIN
                                                        SELECT DISTINCT
                                                                objectpartypeopartyid
                                                        INTO
                                                                l_recognition_id
                                                        FROM
                                                                rty_cx_b_relationship_tbl
                                                        WHERE
                                                                1                                            = 1
                                                        AND     subjectpartypeopartynumber                   = p_donor_type || '-' || p_donor_id
                                                        AND     upper(relationshiptype)                      = upper('Recognition')
                                                        AND     TO_DATE(relationshipstartdate, 'YYYY-MM-DD') <= sysdate
                                                        AND     TO_DATE(relationshipenddate, 'YYYY-MM-DD')   > sysdate;
                                                EXCEPTION WHEN OTHERS THEN NULL;
                                                END;
                                        enable_logs('USE CASE1 Recognition--> ');
                                        IF
                                                l_recognition_id IS NOT NULL
                                        THEN

                                                BEGIN

														SELECT
                                                                pledgestatus_c   ,
                                                                pledgeclosedate_c,
																id  , 
                                                                accountingdate_c --FS-53 Changes
                                                        INTO
                                                                l_pledgestatus_c   ,
                                                                l_pledgeclosedate_c,
                                                                l_pledge_id        ,
                                                                l_accountingdate_c
														FROM(
														SELECT
                                                                pledgestatus_c   ,
                                                                pledgeclosedate_c,
                                                                id,
                                                                accountingdate_c
                                                        FROM
                                                                rty_cx_b_pledges_tbl
                                                        WHERE
                                                                donorname_id_c = l_recognition_id
                                                        AND     fund_c         = l_fund_c
														AND     pledgestatus_c = 'OPEN'
                                                        AND     pledgeclosedate_c IS NULL
														ORDER BY recordname
                                                       )where rownum = 1; --FS-53 changes


                                                        enable_logs('USE CASE after l_pledge_id-> ' || l_pledge_id);
                                                EXCEPTION WHEN OTHERS THEN NULL;
                                                END;
                                        IF
                                                l_pledgestatus_c != 'PAID'
                                                AND l_pledgeclosedate_c IS NULL
                                                AND TO_DATE ( p_accountingdate, 'YYYY-MM-DD' ) >= TO_DATE ( l_accountingdate_c, 'YYYY-MM-DD' )
                                        THEN
                                                l_pledge_id := l_pledge_id;
                                                enable_logs('l_pledge_id found track3--> ' || l_pledge_id);
                                        ELSE
                                                l_pledge_id := NULL;
                                        END IF;
                                        enable_logs('USE CASE after l_Recognition_id 1-> ' || l_recognition_id);
                                        enable_logs('USE CASE after l_pledge_id 1-> ' || l_pledge_id);
                                        IF
                                                l_pledge_id IS NULL
                                        THEN
                                               --FS-53 Changes
                                                BEGIN
                                                        SELECT
                                                                pledgestatus_c   ,
                                                                pledgeclosedate_c,
                                                               id    , 
                                                                accountingdate_c --FS-53 Changes
                                                        INTO
                                                                l_pledgestatus_c   ,
                                                                l_pledgeclosedate_c,
                                                                l_pledge_id        ,
                                                                l_accountingdate_c
														FROM(
														SELECT
                                                                pledgestatus_c   ,
                                                                pledgeclosedate_c,
                                                                id,
                                                                accountingdate_c                                                        
                                                        FROM
                                                                rty_cx_b_pledges_tbl
                                                        WHERE
                                                                donorname_id_c = l_recognition_id
                                                        AND     fund_c         = 'UN'
														AND     pledgestatus_c = 'OPEN'
                                                        AND    pledgeclosedate_c IS NULL
                                                       ORDER BY recordname
                                                       )where rownum = 1; --FS-53 changes

                                                        enable_logs('USE CASE after l_pledge_id 2-> ' || l_pledge_id);
                                                EXCEPTION WHEN OTHERS THEN NULL;
                                                END;
                                        enable_logs('USE CASE after l_pledge_id 3-> ' || l_pledge_id);
                                        enable_logs('USE CASE after l_PledgeStatus_c 3-> ' || l_pledgestatus_c);
                                        enable_logs('USE CASE after l_PledgeCloseDate_c 3-> ' || l_pledgeclosedate_c);
                                        enable_logs('USE CASE after l_AccountingDate_c 3-> ' || l_accountingdate_c);
                                        enable_logs('USE CASE after p_accountingdate 3-> ' || p_accountingdate);
                                        IF
                                                l_pledgestatus_c != 'PAID'
                                                AND l_pledgeclosedate_c IS NULL
                                                AND TO_DATE ( p_accountingdate, 'YYYY-MM-DD' ) >= TO_DATE ( l_accountingdate_c, 'YYYY-MM-DD' )
                                        THEN
                                                l_pledge_id := l_pledge_id;
                                                enable_logs('USE CASE after l_pledge_id 3-> ' || l_pledge_id);
                                                enable_logs('l_pledge_id found track4--> ' || l_pledge_id);
                                        ELSE
                                                l_pledge_id := NULL;
                                        END IF;
                                        END IF;
                                        END IF;
                                        --- Recognition relationship End
                                        --USE CASE2
                                        --
                                        /*BEGIN
                                        SELECT DISTINCT
                                        objectpartypeopartyid
                                        INTO l_recognition_id
                                        FROM
                                        rty_cx_b_relationship_tbl
                                        WHERE
                                        1 = 1
                                        AND subjectpartypeopartynumber = p_donor_type
                                        || '-'
                                        || p_donor_id
                                        AND reltypestatus = 'A'
                                        AND upper(relationshiptype) = upper('Spouse/Partner')
                                        AND TO_DATE(relationshipstartdate, 'YYYY-MM-DD') <= sysdate
                                        AND TO_DATE(relationshipenddate, 'YYYY-MM-DD') > sysdate;
                                        enable_logs('USE CASE2- Spouse/Partner-> ');
                                        EXCEPTION
                                        WHEN no_data_found THEN */
                                        --USE CASE3
                                        --CASE #3
                                        IF
                                                l_pledge_id IS NULL
                                        THEN
                                                BEGIN
                                                        SELECT DISTINCT
                                                                objectpartypeopartyid
                                                        INTO
                                                                l_recognition_id
                                                        FROM
                                                                rty_cx_b_relationship_tbl
                                                        WHERE
                                                                1                                            = 1
                                                        AND     subjectpartypeopartynumber                   = p_donor_type || '-' || p_donor_id
                                                        AND     reltypestatus                                = 'A'
                                                        AND     upper(relationshiptype)                      = upper('Business Affiliation')
                                                        AND     TO_DATE(relationshipstartdate, 'YYYY-MM-DD') <= sysdate
                                                        AND     TO_DATE(relationshipenddate, 'YYYY-MM-DD')   > sysdate;
                                                        enable_logs('USE CASE3 Business Affiliation--> ');
                                                EXCEPTION WHEN OTHERS THEN NULL;
                                                END;
                                        enable_logs('USE CASE1 Recognition--> ');
                                        IF
                                                l_recognition_id IS NOT NULL
                                        THEN
                                                BEGIN
                                                        SELECT
                                                                pledgestatus_c   ,
                                                                pledgeclosedate_c,
                                                                id               ,
                                                                accountingdate_c
                                                        INTO
                                                                l_pledgestatus_c   ,
                                                                l_pledgeclosedate_c,
                                                                l_pledge_id        ,
                                                                l_accountingdate_c --FS-53 changes
														FROM(
														SELECT
                                                                pledgestatus_c   ,
                                                                pledgeclosedate_c,
                                                                id               ,
                                                                accountingdate_c
                                                        FROM
                                                                rty_cx_b_pledges_tbl
                                                        WHERE
                                                                donorname_id_c = l_recognition_id
                                                        AND     fund_c         = l_fund_c
														AND     pledgestatus_c = 'OPEN'
                                                        AND    pledgeclosedate_c IS NULL
														ORDER BY recordname
                                                       )where rownum = 1; --FS-53 changes


                                                        enable_logs('USE CASE after l_pledge_id-> ' || l_pledge_id);
                                                EXCEPTION WHEN OTHERS THEN NULL;
                                                END;
                                        IF
                                                l_pledgestatus_c != 'PAID'
                                                AND l_pledgeclosedate_c IS NULL
                                                AND TO_DATE ( p_accountingdate, 'YYYY-MM-DD' ) >= TO_DATE ( l_accountingdate_c, 'YYYY-MM-DD' )
                                        THEN
                                                l_pledge_id := l_pledge_id;
                                                enable_logs('l_pledge_id found track3--> ' || l_pledge_id);
                                        ELSE
                                                l_pledge_id := NULL;
                                        END IF;
                                        enable_logs('USE CASE after l_Recognition_id 1-> ' || l_recognition_id);
                                        enable_logs('USE CASE after l_pledge_id 1-> ' || l_pledge_id);
                                        IF
                                                l_pledge_id IS NULL
                                        THEN
                                                BEGIN
                                                        SELECT
                                                                pledgestatus_c   ,
                                                                pledgeclosedate_c,
                                                                id               ,
                                                                accountingdate_c
                                                        INTO
                                                                l_pledgestatus_c   ,
                                                                l_pledgeclosedate_c,
                                                                l_pledge_id        ,
                                                                l_accountingdate_c
														FROM(
														SELECT
                                                                pledgestatus_c   ,
                                                                pledgeclosedate_c,
                                                                id               ,
                                                                accountingdate_c
                                                        FROM
                                                                rty_cx_b_pledges_tbl
                                                        WHERE
                                                                donorname_id_c = l_recognition_id
                                                        AND     fund_c         = 'UN'
														AND     pledgestatus_c = 'OPEN'
                                                        AND    pledgeclosedate_c IS NULL
														ORDER BY recordname
														)WHERE ROWNUM = 1;
                                                        enable_logs('USE CASE after l_pledge_id 2-> ' || l_pledge_id);
                                                EXCEPTION WHEN OTHERS THEN NULL;
                                                END;
                                        enable_logs('USE CASE after l_pledge_id 3-> ' || l_pledge_id);
                                        enable_logs('USE CASE after l_PledgeStatus_c 3-> ' || l_pledgestatus_c);
                                        enable_logs('USE CASE after l_PledgeCloseDate_c 3-> ' || l_pledgeclosedate_c);
                                        enable_logs('USE CASE after l_AccountingDate_c 3-> ' || l_accountingdate_c);
                                        enable_logs('USE CASE after p_accountingdate 3-> ' || p_accountingdate);
                                        IF
                                                l_pledgestatus_c != 'PAID'
                                                AND l_pledgeclosedate_c IS NULL
                                                AND TO_DATE ( p_accountingdate, 'YYYY-MM-DD' ) >= TO_DATE ( l_accountingdate_c, 'YYYY-MM-DD' )
                                        THEN
                                                l_pledge_id := l_pledge_id;
                                                enable_logs('USE CASE after l_pledge_id 3-> ' || l_pledge_id);
                                                enable_logs('l_pledge_id found track4--> ' || l_pledge_id);
                                        ELSE
                                                l_pledge_id := NULL;
                                        END IF;
                                        END IF;
										END IF;
                                        END IF; -- Business Affiliation end
                                        --CASE #4
                                        IF
                                                l_pledge_id IS NULL
                                                and p_donor_type != 14
                                        THEN
                                                BEGIN
                                                        SELECT DISTINCT
                                                                objectpartypeopartyid
                                                        INTO
                                                                l_recognition_id
                                                        FROM
                                                                rty_cx_b_relationship_tbl
                                                        WHERE
                                                                1                                            = 1
                                                        AND     subjectpartypeopartynumber                   = p_donor_type || '-' || p_donor_id
                                                        AND     reltypestatus                                = 'A'
                                                        AND     upper(relationshiptype)                      = upper('Charitable Affiliate')
                                                        AND     TO_DATE(relationshipstartdate, 'YYYY-MM-DD') <= sysdate
                                                        AND     TO_DATE(relationshipenddate, 'YYYY-MM-DD')   > sysdate;
                                                        enable_logs('USE CASE4 Charitable Affiliate--> ');
                                                EXCEPTION WHEN no_data_found THEN NULL;
                                                END;
                                        IF
                                                l_recognition_id IS NOT NULL
                                        THEN
                                                BEGIN
                                                        SELECT
                                                                pledgestatus_c   ,
                                                                pledgeclosedate_c,
                                                                id               ,
                                                                accountingdate_c
                                                        INTO
                                                                l_pledgestatus_c   ,
                                                                l_pledgeclosedate_c,
                                                                l_pledge_id        ,
                                                                l_accountingdate_c
                                                        FROM
                                                                rty_cx_b_pledges_tbl
                                                        WHERE
                                                                donorname_id_c = l_recognition_id
                                                        AND     fund_c         = l_fund_c
														AND     pledgestatus_c = 'OPEN'
                                                        AND    pledgeclosedate_c IS NULL;
                                                        enable_logs('USE CASE after l_pledge_id-> ' || l_pledge_id);
                                                EXCEPTION WHEN OTHERS THEN NULL;
                                                END;
                                        IF
                                                l_pledgestatus_c != 'PAID'
                                                AND l_pledgeclosedate_c IS NULL
                                                AND TO_DATE ( p_accountingdate, 'YYYY-MM-DD' ) >= TO_DATE ( l_accountingdate_c, 'YYYY-MM-DD' )
                                        THEN
                                                l_pledge_id := l_pledge_id;
                                                enable_logs('l_pledge_id found track3--> ' || l_pledge_id);
                                        ELSE
                                                l_pledge_id := NULL;
                                        END IF;
                                        enable_logs('USE CASE after l_Recognition_id 1-> ' || l_recognition_id);
                                        enable_logs('USE CASE after l_pledge_id 1-> ' || l_pledge_id);
                                        IF
                                                l_pledge_id IS NULL
                                        THEN
                                                BEGIN
                                                        SELECT
                                                                pledgestatus_c   ,
                                                                pledgeclosedate_c,
                                                                id               ,
                                                                accountingdate_c
                                                        INTO
                                                                l_pledgestatus_c   ,
                                                                l_pledgeclosedate_c,
                                                                l_pledge_id        ,
                                                                l_accountingdate_c
                                                        FROM
                                                                rty_cx_b_pledges_tbl
                                                        WHERE
                                                                donorname_id_c = l_recognition_id
                                                        AND     fund_c         = 'UN'
														AND     pledgestatus_c = 'OPEN'
                                                        AND    pledgeclosedate_c IS NULL;
                                                        enable_logs('USE CASE after l_pledge_id 2-> ' || l_pledge_id);
                                                EXCEPTION WHEN OTHERS THEN NULL;
                                                END;
                                        enable_logs('USE CASE after l_pledge_id 3-> ' || l_pledge_id);
                                        enable_logs('USE CASE after l_PledgeStatus_c 3-> ' || l_pledgestatus_c);
                                        enable_logs('USE CASE after l_PledgeCloseDate_c 3-> ' || l_pledgeclosedate_c);
                                        enable_logs('USE CASE after l_AccountingDate_c 3-> ' || l_accountingdate_c);
                                        enable_logs('USE CASE after p_accountingdate 3-> ' || p_accountingdate);
                                        IF
                                                l_pledgestatus_c != 'PAID'
                                                AND l_pledgeclosedate_c IS NULL
                                                AND TO_DATE ( p_accountingdate, 'YYYY-MM-DD' ) >= TO_DATE ( l_accountingdate_c, 'YYYY-MM-DD' )
                                        THEN
                                                l_pledge_id := l_pledge_id;
                                                enable_logs('USE CASE after l_pledge_id 3-> ' || l_pledge_id);
                                                enable_logs('l_pledge_id found track4--> ' || l_pledge_id);
                                        ELSE
                                                l_pledge_id := NULL;
                                        END IF;
                                        END IF;
                                        END IF; -- bus aff recog id not null
                                        END IF; -- Pledge null
                                        END IF;
                                        -- END IF FOR: PartyID is not null
                                END IF; -- END IF: CASE #2
                                IF
                                        l_pledge_id IS NULL
                                THEN
                                        enable_logs('second begin--> ');
                                                BEGIN
                                                        SELECT
                                                                pledgestatus_c   ,
                                                                pledgeclosedate_c,
                                                                id               ,
                                                                accountingdate_c
                                                        INTO
                                                                l_pledgestatus_c   ,
                                                                l_pledgeclosedate_c,
                                                                l_pledge_id        ,
                                                                l_accountingdate_c
                                                        FROM
                                                                rty_cx_b_pledges_tbl
                                                        WHERE
                                                                accountid_c   = p_donor_id
                                                        AND     accounttype_c = p_donor_type
                                                        AND     fund_c        = 'UN'
														AND     pledgestatus_c = 'OPEN'
                                                        AND    pledgeclosedate_c IS NULL;
                                                        NULL;
                                                EXCEPTION WHEN OTHERS THEN NULL;
                                                END;
                                        enable_logs('l_PledgeStatus_c--> ' || l_pledgestatus_c);
                                        enable_logs('l_PledgeCloseDate_c--> ' || l_pledgeclosedate_c);
                                        enable_logs('l_AccountingDate_c--> ' || l_accountingdate_c);
                                        enable_logs('p_accountingdate--> ' || p_accountingdate);
                                        IF
                                                l_pledgestatus_c != 'PAID'
                                                AND l_pledgeclosedate_c IS NULL
                                                AND TO_DATE ( p_accountingdate, 'YYYY-MM-DD' ) >= TO_DATE ( l_accountingdate_c, 'YYYY-MM-DD' )
                                        THEN
                                                l_pledge_id := l_pledge_id;
                                                enable_logs('l_pledge_id found track2--> ' || l_pledge_id);
                                                enable_logs('in if--> ');
                                        ELSE
                                                l_pledge_id := NULL;
                                                enable_logs('in else l_pledge_id--> ' || l_pledge_id);
                                        END IF;
                                END IF;
                                END IF; -- End-If for: l_contributionflag_c
                        enable_logs('USE CASE after l_pledge_id 4-> ' || l_pledge_id);
                        x_pledge_id := l_pledge_id;
                EXCEPTION WHEN OTHERS THEN NULL;
                END;
        PROCEDURE enable_logs ( p_msg VARCHAR2 ) AS
                BEGIN
                        IF
                                g_debug_var = 'Y'
                        THEN
                                dbms_output.put_line(p_msg);
                        END IF;
                END;

    PROCEDURE upd_reprocess_ctid (
        p_file_id NUMBER,
        p_flow_id NUMBER,
        p_hdr_id  NUMBER,
        p_line_id NUMBER,
        p_ct_id   VARCHAR2
    ) AS
    BEGIN
        UPDATE rty_cx_pmt_dtl_stg_tbl
        SET
            status = 'S',
            processflag_c = 'Completed',
            ct_id = p_ct_id
        WHERE
                file_id = p_file_id
            AND hdr_id = p_hdr_id
            AND line_id = p_line_id
            AND flow_id = p_flow_id;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;

    PROCEDURE upd_conversion_rate (
        p_flow_id        NUMBER,
        p_file_id        NUMBER,
        p_currency       VARCHAR2,
        p_conversionrate VARCHAR2
    ) AS
    BEGIN
        UPDATE rty_cx_pmt_uploads_stg_tbl
        SET
            currencyrate = p_conversionrate
        WHERE
                flow_id = p_flow_id
            AND file_id = p_file_id
            AND currencycode = p_currency
            AND status = 'P';

        UPDATE rty_cx_pmt_dtl_stg_tbl
        SET
            conversionrate = p_conversionrate
        WHERE
                flow_id = p_flow_id
            AND file_id = p_file_id
            AND currencycode = p_currency
            AND status = 'P';

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;

    PROCEDURE upd_importroute_id (
        p_file_id          NUMBER,
        p_flow_id          NUMBER,
        p_integration_name VARCHAR2,
        p_row              VARCHAR2,
        p_error_msg        VARCHAR2,
        p_import_id        NUMBER
    ) AS
    BEGIN
        IF p_error_msg IS NOT NULL THEN
            UPDATE rty_cx_pmt_uploads_stg_tbl
            SET
                errorcomment_c = p_error_msg,
                status = 'E',
                errorflag_c = 'true',
                processflag_c = 'Error'
            WHERE
                file_id = p_file_id;
--    and flow_id = p_flow_id

            UPDATE rty_cx_pmt_dtl_stg_tbl
            SET
                errorcomment_c = p_error_msg,
                status = 'E',
                errorflag_c = 'true',
                processflag_c = 'Error'
            WHERE
                file_id = p_file_id;
--    and flow_id = p_flow_id

        END IF;

        IF p_integration_name = 'PAYMENT_UPLOADS' THEN
            IF p_row = 'HEADER' THEN
                UPDATE rty_cx_pmt_uploads_stg_tbl
                SET
                    import_route_id = p_import_id
                WHERE
                        1 = 1
                    AND file_id = p_file_id;
       -- and flow_id = p_flow_id;
            END IF;

            IF p_row = 'LINE' THEN
                UPDATE rty_cx_pmt_dtl_stg_tbl
                SET
                    import_route_id = p_import_id
                WHERE
                        1 = 1
                    AND file_id = p_file_id;
        --and flow_id = p_flow_id;
            END IF;

        END IF;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;

    PROCEDURE split_batch (
        p_file_id     NUMBER,
        p_flow_id     NUMBER,
        p_batch_limit NUMBER
    ) AS

        CURSOR c1 IS
        SELECT
            ROWID,
            x.batch_id
        FROM
            rty_cx_pmt_dtl_stg_tbl x
        WHERE
                file_id = p_file_id
            AND flow_id = p_flow_id;

        l_batch_id      NUMBER := 0;
        l_batch_limit   NUMBER := 0;
        TYPE batch_rec_tab IS
            TABLE OF c1%rowtype;
        l_batch_rec_tab batch_rec_tab;
    BEGIN
        l_batch_limit := p_batch_limit;
        OPEN c1;
        LOOP
            FETCH c1
            BULK COLLECT INTO l_batch_rec_tab LIMIT l_batch_limit;
            l_batch_id := l_batch_id + 1;
            EXIT WHEN l_batch_rec_tab.count = 0;
            FORALL i IN 1..l_batch_rec_tab.count
                UPDATE rty_cx_pmt_dtl_stg_tbl
                SET
                    batch_id = l_batch_id
                WHERE
                    ROWID = l_batch_rec_tab(i).rowid;

            COMMIT;
        END LOOP;

        CLOSE c1;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;

    PROCEDURE upd_payment_errors (
        p_file_id    NUMBER,
        p_flow_id    NUMBER,
        p_batch_id   NUMBER,
        p_level      VARCHAR2,
        p_header_rec header_rec_tbl,
        p_line_rec   line_rec_tbl,
        p_pledge_rec pledge_id_tbl
    ) AS
        CURSOR err_cur IS
        SELECT
            *
        FROM
            rty_cx_pmt_uploads_import_err_tbl
        WHERE
                1 = 1
            AND file_id = p_file_id
            AND payment_level = p_level;

		--FS-53 changes
		l_pledge_id NUMBER;

    BEGIN
        IF p_level = 'HEADER' THEN
            FOR hdr_err_rec IN err_cur LOOP
                enable_logs('Enteing into loop--> ' || hdr_err_rec.record_number);
                enable_logs('Enteing into loop jobid --> ' || hdr_err_rec.import_job_id);
                UPDATE rty_cx_pmt_uploads_stg_tbl
                SET
                    errorcomment_c = hdr_err_rec.error_message,
                    status = 'E',
                    errorflag_c = 'true',
                    processflag_c = 'Error'
                WHERE
                        file_id = p_file_id
                    AND flow_id = p_flow_id
                    AND recordnumber = hdr_err_rec.record_number
                    AND import_route_id = hdr_err_rec.import_job_id
                    AND status = 'P';

                COMMIT;
            END LOOP;

    --Update Detail table if any corresponding errors in header
            UPDATE rty_cx_pmt_dtl_stg_tbl
            SET
                errorcomment_c = 'another error associated for given payment',
                status = 'E',
                errorflag_c = 'true',
                processflag_c = 'Error'
            WHERE
                    file_id = p_file_id
                AND flow_id = p_flow_id
                AND batch_id = nvl(p_batch_id, batch_id)
                AND status = 'P'
                AND hdr_id IN (
                    SELECT
                        hdr_id
                    FROM
                        rty_cx_pmt_uploads_stg_tbl
                    WHERE
                        import_route_id IS NOT NULL
                        AND file_id = p_file_id
                        AND flow_id = p_flow_id
                        AND status = 'E'
                );

        END IF; 

    --Update errors at Line Level
        IF p_level = 'LINE' THEN
            FOR line_err_rec IN err_cur LOOP
			l_pledge_id := NULL;
                UPDATE rty_cx_pmt_dtl_stg_tbl
                SET
                    errorcomment_c = line_err_rec.error_message,
                    status = 'E',
                    errorflag_c = 'true',
                    processflag_c = 'Error'
                WHERE
                        file_id = p_file_id
                    AND flow_id = p_flow_id
                    AND batch_id = nvl(p_batch_id, batch_id)
                    AND recordnumber = line_err_rec.record_number
                    AND import_route_id = line_err_rec.import_job_id
                    AND status = 'P';

				--FS-53 changes start
				BEGIN
				select c_pledge_id
				into l_pledge_id
				from rty_cx_pmt_dtl_stg_tbl
				WHERE
                        file_id = p_file_id
                    AND flow_id = p_flow_id
                    AND batch_id = nvl(p_batch_id, batch_id)
                    AND recordnumber = line_err_rec.record_number
                    AND import_route_id = line_err_rec.import_job_id
                    AND status = 'P';

				IF l_pledge_id IS NOT NULL THEN

					UPDATE rty_cx_b_pledges_tbl
					SET  pledgestatus_c = 'OPEN',
						pledgeclosedate_c = NULL	
					WHERE
						id = l_pledge_id
					AND     pledgestatus_c = 'PAID';

				END IF;

				exception
				when others then
					NULL;
				END;
				--FS-53 changes end
				   COMMIT;
            END LOOP;

        END IF;

        IF p_pledge_rec.count > 0 THEN
            FORALL i IN p_pledge_rec.first..p_pledge_rec.last
                UPDATE rty_cx_pmt_dtl_stg_tbl
                SET
                    pledge_applied_amount = p_pledge_rec(i).pledge_amount
                WHERE
                        file_id = p_file_id
                    AND c_pledge_id = p_pledge_rec(i).pledge_id
                    AND status = 'P'
                    AND flow_id = p_flow_id
                    AND c_pledge_id IS NOT NULL;

            COMMIT;
            upd_pledge_amount(p_file_id, p_flow_id);
        END IF;

      --Update Header table Success with PY_ID if no corresponding errors in header
        IF p_header_rec.count > 0 THEN
            FORALL i IN p_header_rec.first..p_header_rec.last
                UPDATE rty_cx_pmt_uploads_stg_tbl
                SET
                    status = 'S',
                    processflag_c = 'Completed',
                    py_id = p_header_rec(i).py_id,
                    id = p_header_rec(i).id
                WHERE
                        file_id = p_file_id
                    AND recordnumber = p_header_rec(i).recordnumber
                    AND flow_id = p_flow_id;

        END IF;

              --Update Lines table Success with CT_ID if no corresponding errors in header
        IF p_line_rec.count > 0 THEN
            FORALL i IN p_line_rec.first..p_line_rec.last
                UPDATE rty_cx_pmt_dtl_stg_tbl
                SET
                    status = 'S',
                    processflag_c = 'Completed',
                    ct_id = p_line_rec(i).ct_id,
                    id = p_line_rec(i).id
                WHERE
                        file_id = p_file_id
                    AND batch_id = p_batch_id
                    AND recordnumber = p_line_rec(i).recordnumber
                    AND flow_id = p_flow_id;

        END IF;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;

    PROCEDURE get_err_status (
        p_file_id    NUMBER,
        p_flow_id    NUMBER,
        p_err_status OUT VARCHAR2
    ) AS

        l_hdr_err_count  NUMBER := 0;
        l_line_err_count NUMBER := 0;
        l_err_status     VARCHAR2(10) := 'N';
    BEGIN
        enable_logs('in get err count proc');
        BEGIN
            SELECT
                COUNT(1)
            INTO l_hdr_err_count
            FROM
                rty_cx_pmt_uploads_stg_tbl
            WHERE
                status IN ( 'E', 'P' )
                AND file_id = p_file_id
                AND flow_id = p_flow_id;

        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;

        enable_logs('in get err count proc l_hdr_err_count --> ' || l_hdr_err_count);
        BEGIN
            SELECT
                COUNT(1)
            INTO l_line_err_count
            FROM
                rty_cx_pmt_dtl_stg_tbl
            WHERE
                status IN ( 'E', 'P' )
                AND file_id = p_file_id
                AND flow_id = p_flow_id;

        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;

        enable_logs('in get err count proc l_line_err_count --> ' || l_line_err_count);
        IF l_hdr_err_count <> 0 OR l_line_err_count <> 0 THEN
            UPDATE rty_cx_pmt_dtl_stg_tbl
            SET
                processflag_c = 'Error',
                errorflag_c = 'true',
                status = 'E',
                errorcomment_c = 'another error associated for given payment'
            WHERE
                    1 = 1
                AND file_id = p_file_id
                AND flow_id = p_flow_id
                AND hdr_id IN (
                    SELECT DISTINCT
                        hdr_id
                    FROM
                        rty_cx_pmt_dtl_stg_tbl
                    WHERE
                            file_id = p_file_id
                        AND status = 'E'
                )
                AND status IN ( 'S', 'P' );

            COMMIT;

     --update header table if any erors in lines table
            UPDATE rty_cx_pmt_uploads_stg_tbl
            SET
                errorcomment_c = 'another error associated for given payment',
                status = 'E',
                py_id = NULL,
                errorflag_c = 'true',
                processflag_c = 'Error'
            WHERE
                    file_id = p_file_id
                AND flow_id = p_flow_id
                AND status IN ( 'S', 'P' )
                AND hdr_id IN (
                    SELECT DISTINCT
                        hdr_id
                    FROM
                        rty_cx_pmt_dtl_stg_tbl
                    WHERE
                            file_id = p_file_id
                        AND status = 'E'
                );

            COMMIT;
            l_err_status := 'E';
            UPDATE rty_cx_pmt_file_entry_tbl
            SET
                file_status = 'ERROR'
            WHERE
                    file_id = p_file_id
                AND flow_id = p_flow_id;

        ELSE
            UPDATE rty_cx_pmt_file_entry_tbl
            SET
                file_status = 'COMPLETED'
            WHERE
                    file_id = p_file_id
                AND flow_id = p_flow_id;

        END IF;

        p_err_status := l_err_status;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;

    PROCEDURE upd_pmt_err (
        p_file_id NUMBER,
        p_flow_id NUMBER,
        p_status  VARCHAR2,
        p_hdr_id  NUMBER,
        p_line_id NUMBER,
        p_err_msg VARCHAR2
    ) AS

        CURSOR c1 IS
        SELECT
            hdr_id
        FROM
            rty_cx_pmt_uploads_stg_tbl
        WHERE
                file_id = p_file_id
            AND flow_id = p_flow_id
            AND upper(errorcomment_c) LIKE upper('%Total Match%');

        PRAGMA autonomous_transaction;
    BEGIN
        IF p_status = 'U' THEN
            FOR i IN c1 LOOP
                UPDATE rty_cx_pmt_dtl_stg_tbl
                SET
                    processflag_c = 'Error',
                    errorflag_c = 'true',
                    errorcomment_c = 'associated to another error line on same payment',
                    status = 'E'
                WHERE
                        file_id = p_file_id
                    AND flow_id = p_flow_id
                    AND hdr_id = i.hdr_id;

                UPDATE rty_cx_pmt_file_entry_tbl
                SET
                    file_status = 'ERROR'
                WHERE
                        file_id = p_file_id
                    AND flow_id = p_flow_id;

            END LOOP;

            COMMIT;
        END IF;

        IF p_status = 'E' THEN
            UPDATE rty_cx_pmt_uploads_stg_tbl
            SET
                processflag_c = 'Error',
                errorflag_c = 'true',
                errorcomment_c = p_err_msg,
                status = 'X'
            WHERE
                    hdr_id = p_hdr_id
                AND file_id = p_file_id
                AND flow_id = p_flow_id
                AND processflag_c = 'Ready';

            COMMIT;
            UPDATE rty_cx_pmt_dtl_stg_tbl
            SET
                processflag_c = 'Error',
                errorflag_c = 'true',
                errorcomment_c = p_err_msg,
                status = 'X'
            WHERE
                    hdr_id = p_hdr_id
                AND file_id = p_file_id
                AND flow_id = p_flow_id
                AND processflag_c = 'Ready';

            COMMIT;
            pmt_err(p_file_id, p_flow_id, p_hdr_id, p_line_id, 'E',
                   p_err_msg);
        ELSIF p_status = 'S' THEN
            UPDATE rty_cx_pmt_uploads_stg_tbl
            SET
                processflag_c = 'Completed',
                errorflag_c = 'false',
                errorcomment_c = '',
                status = 'S'
            WHERE
                    hdr_id = p_hdr_id
                AND file_id = p_file_id
                AND flow_id = p_flow_id
                AND processflag_c = 'Ready';

            COMMIT;
            UPDATE rty_cx_pmt_dtl_stg_tbl
            SET
                processflag_c = 'Completed',
                errorflag_c = 'false',
                errorcomment_c = '',
                status = 'S'
            WHERE
                    hdr_id = p_hdr_id
                AND file_id = p_file_id
                AND flow_id = p_flow_id
                AND processflag_c = 'Ready';

            UPDATE rty_cx_pmt_file_entry_tbl
            SET
                file_status = 'SUCCESS'
            WHERE
                    file_id = p_file_id
                AND flow_id = p_flow_id;

            COMMIT;
        END IF;

    END;

    PROCEDURE pmt_err (
        p_file_id  NUMBER,
        p_flow_id  NUMBER,
        p_hdr_id   NUMBER,
        p_line_id  VARCHAR2,
        p_err_code VARCHAR2,
        p_err_msg  VARCHAR2
    ) AS
        PRAGMA autonomous_transaction;
    BEGIN
        INSERT INTO rty_cx_pmt_err_tbl (
            file_id,
            flow_id,
            hdr_id,
            line_id,
            err_code,
            err_msg,
            creation_date
        ) VALUES (
            p_file_id,
            p_flow_id,
            p_hdr_id,
            p_line_id,
            p_err_code,
            p_err_msg,
            trunc(sysdate)
        );

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            enable_logs('pmet err insert--> ' || sqlerrm);
    END;

    PROCEDURE validate_pmt_detail_data (
        p_file_id NUMBER,
        p_flow_id NUMBER,
        p_status  OUT VARCHAR2,
        p_err_msg OUT VARCHAR2
    ) AS

--variable declaration
        l_paymentdetailerrorflag VARCHAR2(10);
        l_Payment_Id  VARCHAR2(1000); 
        l_PaymentRecordName  VARCHAR2(1000);
        l_detail_err_msg  VARCHAR2(1000);
        l_programyear            VARCHAR2(20);
        l_aliasid                 VARCHAR2(200);
        l_donordistrict          VARCHAR2(1000);
        l_donorid                 VARCHAR2(200);
        l_donoridtype            VARCHAR2(100);
        l_partyid_1              VARCHAR2(100);
            --
        l_creditorgid            VARCHAR2(100);
        l_creditorgname          VARCHAR2(1000);
        l_creditorgtype          VARCHAR2(100);
        l_creditorganizationid    VARCHAR2(200);
        l_alias_id_c              VARCHAR2(20);
		l_limitedtodonors_c       VARCHAR2(100); 
		l_tg_alias_id            VARCHAR2(100);
        l_subjectpartynumber     VARCHAR2(100);
        l_subjectpartyname       VARCHAR2(100);
        l_feepercentage_c        VARCHAR2(1000);
        l_pycalculation_c        VARCHAR2(1000);
        l_feepct                 VARCHAR2(100);
        l_donordistrictname      VARCHAR2(1000);
        l_partyid                 VARCHAR2(200);
        l_organizationname       VARCHAR2(1000);
        l_partynumber            VARCHAR2(100);
        l_partyuniquename        VARCHAR2(1000);
        l_TrackedGift VARCHAR2(1000);
		l_tg_donorid             VARCHAR2(1000);  -- FS -389

        l_Grants_Id_c VARCHAR2(1000); 
        l_Grant_name VARCHAR2(1000);
        l_RecipientID VARCHAR2(1000);
        l_RecipientName VARCHAR2(1000);
        l_err_code VARCHAR2(1000);
        l_detall_validation_flag VARCHAR2(10);
        l_global_detall_validation_flag VARCHAR2(10);
        l_NonContributionRelated_c VARCHAR2(100);
		l_contributionflag_c1      VARCHAR2(100);--Vamsi 18-Apr
        l_TrackedGiftID VARCHAR2(100);
		l_Tg_ID         VARCHAR2(100);
		l_tg_alias_id_c           VARCHAR(2000);
        l_DonorName  VARCHAR2(1000);
        l_address1 VARCHAR2(1000);
        l_emailaddress VARCHAR2(1000);
        l_country VARCHAR2(1000);
		l_programmonth NUMBER;
        l_transfertype_c VARCHAR2(1000); 
		l_alias_TrackedGift_ID VARCHAR2(1000); 
		l_alias_Default_TG  VARCHAR2(1000); 
		l_tracked_data    VARCHAR2(1000);
        l_pledge_id VARCHAR2(100);
        l_original_amount_on_split VARCHAR2(1000);
        l_update_pledge VARCHAR2(1000);
        l_paymentamount_c  VARCHAR2(1000);
        l_commitment_id  VARCHAR2(1000);
		l_conversionrate VARCHAR2(1000);
		--V1.2 change SHIPTOOFFICER_C
		l_relType VARCHAR2(1000);
		l_Addr1 VARCHAR2(1000);
		l_clubnumber VARCHAR2(1000);
		l_addr_partynumber VARCHAR2(1000);
		l_subject_num VARCHAR2(1000);
		l_officerID  VARCHAR2(100);
		l_reltype_object_id VARCHAR2(1000);

       --to get payment updated data 
        CURSOR paymentupload_cur IS
        SELECT
            x.*
           -- NULL paymentsrecordid_c
        FROM
            rty_cx_pmt_uploads_stg_tbl x
        WHERE
                file_id = p_file_id
            AND flow_id = p_flow_id
            AND  transactiontype_c != 'UPLOAD_TEMPLATES_EVENT_REGI'
            AND status IN ('P'); --paymentcreateed  
             --and hdr_id IN (1,9,6,8)


        CURSOR paymentuploaddtl_cur (
            p_hdr_id NUMBER
        ) IS
        SELECT
            *
        FROM
            rty_cx_pmt_dtl_stg_tbl
        WHERE
                file_id = p_file_id
            AND flow_id = p_flow_id
            AND hdr_id = p_hdr_id
            AND status IN ('P');

    BEGIN
     enable_logs('Detail proc main Track1');
     enable_logs('Detail proc main Track1--> '||p_file_id||'-'||p_flow_id);
        FOR eachstagepaygroupdetail IN paymentupload_cur LOOP
        enable_logs('Detail proc main Track1 eachstagepaygroupdetail--> '||eachstagepaygroupdetail.hdr_id);
        l_global_detall_validation_flag := 'N';

           FOR pmtdtlrec IN paymentuploaddtl_cur(eachstagepaygroupdetail.hdr_id) LOOP
           l_programmonth := to_Char(to_date(eachstagepaygroupdetail.accountingdate_c,'YYYY-MM-DD'),'MM'); --FAM-3751
			l_programyear := to_Char(to_date(eachstagepaygroupdetail.accountingdate_c,'YYYY-MM-DD'),'YYYY'); --FAM-3751
             enable_logs('Detail proc inside for loop');
            l_detall_validation_flag := 'N';
                l_donordistrict := pmtdtlrec.donordistrict_c;
                l_donorid := pmtdtlrec.pd_donorid_c;
                l_donoridtype := pmtdtlrec.pddonoridtype_c;
                l_paymentamount_c := pmtdtlrec.paymentamount_c;
                l_detail_err_msg := null;
            --
                l_creditorgid := null;
                l_creditorgname := null;
                l_creditorgtype := null;
                l_alias_id_c := null;
			    l_limitedtodonors_c   :=null; 
		        l_tg_alias_id   := null;
                l_feepercentage_c := null;
                l_pycalculation_c := null;
                l_NonContributionRelated_c := null;
				l_contributionflag_c1 := null;--Vamsi 18-Apr
                l_TrackedGiftID := null;
				l_Tg_ID :=null;
				l_tg_alias_id_c      := null;
		        l_tg_donorid         := null;  
                l_feepct := null;
                l_DonorDistrictName := null;
                l_creditorganizationid := null;
                l_RecipientID := null;
                l_RecipientName := null;
                l_Grants_Id_c := null;
				l_partyid_1 := null;
				l_Grant_name := null;
				l_TrackedGiftID := null;
				l_TrackedGift := null;
				l_alias_TrackedGift_ID := null;
				l_alias_Default_TG  :=null;
				l_tracked_data  :=null;
                l_pledge_id := null;
                l_commitment_id := null;
				l_conversionrate := NULL;
				--V1.2 changes
				l_relType			 := NULL;
				l_Addr1 			 := NULL;
				l_clubnumber 		 := NULL;
				l_addr_partynumber 		 := NULL;
				l_subject_num 	     := NULL;
				l_officerID  		 := NULL;
				l_reltype_object_id  := NULL;
				--
				l_PartyId := NULL;
				l_SubjectPartyNumber := NULL;
				l_SubjectPartyName := NULL;
				l_address1 := NULL;
				l_emailaddress := NULL;
				l_country := NULL;
				l_DonorDistrictName := NULL;
				l_organizationname  := NULL;
				l_RecipientID  := NULL;
				l_RecipientName  := NULL;
				l_transferType_c := NULL;
				l_TrackedGiftID  := NULL;
				l_TrackedGift := NULL;
				l_Grants_Id_c := NULL;

		enable_logs('Detail proc Track1');
		enable_logs('Detail proc Track1 l_detall_validation_flag--> '||l_detall_validation_flag);
		enable_logs('Detail proc Track1 l_detail_err_msg--> '||l_detail_err_msg);
		enable_logs('Detail proc Track1 pmtdtlrec.hdr_id--> '||pmtdtlrec.hdr_id);   
		enable_logs('Detail proc Track1 pmtdtlrec.line_id--> '||pmtdtlrec.line_id);   
        enable_logs('Detail proc Track1 pmtdtlrec.CommitmentID_c--> '||pmtdtlrec.CommitmentID_c);    

			--FAM-3754
			  --conversionrate validation and updating rate to line table --FAM-3754
                    IF   pmtdtlrec.PaymentCurrency_c <> 'USD'  AND pmtdtlrec.attribute1 IS NOT NULL THEN  
                        BEGIN
                            SELECT
                                to_char (DAILYRATECONVERSIONRATE,'FM9999999999990D999999999999999999999','NLS_NUMERIC_CHARACTERS = ."')
                            INTO l_conversionrate
                            FROM
                                rty_cx_b_dailyrates_tbl
                            WHERE
                                DAILYRATECONVERSIONDATE = pmtdtlrec.attribute1 --exchangeratedate
							AND DAILYRATEFROMCURRENCY = pmtdtlrec.currencycode
                            AND UPPER(DAILYRATECONVERSIONTYPE) = UPPER('Corporate')    -- FAM-3788
							and DAILYRATETOCURRENCY = 'USD';

                              enable_logs('Track14');
                            IF l_conversionrate IS NULL THEN
                            enable_logs('Track15');
								 l_detall_validation_flag := 'E';
								l_detail_err_msg := l_detail_err_msg||'ConversionRate not exist for given exchange date in ATP/CX';
								l_err_code := 'Err-PD-101';
								pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'ConversionRate not exist for given exchange date in ATP/CX :'||sqlerrm);               
                            ELSE

								UPDATE RTY_CX_PMT_DTL_STG_TBL
								SET (conversionrate) = (l_conversionrate)
								WHERE file_id = p_file_id
								AND flow_id = p_flow_id
								AND currencycode = pmtdtlrec.currencycode
								AND attribute1 = pmtdtlrec.attribute1								
								AND hdr_id = pmtdtlrec.hdr_id
								AND line_id = pmtdtlrec.line_id;

								COMMIT;

							END IF;

                        EXCEPTION
                            WHEN OTHERS THEN
                            l_err_code := 'Err-PD-103';
							pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'Error while validating DailyRate :'||sqlerrm);
						END;
                    END IF;



             --get alias info
                IF pmtdtlrec.alias_c IS NOT NULL THEN
                	IF pmtdtlrec.alias_c = 'APF-SHARE' and pmtdtlrec.CreditOrgType_c = '9' THEN
					 SELECT DISTINCT
                        id,
                        feepercentage_c,
                        pycalculation_c,
                        NonContributionRelated_c,  -- FAM-3851
						contributionflag_c --Vamsi 18-Apr
                        --TrackedGift_id_c                       
                    INTO
                        l_alias_id_c,
                        l_feepercentage_c,
                        l_pycalculation_c,
                        l_NonContributionRelated_c,
						l_contributionflag_c1 --Vamsi 18-Apr
                        --l_alias_TrackedGift_ID 
                    FROM
                        rty_cx_b_alias_tbl
                    WHERE
                        recordname = 'WORLD FUND'
                        and active_c = 'Y'
						AND rownum = 1;

				ELSE
				BEGIN
                    SELECT DISTINCT
                        id,
                        feepercentage_c,
                        pycalculation_c,
                        NonContributionRelated_c,
						contributionflag_c
                       -- TrackedGift_id_c           				-- FAM-3851                
                    INTO
                        l_alias_id_c,
                        l_feepercentage_c,
                        l_pycalculation_c,
                        l_NonContributionRelated_c,
						l_contributionflag_c1--
                        --l_alias_TrackedGift_ID 
                    FROM
                        rty_cx_b_alias_tbl
                    WHERE
                        recordname = TRIM(pmtdtlrec.alias_c)
                        and active_c = 'Y'
                       --  and contributionflag_c = 'Y'
						AND rownum = 1;


				IF l_alias_id_c IS NOT NULL AND pmtdtlrec.adminfeeoverride_c = 'TRUE'
                THEN
                    l_feepct := pmtdtlrec.adminfeepercent_c ;
                ELSE
                    l_feepct := l_feepercentage_c ;
                END IF;

                EXCEPTION
                    WHEN OTHERS THEN
                    enable_logs('Track40.1');
                    l_detall_validation_flag := 'E';
                    l_detail_err_msg := l_detail_err_msg||'Alias_c value does not exist';
                    l_err_code := 'Err-PD-01';
					pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'Alias_c value does not exist :'||sqlerrm);
                END;
				END IF;

				END IF;


				-- FAM-3851 for Deriving Default Alias Tracked Gift ID
				IF l_alias_id_c IS NOT NULL AND eachstagepaygroupdetail.transactiontype_c NOT IN ('REAL_ESTATE','DAF', 'RDG', 'LIA') THEN  


				BEGIN 

					SELECT a.TRACKEDGIFT_ID_C, t.recordname
					INTO l_alias_TrackedGift_ID, l_alias_Default_TG
					FROM
					rty_cx_b_alias_tbl a, rty_cx_b_tracked_tbl t
					WHERE  1=1
					--AND a.ID         = t.ALIAS_ID_C     -- Commented by Vamsi as driving is TG
					AND a.TRACKEDGIFT_ID_C = t.id
					AND a.recordname = TRIM(pmtdtlrec.alias_c)
					AND t.STATUSID_C IN ('ACTIVE','PENDING')      -- Vamsi: Verify-CRC 
					and a.active_c   = 'Y'
					AND rownum       = 1;
				EXCEPTION	
				WHEN OTHERS THEN
				NULL;
				END;

				END IF;


 enable_logs('Detail proc Track4');
                IF
                  ( eachstagepaygroupdetail.accountingdate_c IS NOT NULL AND (l_programmonth > 6 and l_programmonth <=12))
                THEN
                    IF l_pycalculation_c IS NOT NULL THEN
                        l_programyear := l_programyear + 1 + l_pycalculation_c;
                    ELSE
                        l_programyear := l_programyear + 1;
                    END IF;
                ELSE
                    IF l_pycalculation_c IS NOT NULL THEN
                        l_programyear := l_programyear + l_pycalculation_c;
                    else
					 l_programyear := l_programyear ;

					END IF;
                END IF;
    enable_logs('Detail proc Track5');

	--Vamsi 18-Apr 
	 IF pmtdtlrec.PDDonorIDType_c IS NULL AND pmtdtlrec.PD_DonorID_c IS NULL 
	 AND l_NonContributionRelated_c  = 'Y' AND l_contributionflag_c1 ='Y' THEN

		l_detall_validation_flag := 'E';
		l_detail_err_msg := l_detail_err_msg||'Donor ID/Type value is blank';
		l_err_code := 'Err-PD-02';
		pmt_err(p_file_id ,p_flow_id ,pmtdtlrec.hdr_id,pmtdtlrec.line_id,l_err_code,'Donor value does not exist :'||sqlerrm);

	ELSIF  pmtdtlrec.PDDonorIDType_c IS  NULL AND pmtdtlrec.PD_DonorID_c IS  NULL 
	AND l_NonContributionRelated_c  = 'N' AND l_contributionflag_c1 ='N'
	THEN 
	  NULL;			
    END IF;
	-- End : Vamsi 18-Apr 

     --get donor info
	IF pmtdtlrec.PDDonorIDType_c IS NOT NULL AND pmtdtlrec.PD_DonorID_c IS NOT NULL 
	--AND l_NonContributionRelated_c  = 'Y' --Vamsi 18-Apr 
	 THEN
		   BEGIN
			SELECT DISTINCT PartyName,PartyId,PartyNumber,OrganizationName,address1,emailaddress,country
			INTO l_DonorName,l_PartyId,l_PartyNumber,l_OrganizationName,l_address1,l_emailaddress,l_country
			FROM rty_cx_b_accounts_tbl
			WHERE PartyNumber= pmtdtlrec.PDDonorIDType_c||'-'||pmtdtlrec.PD_DonorID_c
			AND ROWNUM = 1;

			l_partyid_1 := l_partyid;

			EXCEPTION
			WHEN OTHERS THEN
			 NULL;
			enable_logs('Track40.2');
			l_detall_validation_flag := 'E';
			 l_detail_err_msg := l_detail_err_msg||'-Donor value does not exist-';
			 l_err_code := 'Err-PD-02';
			pmt_err(p_file_id ,p_flow_id ,pmtdtlrec.hdr_id,pmtdtlrec.line_id,l_err_code,'Donor value does not exist :'||sqlerrm);

			END;
	END IF; --End: get donor info

    -- If start: pddonoridtype_c = 7
	IF pmtdtlrec.pddonoridtype_c = '7' AND l_donordistrict IS NULL THEN

		l_donordistrictname := l_DonorName;

	ELSIF l_donordistrict IS NOT NULL THEN

		 BEGIN
			SELECT DISTINCT PartyName
			INTO l_DonorDistrictName
			FROM RTY_CX_b_ACCOUNTS_TBL
			WHERE PartyNumber = '7-'||l_DonorDistrict
			AND ROWNUM = 1;

		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		enable_logs('Track40.4');
		l_detall_validation_flag := 'E';
		l_detail_err_msg := l_detail_err_msg||'-donotdistrict value does not exist-';
		  l_err_code := 'Err-PD-04';
	-- pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'donotdistrict value does not exist :'||sqlerrm););
		END;
	ELSE

		BEGIN
		  enable_logs('validating donor district--> '||pmtdtlrec.PDDonorIDType_c||'-'||pmtdtlrec.PD_DonorID_c);

		select distinct SUBJECTPARTYPEOPARTYNAME 
		INTO l_DonorDistrictName                    
		from rty_cx_b_relationship_tbl
		where 1=1
		and relationshipcode = 'District'
		and RELTYPESTATUS = 'A'
		and sysdate between to_date(relationshipstartdate,'YYYY-MM-DD') and to_date(relationshipenddate,'YYYY-MM-DD')
		and OBJECTPARTYPEOPARTYID = 
						   (select distinct SUBJECTPARTYPEOSUBJECTPARTYID 
						   from rty_cx_b_relationship_tbl
						   where RELATIONSHIPRECID = 
							(select max(RELATIONSHIPRECID)
							--INTO l_PartyId,l_SubjectPartyNumber,l_SubjectPartyName,l_address1,l_emailaddress,l_country
							from rty_cx_b_accounts_tbl hz,
							rty_cx_b_relationship_tbl rel
							where hz.partynumber = pmtdtlrec.PDDonorIDType_c||'-'||pmtdtlrec.PD_DonorID_c
							and RELTYPESTATUS = 'A'
							and rel.OBJECTPARTYPEOPARTYID = hz.partyid
							and rel.relationshipcode = 'Credit Org'
							and sysdate between to_date(relationshipstartdate,'YYYY-MM-DD') and to_date(relationshipenddate,'YYYY-MM-DD')));


		  enable_logs('l_DonorDistrictName--> '||l_DonorDistrictName);
		 EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		 pmt_err(p_file_id ,p_flow_id ,pmtdtlrec.hdr_id,pmtdtlrec.line_id,l_err_code,'error while deriving donordistrict :'||sqlerrm);
		END;

	END IF;-- End: pddonoridtype_c = 7

               IF pmtdtlrec.pddonoridtype_c IN ( '3', '4', '7', '9' ) AND pmtdtlrec.creditorganizationid_c IS NULL 
                THEN
                    l_creditorgid := l_partyid;
                    l_creditorgname := l_organizationname;
                    l_creditorgtype := substr(l_PartyNumber, 1,instr(l_PartyNumber, '-')-1);
					l_creditorganizationid := substr(l_PartyNumber, instr(l_PartyNumber, '-')+1);

               --FAM-3740 
                IF pmtdtlrec.pddonoridtype_c = '3' THEN

					begin
						select distinct SUBJECTPARTYPEOPARTYNAME 
						INTO l_DonorDistrictName                    
						from rty_cx_b_relationship_tbl
						where 1=1
						and relationshipcode = 'District'
						and RELTYPESTATUS = 'A'
						and sysdate between to_date(relationshipstartdate,'YYYY-MM-DD') and to_date(relationshipenddate,'YYYY-MM-DD')
						and OBJECTPARTYPEOPARTYNUMBER = pmtdtlrec.PDDonorIDType_c||'-'||pmtdtlrec.PD_DonorID_c
						and rownum = 1;

					exception when others then
						pmt_err(p_file_id ,p_flow_id ,pmtdtlrec.hdr_id,pmtdtlrec.line_id,l_err_code,'error while deriving donordistrict at 3,4,7,9:'||sqlerrm);
					end;
					--
					 ELSIF pmtdtlrec.pddonoridtype_c = '4' THEN

					begin
						select distinct SUBJECTPARTYPEOPARTYNAME 
						INTO l_DonorDistrictName                    
						from rty_cx_b_relationship_tbl
						where 1=1
						and relationshipcode = 'District Rotaract Club'
						and RELTYPESTATUS = 'A'
						and sysdate between to_date(relationshipstartdate,'YYYY-MM-DD') and to_date(relationshipenddate,'YYYY-MM-DD')
						and OBJECTPARTYPEOPARTYNUMBER = pmtdtlrec.PDDonorIDType_c||'-'||pmtdtlrec.PD_DonorID_c
						and rownum = 1;

					exception when others then
						pmt_err(p_file_id ,p_flow_id ,pmtdtlrec.hdr_id,pmtdtlrec.line_id,l_err_code,'error while deriving donordistrict at 3,4,7,9:'||sqlerrm);
					end;
					ELSIF pmtdtlrec.pddonoridtype_c = ( '7') THEN

						begin
							select distinct partyname 
							INTO l_DonorDistrictName                    
							from rty_cx_b_accounts_tbl
							where 1=1                        
							and PARTYNUMBER = pmtdtlrec.PDDonorIDType_c||'-'||pmtdtlrec.PD_DonorID_c
							and rownum = 1;
						exception when others then
							pmt_err(p_file_id ,p_flow_id ,pmtdtlrec.hdr_id,pmtdtlrec.line_id,l_err_code,'error while deriving donordistrict at 3,4,7,9:'||sqlerrm);
					end;

					ELSIF pmtdtlrec.pddonoridtype_c = '9' THEN

						l_DonorDistrictName := 'RIHQ';

					END IF;

                ELSIF
                    pmtdtlrec.pddonoridtype_c IN ( '1', '2', '5' )
                    AND l_creditorganizationid IS NULL
                    AND l_partyid IS NOT NULL
                THEN   
                  enable_logs('Detail proc Track6');
                    BEGIN

                        select DISTINCT  rel.SUBJECTPARTYPEOSUBJECTPARTYID,rel.SUBJECTPARTYPEOPARTYNUMBER,rel.SUBJECTPARTYPEOPARTYNAME ,
                            address1,emailaddress,country
                        INTO l_PartyId,l_SubjectPartyNumber,l_SubjectPartyName,l_address1,l_emailaddress,l_country
                        from rty_cx_b_accounts_tbl hz,
                        rty_cx_b_relationship_tbl rel
                        where hz.partynumber = pmtdtlrec.PDDonorIDType_c||'-'||pmtdtlrec.PD_DonorID_c  
                        and RELTYPESTATUS = 'A'
                        and rel.OBJECTPARTYPEOPARTYID = hz.partyid
                        and rel.relationshipcode = 'Credit Org' 
						and sysdate between to_date(rel.relationshipstartdate,'YYYY-MM-DD') and to_date(rel.relationshipenddate,'YYYY-MM-DD')
						AND ROWNUM = 1;						
                                enable_logs('Detail proc Track7');

						IF SUBSTR(l_SubjectPartyNumber,1,1) = '4' then

						begin
						select distinct SUBJECTPARTYPEOPARTYNAME 
						INTO l_DonorDistrictName                    
						from rty_cx_b_relationship_tbl
						where 1=1
						and relationshipcode = 'District Rotaract Club'
						and RELTYPESTATUS = 'A'
						and sysdate between to_date(relationshipstartdate,'YYYY-MM-DD') and to_date(relationshipenddate,'YYYY-MM-DD')
						and OBJECTPARTYPEOPARTYNUMBER = l_SubjectPartyNumber
						and rownum = 1;

							exception when others then
								pmt_err(p_file_id ,p_flow_id ,pmtdtlrec.hdr_id,pmtdtlrec.line_id,l_err_code,'error while deriving donordistrict at 3,4,7,9:'||sqlerrm);
							end;
						END IF;

					IF l_subjectpartynumber IS NOT NULL THEN
                        l_creditorgid := l_partyid;
                        l_creditorgname := l_subjectpartyname;
                        l_creditorgtype := substr(l_subjectpartynumber, 1,1);
                         l_creditorganizationid := substr(l_subjectpartynumber, instr(l_subjectpartynumber, '-')+1);
                    END IF;

                    	EXCEPTION
                    WHEN OTHERS THEN
                     NULL;
                      l_err_code := 'Err-PD-10';
                      l_detail_err_msg := l_detail_err_msg|| '-Donor Credit Org Validation Failed-';
                      pmt_err(p_file_id ,p_flow_id ,pmtdtlrec.hdr_id,pmtdtlrec.line_id,l_err_code,'Donor Credit Org Validation Failed :'||sqlerrm);
                    END;

                ELSE
                    l_creditorgid := l_partyid;
                        l_creditorgname := l_subjectpartyname;
                        l_creditorgtype := substr(l_subjectpartynumber, 1,1);
                         l_creditorganizationid := substr(l_subjectpartynumber, instr(l_subjectpartynumber, '-')+1);
            END IF;


 enable_logs('Detail proc Track9');
                IF pmtdtlrec.creditorganizationid_c IS NOT NULL THEN

                    BEGIN
                        SELECT DISTINCT PartyId,PartyNumber,OrganizationName
                        INTO l_partyid,l_subjectpartynumber,l_organizationname
                        FROM rty_cx_b_accounts_tbl
                        WHERE PartyNumber = pmtdtlrec.CreditOrgType_c||'-'||pmtdtlrec.CreditOrganizationId_c
                        AND ROWNUM = 1;

                     IF l_partyid IS NOT NULL THEN
                        l_creditorgid := l_partyid;
                        l_creditorgname := l_subjectpartyname;
                        l_creditorgtype := substr(l_subjectpartynumber, 1,1);
                        l_creditorganizationid := substr(l_subjectpartynumber, instr(l_subjectpartynumber, '-')+1);
                    END IF;

					EXCEPTION
                    WHEN OTHERS THEN
                     NULL;
                    enable_logs('Track40.3');
                    l_detall_validation_flag := 'E';
					l_detail_err_msg := l_detail_err_msg||'-CreditorganizationId_C value does not exist-';
                      l_err_code := 'Err-PD-03';
               -- pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'CreditorganizationId_C value does not exist :'||sqlerrm););
                    END;
                     enable_logs('Detail proc Track10');

                END IF;

                IF pmtdtlrec.recipientid_c IS NOT NULL THEN

                    BEGIN
                        SELECT DISTINCT PartyId,OrganizationName
                        INTO l_RecipientID, l_RecipientName
                        FROM RTY_CX_b_ACCOUNTS_TBL
                        WHERE PartyNumber = pmtdtlrec.RecipientIDType_c||'-'||pmtdtlrec.RecipientID_c
						AND rownum = 1;

                    EXCEPTION
                    WHEN OTHERS THEN
                     NULL;
                    enable_logs('Track40.6');
                    l_detall_validation_flag := 'E';
					l_detail_err_msg := l_detail_err_msg||'-Receipient value does not exist-';
                     l_err_code := 'Err-PD-05';
               -- pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'receipient value does not exist :'||sqlerrm););
                    END;
                END IF;


                if  pmtdtlrec.PDDonorIDType_c = '1' and pmtdtlrec.RecipientIDType_c = '1' THEN														

                  l_transferType_c := 'IFRP2IRA';	

                elsif pmtdtlrec.PDDonorIDType_c != '1' and pmtdtlrec.RecipientIDType_c = '1' THEN													

                 l_transferType_c := 'OFRP2IRA';													

                elsif pmtdtlrec.PDDonorIDType_c = '1' and pmtdtlrec.RecipientIDType_c != '1' AND pmtdtlrec.RecipientIDType_c IS NOT NULL THEN													

                 l_transferType_c := 'IFRP2ORA';														

                elsif pmtdtlrec.PDDonorIDType_c != '1' and pmtdtlrec.RecipientIDType_c != '1' AND pmtdtlrec.RecipientIDType_c IS NOT NULL THEN										

                  l_transferType_c := 'OFRP2ORA';													

                else 
                l_transferType_c := NULL;
                end if;

                 IF pmtdtlrec.CommitmentID_c IS NOT NULL THEN  
					BEGIN
						SELECT id
						INTO l_commitment_id
						FROM RTY_CX_B_Commitments_tbl
						WHERE recordname = pmtdtlrec.CommitmentID_c
						AND ROWNUM = 1;

						enable_logs('Detail proc Track1 CommitmentID_c--> '||l_commitment_id);

					EXCEPTION
					WHEN OTHERS THEN
							l_detall_validation_flag := 'Y';
							l_detail_err_msg := l_detail_err_msg||'-CommitmentID_c: '||pmtdtlrec.CommitmentID_c|| ' - Invalid-'; 

					END;		
				END IF;


				IF pmtdtlrec.trackedgiftid_c IS NOT NULL AND eachstagepaygroupdetail.TRANSACTIONTYPE_C NOT IN ('REAL_ESTATE','DAF', 'RDG', 'LIA') THEN


				--Start: Vamsi FS-389 

				BEGIN


					SELECT DISTINCT Id, LIMITEDTODONORS_C, DONORNAME_ID_C, ALIAS_ID_C
					INTO l_Tg_ID, l_limitedtodonors_c, l_tg_donorid, l_tg_alias_id
					FROM rty_cx_b_tracked_tbl
					WHERE 1=1
					AND recordname        = pmtdtlrec.TrackedGiftID_c 
					AND STATUSID_C        IN ('ACTIVE','PENDING') 
					AND ROWNUM = 1;

				EXCEPTION
				  WHEN OTHERS THEN 
				  NULL;
				END;

			    IF l_limitedtodonors_c ='Y' THEN  

				BEGIN


					SELECT DISTINCT Id,recordname
					INTO l_TrackedGiftID, l_TrackedGift
					FROM rty_cx_b_tracked_tbl
					WHERE recordname     = pmtdtlrec.TrackedGiftID_c  
					AND STATUSID_C IN ('ACTIVE','PENDING')  
					AND DONORNAME_ID_C  = l_partyid_1      --FAM - 3851
					AND ALIAS_ID_C      = l_alias_id_c
					AND ROWNUM = 1;

				EXCEPTION WHEN NO_DATA_FOUND THEN 

						BEGIN 
						SELECT DISTINCT s.Id,s.recordname
						INTO l_TrackedGiftID, l_TrackedGift
						FROM rty_cx_b_tracked_tbl s, rty_cx_b_tracked_donor_tbl d 
						WHERE 1=1
						AND s.recordname   = pmtdtlrec.TrackedGiftID_c 
						AND s.id           = d.TRACKED_ID_C
						AND d.DONOR_ID_C   = l_partyid_1
						AND s.ALIAS_ID_C   = l_alias_id_c
						AND s.STATUSID_C IN ('ACTIVE','PENDING')
						AND ROWNUM = 1;


					 EXCEPTION 
						WHEN NO_DATA_FOUND THEN 

						--l_TrackedGiftID :=pmtdtlrec.TrackedGiftID_c ;

					--	IF l_alias_Default_TG  = pmtdtlrec.TrackedGiftID_c THEN 
IF  l_tg_alias_id = l_alias_id_c THEN 
						l_TrackedGiftID := l_alias_TrackedGift_ID;

						ELSE 

						    l_tracked_data := 'TG_NOT_FOUND';
						    enable_logs('Track40.7');
							l_detall_validation_flag := 'E';
							l_detail_err_msg := l_detail_err_msg||'-The Alias on the contribution does not match the Alias on the Track Gift ID: '||pmtdtlrec.TrackedGiftID_c;
							l_err_code := 'Err-PD-06';
							pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'-The Alias on the contribution does not match the Alias on the Track Gift ID :'||sqlerrm);

							--pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'-Exception returned while deriving trackedgiftid_c value :'||sqlerrm);

						END IF;


						IF l_tg_donorid  != l_partyid_1 THEN 

						    l_TrackedGiftID := NULL;

							l_tracked_data := 'TG_NOT_FOUND';
						    enable_logs('Track40.7');
							l_detall_validation_flag := 'E';
							l_detail_err_msg := l_detail_err_msg||'-Donor ID used is not in Limited To list' ;
							l_err_code := 'Err-PD-06';
							pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'-Donor ID used is not in Limited To list:'||sqlerrm);

						END IF; 


					   WHEN OTHERS THEN
					        l_tracked_data := 'TG_NOT_FOUND';
							enable_logs('Track40.7');
							l_detall_validation_flag := 'E';
							l_detail_err_msg := l_detail_err_msg||'-Exception returned while deriving trackedgiftid_c value';
							l_err_code := 'Err-PD-06';
							pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'-Exception returned while deriving trackedgiftid_c value :'||sqlerrm);
					 END;
				WHEN OTHERS THEN
				NULL;
						enable_logs('Track40.7');
						l_detall_validation_flag := 'E';
						l_detail_err_msg := l_detail_err_msg||'-Exception returned while deriving trackedgiftid_c value';
						l_err_code := 'Err-PD-06';
						pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'-Exception returned while deriving trackedgiftid_c value :'||sqlerrm);
				END;

				ELSIF l_limitedtodonors_c ='N'  THEN 

				IF  l_tg_alias_id = l_alias_id_c THEN  

				    l_TrackedGiftID := l_Tg_ID;

				ELSE 
					l_TrackedGiftID := null;
					enable_logs('Track40.7');
					l_detall_validation_flag := 'E';
					l_detail_err_msg := l_detail_err_msg||'-Tracked Gift Issue - Validation Failed as Alias is not matched with TG Alias';
					l_err_code := 'Err-PD-06';
					pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'- Tracked Gift Issue - Validation Failed as Alias is not matched with TG Alias '||sqlerrm);


				END IF;

				ELSE 
				null;

				END IF;
				--End: Vamsi FS-389 

				--FAM-3851 Vamsi 
				/* --commented by Vamsi , will remove if not required
				IF  l_tracked_data IS NULL THEN 

					BEGIN 

					SELECT DISTINCT LIMITEDTODONORS_C, ALIAS_ID_C
						INTO l_limitedtodonors_c, l_tg_alias_id
						FROM rty_cx_b_tracked_tbl
						WHERE recordname     = pmtdtlrec.TrackedGiftID_c  
						AND STATUSID_C IN ('ACTIVE','PENDING')  
						AND ROWNUM = 1;



					IF l_limitedtodonors_c !='Y' AND l_alias_id_c != l_tg_alias_id THEN 

						enable_logs('Track40.7');
						l_detall_validation_flag := 'E';
						l_detail_err_msg := l_detail_err_msg||'- trackedgiftid_c value : '||pmtdtlrec.trackedgiftid_c || ' is not matched with given alias and TG Alias';
						l_err_code := 'Err-PD-06';
						pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'- trackedgiftid_c value : '||pmtdtlrec.trackedgiftid_c || ' is not matched with given alias and TG Alias'||sqlerrm);

					END IF;

					EXCEPTION 
					WHEN OTHERS THEN 
					NULL;

					enable_logs('Track40.7');
					l_detall_validation_flag := 'E';
					l_detail_err_msg := l_detail_err_msg||'-Given trackedgiftid_c value : ' || pmtdtlrec.trackedgiftid_c || ' is not availeble with Active or Pending status';
					l_err_code := 'Err-PD-06';
					pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'-Given trackedgiftid_c value : ' || pmtdtlrec.trackedgiftid_c || ' is not availeble with Active or Pending status'||sqlerrm);									

					END;


			    END IF;
				*/

			 END IF;
			--Vamsi-Doubt: Is this okay if we assign 	l_alias_TrackedGift_ID based on below condition.
			/*ELSIF pmtdtlrec.PDDonorIDType_c = '1' AND eachstagepaygroupdetail.TRANSACTIONTYPE_C NOT IN ('REAL_ESTATE','DAF', 'RDG', 'LIA') THEN 


				-- check whether Tracked gift is active or not , add another query 

				l_TrackedGiftID := l_alias_TrackedGift_ID;

			ELSIF pmtdtlrec.PDDonorIDType_c != '1' 
			*/

			IF pmtdtlrec.trackedgiftid_c IS NULL and pmtdtlrec.PD_DonorID_c IS NOT NULL and pmtdtlrec.alias_c IS NOT NULL 
				AND pmtdtlrec.PDDonorIDType_c IS NOT NULL 
				AND pmtdtlrec.PD_DonorID_c !='1'     -- fam-3851
				AND eachstagepaygroupdetail.TRANSACTIONTYPE_C NOT IN ('REAL_ESTATE','DAF', 'RDG', 'LIA') THEN  -- FAM-3851

				BEGIN
					SELECT DISTINCT Id,recordname
					INTO l_TrackedGiftID, l_TrackedGift
					FROM rty_cx_b_tracked_tbl
					WHERE 1=1
					AND DONORNAME_ID_C   = l_partyid_1
					AND ALIAS_ID_C   = l_alias_id_c
					AND STATUSID_C IN ('ACTIVE','PENDING')
					AND ROWNUM = 1;

				EXCEPTION 
				WHEN NO_DATA_FOUND THEN 

				--FAM - 3851 Added TG Donor -- Checking at child donor level
				 BEGIN 
					SELECT DISTINCT s.Id,s.recordname
					INTO l_TrackedGiftID, l_TrackedGift
					FROM rty_cx_b_tracked_tbl s, rty_cx_b_tracked_donor_tbl d 
					WHERE 1=1
					AND s.id           = d.TRACKED_ID_C
					AND d.DONOR_ID_C   = l_partyid_1
					AND s.ALIAS_ID_C   = l_alias_id_c
					AND s.STATUSID_C IN ('ACTIVE','PENDING')
					AND ROWNUM = 1;


				 EXCEPTION 
				    WHEN NO_DATA_FOUND THEN 

					l_TrackedGiftID := l_alias_TrackedGift_ID;

				   WHEN OTHERS THEN
						enable_logs('Track40.7');
						l_detall_validation_flag := 'E';
						l_detail_err_msg := l_detail_err_msg||'-Exception returned while deriving trackedgiftid_c value';
						l_err_code := 'Err-PD-06';
						pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'-Exception returned while deriving trackedgiftid_c value :'||sqlerrm);
				 END;

				WHEN OTHERS THEN
				NULL;
				  enable_logs('Track40.7');
				l_detall_validation_flag := 'E';
				l_detail_err_msg := l_detail_err_msg||'-Exception returned while deriving trackedgiftid_c value';
				l_err_code := 'Err-PD-06';
				pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'-Exception returned while deriving trackedgiftid_c value :'||sqlerrm);
				END;
			END IF;

			--FAM-3851 
			IF pmtdtlrec.PD_DonorID_c ='1' AND eachstagepaygroupdetail.TRANSACTIONTYPE_C NOT IN ('REAL_ESTATE','DAF', 'RDG', 'LIA') THEN 

			l_TrackedGiftID := l_alias_TrackedGift_ID;  -- Alias Default Vaule

			END IF;

			-- FAM- 3851 Commented 
			/*	IF l_TrackedGiftID IS NULL THEN

					l_TrackedGiftID := l_alias_TrackedGift_ID;

				END IF;
            */
                IF pmtdtlrec.grants_c IS NULL AND pmtdtlrec.alias_c = 'GG FLOWTHR' THEN
				 l_detall_validation_flag := 'E';
					l_detail_err_msg := l_detail_err_msg||'Grant_c value is missing';

               END IF;

			      IF pmtdtlrec.grants_c IS NOT NULL THEN

				  BEGIN
					SELECT DISTINCT Id
						INTO l_Grants_Id_c
						FROM rty_cx_b_grants_tbl
						WHERE recordname = pmtdtlrec.grants_c
						AND ROWNUM = 1;
					EXCEPTION
					WHEN OTHERS THEN
						l_detall_validation_flag := 'E';
						l_detail_err_msg := l_detail_err_msg||'Grant_c value is does not exist';
					END;

               END IF;
             l_pledge_id := null;
             l_update_pledge := null;
                --pledge validation and update payment amount
                 validate_pledge(pmtdtlrec.alias_c,
						pmtdtlrec.PD_DonorID_c,
						 pmtdtlrec.PDDonorIDType_c,
						eachstagepaygroupdetail.ACCOUNTINGDATE_C ,
						l_pledge_id);

				IF l_creditorgid IS NULL THEN

						SELECT DISTINCT PartyId,PartyNumber,OrganizationName
                        INTO l_partyid,l_subjectpartynumber,l_organizationname
                        FROM rty_cx_b_accounts_tbl
                        WHERE PartyNumber = '9-1'
                        AND ROWNUM = 1;

                     IF l_partyid IS NOT NULL THEN
                        l_creditorgid := l_partyid;
                        l_creditorgname := l_subjectpartyname;
                        l_creditorgtype := substr(l_subjectpartynumber, 1,1);
                         l_creditorganizationid := substr(l_subjectpartynumber, instr(l_subjectpartynumber, '-')+1);
                    END IF;

				END IF;

				--V1.2 changes

                 IF  pmtdtlrec.ShipToOfficer_c IS NOT NULL THEN
                    IF  pmtdtlrec.ShipToOfficer_c IN ('DONOR','TREASURER') THEN

					begin
						select distinct address1 
						INTO l_Addr1                    
						from rty_cx_b_accounts_tbl
						where 1=1
						and partynumber = pmtdtlrec.PDDonorIDType_c||'-'||pmtdtlrec.PD_DonorID_c
						and rownum =1;

						--update l_addr1 to detail table (shiptoaddress1)

					exception when others THEN
					null;
					end;

				--elsif pmtdtlrec.ShipToOfficer_c = 'OTHER' then
                       -- l_addr1 := pmtdtlrec.ShipToAddress1_c;
                elsif pmtdtlrec.ShipToOfficer_c = 'RECIPIENT' THEN	

					begin
						select distinct address1 
						INTO l_Addr1                    
						from rty_cx_b_accounts_tbl
						where 1=1
						and partynumber = pmtdtlrec.RecipientIDType_c||'-'||pmtdtlrec.RECIPIENTID_C
						and rownum =1;

					exception when others THEN
					null;
					end;

				ELSIF  pmtdtlrec.ShipToOfficer_c IN ('CLUB_PRESIDENT','CLUB_SECRETARY','CLUB_FOUNDATION_CHAIR') THEN

                    --derivation ship to address1 
				BEGIN
					select partynumber
					into l_partynumber
					from rty_cx_b_accounts_tbl
					where PartyNumber = pmtdtlrec.PDDonorIDType_c||'-'||pmtdtlrec.PD_DonorID_c;

					IF pmtdtlrec.PDDonorIDType_c IN (3,4) THEN

						l_clubnumber := l_addr_partynumber;

					ELSIF pmtdtlrec.PDDonorIDType_c IN (1,2,5) THEN

						BEGIN
							select distinct SUBJECTPARTYPEOPARTYNUMBER 
							INTO l_subject_num                   
							from rty_cx_b_relationship_tbl
							where 1=1
							and relationshipcode = 'Credit Org'
							and RELTYPESTATUS = 'A'
							and OBJECTPARTYPEOPARTYNUMBER = l_partynumber
							and sysdate between to_date(relationshipstartdate,'YYYY-MM-DD') and to_date(relationshipenddate,'YYYY-MM-DD')
							and rownum =1;

							l_clubnumber := l_subject_num;

							 enable_logs('Track10.1 shiptofficevalidation l_clubnumber--> '||l_clubnumber);

						exception when no_data_found THEN

							begin
								select distinct SUBJECTPARTYPEOPARTYNUMBER 
								INTO l_subject_num                   
								from rty_cx_b_relationship_tbl
								where 1=1
								and relationshipcode = 'Rotaractor'
								and RELTYPESTATUS = 'A'
								and OBJECTPARTYPEOPARTYNUMBER = l_partynumber
								and sysdate between to_date(relationshipstartdate,'YYYY-MM-DD') and to_date(relationshipenddate,'YYYY-MM-DD')
								and rownum =1;

								l_clubnumber := l_subject_num;

							exception
							when no_data_found THEN
								l_clubnumber := null;
							when others THEN
							null;
							end;
                            end;

				end if;
                exception when others THEN
				null;
				end;

                 enable_logs('Track10.2 shiptofficevalidation l_clubnumber--> '||l_clubnumber);


				if l_clubnumber IS NOT NULL THEN

						begin
							select distinct address1 
                            INTO l_Addr1                    
                            from rty_cx_b_accounts_tbl
                            where partyid IN (                            
											select distinct to_char(OBJECTPARTYPEOPARTYID)                 
											from rty_cx_b_relationship_tbl
											where 1=1
											and relationshipcode = decode(pmtdtlrec.ShipToOfficer_c,'CLUB_PRESIDENT','Club President',
																						'CLUB_SECRETARY','Club Secretary',
																						'CLUB_FOUNDATION_CHAIR','Club Foundation Chair'
														)
											and RELTYPESTATUS = 'A'
											and SUBJECTPARTYPEOPARTYNUMBER = l_clubnumber
											and sysdate between to_date(relationshipstartdate,'YYYY-MM-DD') and to_date(relationshipenddate,'YYYY-MM-DD')
											and rownum =1
											);
						enable_logs('Track10.3 shiptofficevalidation l_Addr1--> '||l_Addr1);
						exception when others THEN
						null;
						end;
						end if;

				END IF;

                END iF;

				enable_logs('Track10.4 shiptofficevalidation l_Addr1--> '||l_Addr1);

               IF l_detall_validation_flag = 'E' THEN
                enable_logs('Track40.9 detal validation error--> '||l_detail_err_msg);
                    l_global_detall_validation_flag := 'E';
                     UPDATE rty_cx_pmt_dtl_stg_tbl
                                SET
                                    status = 'E', 
                                    processflag_c = 'Error',
                                    errorcomment_c =  l_detail_err_msg
                                WHERE 1=1
                                    and hdr_id = pmtdtlrec.hdr_id     -- Added by Vamsi on 01-Mar-2024
                                    and line_id = pmtdtlrec.line_id
                                    and file_id = p_file_id
                                    and flow_id = p_flow_id;  

                                    COMMIT;

                    ELSE
					-------------------------
                    --IF
                     enable_logs('Track40.9 no detal validation error--> ' ||l_DonorDistrictName);
                      enable_logs('l_partyid--> '||l_partyid);
                        UPDATE rty_cx_pmt_dtl_stg_tbl
                                SET
                                status = 'P', --final payment create
                                transfertype_c = l_transferType_c,
                                c_Recipient_name = l_RecipientID, 
                                C_DonorName   = l_partyid_1, 
                                C_TrackedGift = l_TrackedGiftID, 
                                C_GrantName = l_Grants_Id_c , 
                                c_alias_id_c= l_alias_id_c,
								C_DonorDistrictName = DECODE(l_DonorDistrictName,NULL,'RIHQ',l_DonorDistrictName), 
								/*c_creditorgname = DECODE(l_NonContributionRelated_c, 'N',NULL,l_creditorgid),     -- Added by Vamsi for non contribution alias
								c_creditorgtype = DECODE(l_NonContributionRelated_c, 'N',NULL,l_creditorgtype),   -- Added by Vamsi for non contribution alias
								c_creditorganizationid = DECODE(l_NonContributionRelated_c, 'N',NULL,l_creditorganizationid),  -- Added by Vamsi for non contribution alias
								*/
								c_creditorgname = l_creditorgid,     -- Added by Vamsi for non contribution alias
								c_creditorgtype = l_creditorgtype,   -- Added by Vamsi for non contribution alias
								c_creditorganizationid = l_creditorganizationid,  -- Added by Vamsi for non contribution alias
								c_program_year = l_programyear,								
								c_donor_country = l_country,  
								c_donor_email = l_emailaddress,
								c_donor_address1 = l_address1,
								adminfeepercent_c = SUBSTR(NVL(l_feepct,0),1,9),
                                paymentamount_c = l_paymentamount_c,
                                --c_update_pledge = decode(l_pledge_id,null,'N','Y'),
                                c_pledge_id = l_pledge_id,
                                c_commitment_id = l_commitment_id,
								--shiptofficer changes
								ShipToAddress1_c = decode(pmtdtlrec.ShipToOfficer_c , 'OTHER',ShipToAddress1_c,l_addr1),
                                NameOnLetter_c = decode(pmtdtlrec.MemorialTributeOccasion_c,NULL,NULL,l_donorName)	,								
								TAXRECEIPTREQUIRED_C = (case
													   when eachstagepaygroupdetail.BankAccountName_c = 'ITA_EUR' THEN 'N'
													   when eachstagepaygroupdetail.currencycode = 'INR' THEN 'N'
													   when l_contributionflag_c1!='Y' THEN 'N'   --FS-775 
													   ELSE pmtdtlrec.TAXRECEIPTREQUIRED_C
													   end) --FS-324 change
						WHERE line_id = pmtdtlrec.line_id
						and hdr_id = pmtdtlrec.hdr_id
						and file_id = p_file_id
						and flow_id = p_flow_id;  

						COMMIT;

				END IF;               
            END LOOP;

            IF l_global_detall_validation_flag = 'E' THEN
             enable_logs('Track40.9 l_global_detall_validation_flag-> '||l_global_detall_validation_flag);
                pmt_err(p_file_id ,p_flow_id ,eachstagepaygroupdetail.hdr_id,NULL,NULL,'Payment Details has Error for the given payment');
                UPDATE rty_cx_pmt_dtl_stg_tbl
                                SET
                                    status = 'E',  --partial payment updae error
                                     processflag_c = 'Error',
                                    errorflag_c = 'true',
                                    errorcomment_c = 'another error associated for given payment'
                                WHERE
                                    hdr_id = eachstagepaygroupdetail.hdr_id
                                    and status = 'P'
                                    and file_id = p_file_id
                                    and flow_id = p_flow_id;   

                                    COMMIT;



            ELSE
			--------------------
            enable_logs('Track final no validation errors for the file: '||p_file_id||'--'||p_flow_id||'--'||eachstagepaygroupdetail.hdr_id);

                UPDATE rty_cx_pmt_file_entry_tbl
                                    SET
                                        file_status = 'PROCESS'
                                          -- batch_status = 'PROCESS'
                                    WHERE file_id = p_file_id
                                    and flow_id = p_flow_id;   
                                    COMMIT;
                                enable_logs('Track24');

            END IF;

         UPDATE rty_cx_pmt_uploads_stg_tbl
                                SET
                                    status = 'E',  --partial payment update error
                                     processflag_c = 'Error',
                                    errorflag_c = 'true',
									errorcomment_c = 'another error associated for given payment'
                                WHERE
                                    hdr_id = eachstagepaygroupdetail.hdr_id
                                    and file_id = p_file_id
                                    and flow_id = p_flow_id
									and status = 'P'
                                    and exists (select 1 from rty_cx_pmt_dtl_stg_tbl where status = 'E' 
													and  hdr_id = eachstagepaygroupdetail.hdr_id
                                    and file_id = p_file_id
                                    and flow_id = p_flow_id);

                                    COMMIT;

        END LOOP;



    EXCEPTION
        WHEN OTHERS THEN
             pmt_err(p_file_id ,p_flow_id ,'',NULL,NULL,'Validae PMT Detail Proc RunTimeError: '||SQLERRM);
    END;

    PROCEDURE validate_stg_data (
        p_file_id NUMBER,
        p_flow_id NUMBER,
       p_batch_limit number
       -- p_err_msg OUT VARCHAR2
    ) AS

--variable declaration
        l_validationhdrflag      VARCHAR2(10);
        x_sts VARCHAR2(10);
        x_msg VARCHAR2(10);
        l_PaymentRecordName VARCHAR2(1000);
        l_validationhdrerror          VARCHAR2(1000);
        l_RecipientID varchar2(1000);
         l_RecipientName varchar2(1000);
		 --FS-389 
         l_TrackedGiftID varchar2(1000);
		 l_Tg_ID         varchar2(1000); 
		l_tg_alias_id_c           VARCHAR(2000);
		l_tg_alias_id   varchar2(2000);
		L_ALIAS_ID_C                  VARCHAR2(2000);
		L_ALIAS_DEFAULT_TG            VARCHAR2(2000);
		l_alias_TrackedGift_ID        varchar2(2000);
		L_PARTYID_1                   VARCHAR2(2000);
		L_DETAIL_ERR_MSG              VARCHAR2(2000);
		L_DETALL_VALIDATION_FLAG      VARCHAR2(2000);
		l_limitedtodonors_c  varchar2(1000);
		l_tg_donorid         varchar2(1000); 
		--End - FS-398 
		 l_tracked_data  varchar2(1000);
         l_TrackedGift varchar2(1000);
        l_validationlineserror     VARCHAR2(1000);
        l_validationdetailerror    VARCHAR2(1000);
        l_file_type                VARCHAR2(200);
        l_hdr_eventc_count         NUMBER;
        l_hdr_accountc_count       NUMBER;
        l_alias_count              NUMBER;
        l_pay_group_tot            NUMBER := 0;
        l_event_count              NUMBER;
        l_paymentamount            NUMBER;
        l_detailamount_tot         NUMBER;
        l_partyid_count            NUMBER;
        l_grantrelated_c           VARCHAR2(100);
        l_grants_c                 VARCHAR2(100);
        l_recordname               VARCHAR2(1000);
        l_grantc_count             NUMBER;
        l_noncontributionrelated_c VARCHAR2(1000);
		l_contributionflag_c1      VARCHAR2(100);--Vamsi 18-Apr
        l_payment_id               NUMBER;
        l_pan_present              VARCHAR2(1000);
        l_currency_rate            NUMBER := 1;
        l_env                      VARCHAR2(100) := 'oic-rotarydev';
        l_event_id                 VARCHAR2(100);
        l_remitterid               NUMBER;
        l_commitment_id           VARCHAR2(100);
        l_remittername             VARCHAR2(1000);
        l_remittertype             VARCHAR2(100);
        l_remitterdonorid          NUMBER;
        l_pmtrecname               VARCHAR2(1000);
        l_err_code VARCHAR2(100);
        l_hdr_id NUMBER;
        l_line_id NUMBEr;
        l_validationlineerrorflag  VARCHAR2(10);
        l_global_line_Err_flag VARCHAR2(10);
        l_acctperiod_sts VARCHAR2(10);
        l_enabledflag VARCHAR2(10);
        l_conversionrate VARCHAR2(1000);
		l_NonContributionRelated_c1 VARCHAR2(10);
		l_contributionflag_c2       VARCHAR2(10);  -- Vamsi 18-Apr

        CURSOR paymentupload_cur IS
        SELECT
            x.*
            --NULL paymentsrecordid_c
        FROM
            rty_cx_pmt_uploads_stg_tbl x
        WHERE
                file_id = p_file_id
            AND flow_id = p_flow_id
            AND status = 'N'
            --and rownum <= 2
            order by hdr_id asc;

        CURSOR paymentuploaddtl_cur (p_hdr_id VARCHAR2)
        IS
        SELECT
            *
        FROM
            rty_cx_pmt_dtl_stg_tbl
        WHERE
                file_id = p_file_id
            AND flow_id = p_flow_id
              and hdr_id = p_hdr_id
            AND status = 'N';

    BEGIN

    --insert into paymentuploads_c table
        FOR eachstagepaygroup IN paymentupload_cur LOOP
       enable_logs('Track1 payment header start1--> '||l_hdr_id);
          enable_logs('Track1 payment header start1--> '|| eachstagepaygroup.transactiontype_c);
            l_validationhdrflag := 'N';
            l_validationhdrerror := '';
            l_file_type := eachstagepaygroup.transactiontype_c;
            l_hdr_eventc_count := 0;
            l_hdr_accountc_count := 0;
             l_RemitterType := NULL;
                l_RemitterDonorID:= NULL;
                l_remitterID := NULL; 
                l_pan_present := NULL;
            l_event_id := NULL;
            l_enabledflag  := NULL;
            l_hdr_id := eachstagepaygroup.hdr_id;
            l_conversionrate := NULL;
            /*HDR VALIDATIONS*/
            ---------------------
            --miising payment data
            IF eachstagepaygroup.paymentid_c IS NULL 
			OR eachstagepaygroup.transactiontype_c IS NULL 
			OR ( eachstagepaygroup.bankaccountname_c IS NULL
            OR eachstagepaygroup.paymentcurrency_c IS NULL ) THEN

                l_validationhdrflag := 'Y';
                l_validationhdrerror := l_validationhdrerror || 'One or more filed has either blank or zero value.';
                l_err_code := 'Err-01';
                 pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror);   
            END IF;

         --missing acctdate/exchangedate
            IF eachstagepaygroup.accountingdate_c IS NULL OR eachstagepaygroup.exchangeratedate_c IS NULL 
            THEN
            enable_logs('Track4');
                l_validationhdrflag := 'Y';
                l_validationhdrerror := l_validationhdrerror || ' AccountingDate/ExchangeRateDate error occurred - value is blank or dateformat issue. ';
                l_err_code := 'Err-02';
                pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror) ;

            ELSE
            IF eachstagepaygroup.accountingdate_c IS NOT NULL THEN
            enable_logs('Track4.1.1'||eachstagepaygroup.accountingdate_c);
                BEGIN
                    select DISTINCT status_c
                    INTO l_acctperiod_sts
                    from RTY_CX_B_ACCTPERIOD_TBL
                    where to_date(eachstagepaygroup.accountingdate_c,'YYYY-MM-DD') between to_date(periodstartdate_c,'YYYY-MM-DD') and to_date(periodenddate_c,'YYYY-MM-DD');

                    IF l_acctperiod_sts <> 'O' THEN
                         l_validationhdrflag := 'Y';
                        l_validationhdrerror := l_validationhdrerror || 'Accounting date used on the transaction is not within the date range of the CX Open Periods ';
                        l_err_code := 'Err-42';
                        pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror) ;
                    END IF;

             enable_logs('Track4.1');
                EXCEPTION WHEN NO_DATA_FOUND THEN
                         l_validationhdrflag := 'Y';
                        l_validationhdrerror := l_validationhdrerror || 'Accounting Period ('||eachstagepaygroup.accountingdate_c||')data not found - ATP ';
                        l_err_code := 'Err-42';
                        pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror) ;
              WHEN OTHERS THEN
                         l_validationhdrflag := 'Y';
                        l_validationhdrerror := l_validationhdrerror || ' Error while validating Accouting Period Date';
                        l_err_code := 'Err-43';
                        pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror) ;
                END;

            END IF;
           /*  IF eachstagepaygroup.exchangeratedate_c IS NOT NULL THEN
            enable_logs('Track4.1.1'||eachstagepaygroup.exchangeratedate_c);
                BEGIN
                    select DISTINCT  status_c
                    INTO l_acctperiod_sts
                    from RTY_CX_B_ACCTPERIOD_TBL
                    where to_date(eachstagepaygroup.exchangeratedate_c,'YYYY-MM-DD') between to_date(periodstartdate_c,'YYYY-MM-DD') and to_date(periodenddate_c,'YYYY-MM-DD');

                    IF l_acctperiod_sts <> 'O' THEN
                         l_validationhdrflag := 'Y';
                        l_validationhdrerror := l_validationhdrerror || 'ExchangeRateDate used on the transaction is not within the date range of the CX Open Periods ';
                        l_err_code := 'Err-42';
                        pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror) ;
                    END IF;

             enable_logs('Track4.1');
                EXCEPTION WHEN NO_DATA_FOUND THEN
                         l_validationhdrflag := 'Y';
                        l_validationhdrerror := l_validationhdrerror || 'Exchange Period ('||eachstagepaygroup.exchangeratedate_c||')data not found - ATP ';
                        l_err_code := 'Err-42';
                        pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror) ;
              WHEN OTHERS THEN
                         l_validationhdrflag := 'Y';
                        l_validationhdrerror := l_validationhdrerror || ' Error while validating ExchangeDate Period ';
                        l_err_code := 'Err-43';
                        pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror) ;
                END;
                null;
            END IF;*/
            END iF;

            IF
                eachstagepaygroup.bankaccountname_c = 'NA'
                AND ( eachstagepaygroup.entity_c IS NULL  )
            THEN
            enable_logs('Track5');
                l_validationhdrflag := 'Y';
                l_validationhdrerror := l_validationhdrerror || ' Entity can not be blank if BankName is NA';
                l_err_code := 'Err-03';
                pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror);  
            END IF;

			 IF
                eachstagepaygroup.memorialhonoree_c = 'NA' 
            THEN
            enable_logs('Track5');
                l_validationhdrflag := 'Y';
                l_validationhdrerror := l_validationhdrerror || ' memorialhonoree_c value does not exist';
                l_err_code := 'Err-51';
                pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror);  
            END IF;


			 IF
                eachstagepaygroup.BANKACCOUNTNAME_C IS NOT NULL THEN 

				   BEGIN
						select enabledflag
						INTO l_enabledflag
						from rty_cx_b_lookup_tbl
						where tag = 'TRFC'
						and lookuptype1 = 'BANK_ACCOUNT_NAME'
						and (lookupcode1 = eachstagepaygroup.BANKACCOUNTNAME_C OR meaning = eachstagepaygroup.BANKACCOUNTNAME_C);

						IF l_enabledflag = 'N' then

							enable_logs('Track71');
							l_validationhdrflag := 'Y';
							l_validationhdrerror := l_validationhdrerror || ' INVALID Canadian BANK ACCOUNT AGAINST BANK_ACCOUNT_NAME LOOKUP';
							l_err_code := 'Err-70';
							pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror); 
						END IF;
					exception
					WHEn NO_DATA_FOUND THEN 
					NULL;
					END;

            END IF;

         /*   IF
                l_file_type = 'UPLOAD_TEMPLATES_EVENT_REGI'
                AND eachstagepaygroup.entity_c IS NULL
            THEN
            enable_logs('Track6');
                l_validationhdrflag := 'Y';
                l_validationhdrerror := l_validationhdrerror || ' One or more field has either blank or zero value.", " Check EventID value.'
                ;
                l_err_code := 'Err-04';
                pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror);  
                --pmt_err(p_file_id ,p_flow_id ,eachstagepaygroup.recordname,eachstagepaygroup.hdr_id,l_err_code,l_validationhdrerror);
            ELSIF
                l_file_type = 'UPLOAD_TEMPLATES_EVENT_REGI'
                AND eachstagepaygroup.entity_c IS NOT NULL
            THEN
                BEGIN
                    SELECT
                        COUNT(1)
                    INTO l_hdr_eventc_count
                    FROM
                        rty_cx_b_events_tbl
                    WHERE
                        recordname = eachstagepaygroup.entity_c;
                        enable_logs('Track7');

                    IF l_hdr_eventc_count = 0 THEN
                    enable_logs('Track8');
                        l_validationhdrflag := 'Y';
                        l_validationhdrerror := l_validationhdrerror || ' EventID error occurred - value is blank or does not exists. ';
                        l_err_code := 'Err-05';
                        pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror) ; 
                    END IF;

                EXCEPTION
                    WHEN OTHERS THEN
                       enable_logs('Track8.1');
                       l_validationhdrflag := 'Y';
                       l_err_code := 'Err-06';
                       pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,SQLERRM);
                END;

            END IF;
            */

            IF eachstagepaygroup.remitterid_c IS NOT NULL AND eachstagepaygroup.REMITTERTYPE_C IS NOT NULL THEN
                NULL;

                --get account details from account table

                BEGIN
                SELECT COUNT(1)
                INTO l_hdr_accountc_count
                FROM rty_cx_b_accounts_tbl
                WHERE partynumber = eachstagepaygroup.REMITTERTYPE_C||'-'||eachstagepaygroup.REMITTERID_C
				AND ROWNUM = 1;

                IF l_hdr_accountc_count = 0 THEN
                    l_validationhdrflag := 'Y';
                    l_validationhdrerror := l_validationhdrerror||' Type/RemitterID", ('||eachstagepaygroup.REMITTERTYPE_C||'/'||eachstagepaygroup.REMITTERID_C||') " error occurred - does not exists. ';
                pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror);
                END IF;

            EXCEPTION

            WHEN NO_DATA_FOUND THEN
             l_validationhdrflag := 'Y';
                    l_validationhdrerror := l_validationhdrerror||' Type/RemitterID", ('||eachstagepaygroup.REMITTERTYPE_C||'/'||eachstagepaygroup.REMITTERID_C||') " error occurred - does not exists. ';
                pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror);
            WHEN OTHERS THEN
             l_err_code := 'Err-21';
                pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,SQLERRM);
            END;

            ELSIF (eachstagepaygroup.remitterid_c IS  NULL AND eachstagepaygroup.REMITTERTYPE_C IS NOT NULL ) OR 
                (eachstagepaygroup.remitterid_c IS NOT NULL AND eachstagepaygroup.REMITTERTYPE_C IS  NULL) THEN
                l_validationhdrflag := 'Y';
                    l_validationhdrerror := l_validationhdrerror||' Type/RemitterID", ('||eachstagepaygroup.REMITTERTYPE_C||'/'||eachstagepaygroup.REMITTERID_C||') " error occurred - does not exists. ';
                pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror); 

            END IF;

              --FAM-3754
              --conversionrate validation and updating rate to header table --FAM-3754
                    IF   eachstagepaygroup.PaymentCurrency_c <> 'USD' AND eachstagepaygroup.ExchangeRateDate_c IS NOT NULL THEN  
                        BEGIN
                            SELECT
                               to_char (DAILYRATECONVERSIONRATE,'FM9999999999990D999999999999999999999','NLS_NUMERIC_CHARACTERS = ."')
                            INTO l_conversionrate
                            FROM
                                rty_cx_b_dailyrates_tbl
                            WHERE
                                DAILYRATECONVERSIONDATE = eachstagepaygroup.ExchangeRateDate_c
							AND DAILYRATEFROMCURRENCY = eachstagepaygroup.PaymentCurrency_c
                            AND UPPER(DAILYRATECONVERSIONTYPE) = UPPER('Corporate')       -- FAM-3788
							and DAILYRATETOCURRENCY = 'USD';

                              enable_logs('Track14');
                            IF l_conversionrate IS NULL THEN
                            enable_logs('Track15');
								l_validationhdrflag := 'Y';
								l_validationhdrerror := l_validationhdrerror||'Convesion Rate not found for given exchange date in CX/ATP';
								pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,'Err-101',l_validationhdrerror);                       
                            ELSE

								UPDATE rty_cx_pmt_uploads_stg_tbl
								SET (currencyrate) = (l_conversionrate)
								WHERE file_id = p_file_id
								AND flow_id = p_flow_id
								and ExchangeRateDate_c = eachstagepaygroup.ExchangeRateDate_c
								AND PaymentCurrency_c = eachstagepaygroup.PaymentCurrency_c
								AND hdr_id = eachstagepaygroup.hdr_id;

							END IF;

                        EXCEPTION
                            WHEN OTHERS THEN
                            l_err_code := 'Err-102';
							pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,SQLERRM);
						END;
                    END IF;

                   -- Repositioned Remitter logic to Header block as it is required for Events Transaction. 06-Mar-2024
					--get remitter info
					IF eachstagepaygroup.REMITTERID_C IS NOT NULL THEN

				   -- l_RemitterType :=  eachstagepaygroup.REMITTERTYPE_C;
				   --  l_RemitterDonorID :=  eachstagepaygroup.REMITTERID_C;   
					 enable_logs('Track21-->l_RemitterType--> '||l_RemitterType||'--'||l_RemitterDonorID);
							BEGIN
							SELECT DISTINCT partyid,OrganizationName
							INTO l_remitterID,l_RemitterName
							FROM rty_cx_b_accounts_tbl
							WHERE partynumber = eachstagepaygroup.REMITTERTYPE_C||'-'||eachstagepaygroup.REMITTERID_C;

							EXCEPTION 
							WHEN NO_DATA_FOUND THEN 
							  -- FS- 50/FS-329 - To Validate Remitter Details for INR Currency.
							  IF eachstagepaygroup.PAYMENTCURRENCY_C = 'INR' THEN 

								l_validationhdrflag := 'Y';
								l_validationhdrerror := l_validationhdrerror||' - RemitterID/Remitter Name is not found in CX';
								pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,'Err-101',l_validationhdrerror); 

							  END IF ;
							  --End : FS- 50/FS-329
							WHEN OTHERS THEN
							  NULL;
							 --l_validationhdrflag := 'Y';
							 --  l_err_code := 'Err-22';
						   -- pmt_err(p_file_id ,p_flow_id ,l_hdr_id,'',l_err_code,SQLERRM) ; 
							enable_logs('Track21-->   flag'||l_validationhdrflag);
							END;
						-- FS- 50/FS-329
						ELSIF eachstagepaygroup.REMITTERID_C  IS NULL and eachstagepaygroup.currencycode = 'INR'
						THEN 

								l_validationhdrflag := 'Y';
								l_validationhdrerror := l_validationhdrerror||' - RemitterID/Remitter Name not found for INR Currency';
								pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,'Err-101',l_validationhdrerror); 

						ELSIF eachstagepaygroup.REMITTERID_C  IS NULL and eachstagepaygroup.BANKACCOUNTNAME_C = 'ITA_EUR'
						THEN 

								l_validationhdrflag := 'Y';
								l_validationhdrerror := l_validationhdrerror||' - RemitterID/Remitter Type is not found for ITA_EUR Bank';
								pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,'Err-101',l_validationhdrerror); 
						END IF; 



							--check pan  (account/org_accountpllc)
							IF eachstagepaygroup.REMITTERID_C IS NOT NULL THEN

							BEGIN
							SELECT count(1)
							INTO l_pan_present
							FROM RTY_CX_b_ACCOUNTPII_TBL
							WHERE recordname = eachstagepaygroup.REMITTERTYPE_C||'-'||eachstagepaygroup.REMITTERID_C;

							IF l_pan_present > 1 THEN
								l_pan_present := 'Y';
							ELsE
							l_pan_present := 'N';
							END IF;

							EXCEPTION
							WHEN OTHERS THEN
							enable_logs('Track22');
						   -- l_validationhdrflag := 'Y';
							--   l_err_code := 'Err-23';
						  --pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,SQLERRM) ;    
							NULL;
							END;

						END IF; 

            /*LINE VALIDATIONS*/
            ---------------------
            IF l_file_type != 'UPLOAD_TEMPLATES_EVENT_REGI' THEN

                --FOR getpaygrouptotal IN paymentuploaddtl_cur(eachstagepaygroup.recordname) LOOP
                l_pay_group_tot := 0;
                l_global_line_Err_flag := 'N';

                --
                 FOR getpaygrouptotal IN paymentuploaddtl_cur(eachstagepaygroup.hdr_id) LOOP
                  enable_logs('Track9 line validations start and hdr id --> '||getpaygrouptotal.hdr_id);
             enable_logs('Track9 line validations start and line id--> '||getpaygrouptotal.line_id);
                 l_line_id := getpaygrouptotal.line_id;
                -- l_line_v
                     l_err_code := NULL;
                     l_validationlineerrorflag := 'N';
                     l_commitment_id := null;
                     l_RecipientID := null;
                     l_RecipientName := null;
					 --Start: FS-389
                     l_TrackedGiftID := null;
					 l_Tg_ID             := null;
					 l_tg_alias_id_c     := null;
					 l_tg_alias_id   := null;
					 l_alias_TrackedGift_ID  := null;
					 l_limitedtodonors_c  := null;
		             l_tg_donorid          := null;
					 L_ALIAS_ID_C                    := null;
					L_ALIAS_DEFAULT_TG              := null;
					L_PARTYID_1                     := null;
					L_DETAIL_ERR_MSG                := null;
					L_DETALL_VALIDATION_FLAG        := null;
					--Start: FS-389
					 l_tracked_data  := null;
                     l_TrackedGift := null;
                      l_validationlineserror := NULL;
					  l_NonContributionRelated_c1 := NULL;
					  l_contributionflag_c2  := NULL;
                    l_pay_group_tot := l_pay_group_tot + getpaygrouptotal.paymentamount_c;
                    l_paymentamount := eachstagepaygroup.paymentamount_c;

					IF
						getpaygrouptotal.shiptoofficer_c IS NOT NULL AND getpaygrouptotal.attribute2 = 'NA'  --attribute2 shiptoofficer_c
					THEN
					enable_logs('Track5');

					l_validationlineerrorflag := 'Y';
					l_validationlineserror := l_validationlineserror ||getpaygrouptotal.ShipToOfficer_c|| ' : SHIPTOOFFICER_C value does not exist. ';
					l_err_code := 'Err-109';

					END IF;


					-- Added for memorialtributeoccasion_c Validation by Vamsi on 7-Mar-2024 
					IF
						getpaygrouptotal.memorialtributeoccasion_c IS NOT NULL AND getpaygrouptotal.attribute3 = 'NA'  --attribute3 memorialtributeoccasion_c
					THEN
					enable_logs('Track5');

					l_validationlineerrorflag := 'Y';
					l_validationlineserror := l_validationlineserror ||getpaygrouptotal.memorialtributeoccasion_c|| ' : MEMORIALTRIBUTEOCCASION_C value does not exist. ';
					l_err_code := 'Err-109a';

					END IF;



                      --Alias validation 
                    IF getpaygrouptotal.alias_c IS NOT NULL  THEN

                        BEGIN
                            SELECT
                                COUNT(1)
                            INTO l_alias_count
                            FROM
                                rty_cx_b_alias_tbl
                            WHERE
                                recordname = getpaygrouptotal.alias_c
                                -- and contributionflag_c = 'Y'
                                 and active_c = 'Y';
                                enable_logs('Track11-->'||l_alias_count);

                        EXCEPTION
                            WHEN OTHERS THEN
                            enable_logs('Track11.1');
                            l_validationlineerrorflag := 'Y';
                            l_err_code := 'Err-08';
                        END;

                        IF l_alias_count = 0 THEN
                        enable_logs('Track12');
                            l_validationlineerrorflag := 'Y';
                            l_validationlineserror := l_validationlineserror || ' Alias ID error occurred - value is blank or does not exists. '
                            ;
                            l_err_code := 'Err-09';
                        ELSIF l_alias_count <> 0 THEN
                        enable_logs('Track13--> '||l_alias_count||'--'||getpaygrouptotal.alias_c);
                            BEGIN
                                SELECT
                                   distinct recordname,
								   NonContributionRelated_c,
								   contributionflag_c
                                INTO
                                    l_recordname,
									l_NonContributionRelated_c1,
									l_contributionflag_c2
                                FROM
                                    rty_cx_b_alias_tbl
                                WHERE
                                    recordname = getpaygrouptotal.alias_c
                                   -- and  contributionflag_c = 'Y'
                                    and active_c = 'Y'
                               AND ROWNUM = 1;

                                IF getpaygrouptotal.grants_c = ''
                                    AND l_recordname != 'RTN FUNDS'
                                THEN
                                 enable_logs('Track13');
                                    l_validationlineerrorflag := 'Y';
                                    l_validationlineserror := l_validationlineserror
                                                              || ' For Alias: '
                                                              || l_recordname
                                                              || '  Grant_c is required ';
                                -- pmt_err(p_file_id ,p_flow_id ,l_hdr_id,l_line_id,l_err_code,l_validationlineserror);
                                END IF;

                            EXCEPTION
                                WHEN OTHERS THEN
                                enable_logs('Track13.1--> '||eachstagepaygroup.hdr_id||'-'||getpaygrouptotal.line_id);
                                NULL;
                                l_validationlineerrorflag := 'Y';
								l_validationlineserror := l_validationlineserror||' Alias ID '||getpaygrouptotal.alias_c||' Does not exist';
                                 l_err_code := 'Err-10';
                                   pmt_err(p_file_id ,p_flow_id ,l_hdr_id,l_line_id,l_err_code,'Alias ID '||getpaygrouptotal.alias_c||' Does not exist');
                            END;
                            NULL;
                        END IF;

                   END IF;

                        --grantc validation
                    IF   getpaygrouptotal.grants_c IS NOT NULL THEN  
                        BEGIN
                            SELECT
                                COUNT(1)
                            INTO l_grantc_count
                            FROM
                                rty_cx_b_grants_tbl
                            WHERE
                                recordname = getpaygrouptotal.grants_c
								AND ROWNUM = 1;

    enable_logs('Track14');
                            IF l_grantc_count = 0 THEN
                            enable_logs('Track15');
                                l_validationlineerrorflag := 'Y';
                                l_validationlineserror := l_validationlineserror
                                                          || ' Grant ID: '
                                                          || getpaygrouptotal.grants_c
                                                          || ' - Invalid ';
                                                           l_err_code := 'Err-11';
                                 -- pmt_err(p_file_id ,p_flow_id ,l_hdr_id,l_line_id,l_err_code,l_validationlineserror);                       
                            END IF;

                        EXCEPTION
                            WHEN OTHERS THEN
                            enable_logs('Track15.1');
                            l_validationlineerrorflag := 'Y';
                             l_err_code := 'Err-12';
                              -- pmt_err(p_file_id ,p_flow_id ,l_hdr_id,l_line_id,l_err_code,SQLERRM) ;
                        END;
                    END IF;

					--Start : Vamsi - 18-Apr
					IF getpaygrouptotal.PDDonorIDType_c IS NULL AND getpaygrouptotal.PD_DonorID_c IS NULL 
						AND l_NonContributionRelated_c1 = 'Y' AND l_contributionflag_c2 ='Y' THEN

						l_validationlineerrorflag := 'Y';
						l_validationLinesError := l_validationLinesError||' Donor ID/Type '||getpaygrouptotal.PD_DonorID_c||'/'||getpaygrouptotal.PDDonorIDType_c||',  error occurred - value is blank or does not exists. ';	

					ELSIF getpaygrouptotal.PDDonorIDType_c IS NULL AND getpaygrouptotal.PD_DonorID_c IS NULL 
					    AND l_NonContributionRelated_c1 = 'N' AND l_contributionflag_c2 ='N'THEN 

						NULL;

					END IF;
					--End: Vamsi - 18-Apr 

                    --Partyid validation
					IF getpaygrouptotal.PDDonorIDType_c IS NOT NULL AND getpaygrouptotal.PD_DonorID_c IS NOT NULL 
						--AND l_NonContributionRelated_c = 'Y'   -- Commented by Vamsi - 18-Apr 
						THEN
					   BEGIN
                                SELECT count(1)
                                INTO l_partyid_count
                                FROM rty_cx_b_accounts_tbl
                                WHERE PartyNumber = getpaygrouptotal.PDDonorIDType_c||'-'|| getpaygrouptotal.PD_DonorID_c
								AND ROWNUM = 1;

                            IF l_partyid_count = 0 THEN
                            enable_logs('Track15.1.1');
                                l_validationlineerrorflag := 'Y';
                                l_validationLinesError := l_validationLinesError||' Donor ID/Type '||getpaygrouptotal.PD_DonorID_c||'/'||getpaygrouptotal.PDDonorIDType_c||',  error occurred - value is blank or does not exists. ';	
                                -- pmt_err(p_file_id ,p_flow_id ,l_hdr_id,l_line_id,l_err_code,l_validationLinesError) ;
                            END IF;

                        EXCEPTION
                        WHEN OTHERS THEN
                        enable_logs('Track1.2');
                             l_validationlineerrorflag := 'Y';
                         l_err_code := 'Err-12';
                          -- pmt_err(p_file_id ,p_flow_id ,l_hdr_id,l_line_id,l_err_code,SQLERRM) ;
                        END;
						END IF;

                  /*      IF getpaygrouptotal.CommitmentID_c IS NOT NULL THEN  
					BEGIN
						SELECT id
						INTO l_commitment_id
						FROM RTY_CX_B_Commitments_tbl
						WHERE recordname = getpaygrouptotal.CommitmentID_c
						AND ROWNUM = 1;

						enable_logs('Detail proc Track1 CommitmentID_c--> '||l_commitment_id);

					EXCEPTION
					WHEN OTHERS THEN
							l_validationlineerrorflag := 'Y';
							l_validationLinesError := l_validationLinesError||'-CommitmentID_c: '||getpaygrouptotal.CommitmentID_c|| ' - Invalid-'; 

					END;		
				END IF;*/

                IF getpaygrouptotal.trackedgiftid_c IS NOT NULL THEN

				--Start - FS-389 -Vamsi 
				-- Commented as part of FS-389 				
			/*
			BEGIN
					SELECT DISTINCT Id,recordname
					INTO l_TrackedGiftID, l_TrackedGift
					FROM rty_cx_b_tracked_tbl
					WHERE recordname = getpaygrouptotal.TrackedGiftID_c
					AND STATUSID_C IN ('ACTIVE','PENDING')
					AND ROWNUM = 1;

				EXCEPTION
				WHEN OTHERS THEN
				  enable_logs('Track40.7');
				l_validationlineerrorflag := 'Y';
				l_validationLinesError := l_validationLinesError||'-Trackedgiftid_c '||getpaygrouptotal.trackedgiftid_c||' value does not exist-';
				l_err_code := 'Err-PD-06';

				END;
			*/

				BEGIN


					SELECT DISTINCT Id, LIMITEDTODONORS_C, DONORNAME_ID_C, ALIAS_ID_C
					INTO l_Tg_ID, l_limitedtodonors_c, l_tg_donorid,  l_tg_alias_id   
					FROM rty_cx_b_tracked_tbl
					WHERE 1=1
					AND recordname        = getpaygrouptotal.TrackedGiftID_c 
					AND STATUSID_C        IN ('ACTIVE','PENDING') 
					AND ROWNUM = 1;

				EXCEPTION
				  WHEN OTHERS THEN 
				  NULL;
				END;

			    IF l_limitedtodonors_c ='Y' THEN  

				BEGIN


					SELECT DISTINCT Id,recordname
					INTO l_TrackedGiftID, l_TrackedGift
					FROM rty_cx_b_tracked_tbl
					WHERE recordname     = getpaygrouptotal.TrackedGiftID_c  
					AND STATUSID_C IN ('ACTIVE','PENDING')  
					AND DONORNAME_ID_C  = l_partyid_1      --FAM - 3851
					AND ALIAS_ID_C      = l_alias_id_c
					AND ROWNUM = 1;

				EXCEPTION WHEN NO_DATA_FOUND THEN 

						BEGIN 
						SELECT DISTINCT s.Id,s.recordname
						INTO l_TrackedGiftID, l_TrackedGift
						FROM rty_cx_b_tracked_tbl s, rty_cx_b_tracked_donor_tbl d 
						WHERE 1=1
						AND s.recordname   = getpaygrouptotal.TrackedGiftID_c 
						AND s.id           = d.TRACKED_ID_C
						AND d.DONOR_ID_C   = l_partyid_1
						AND s.ALIAS_ID_C   = l_alias_id_c
						AND s.STATUSID_C IN ('ACTIVE','PENDING')
						AND ROWNUM = 1;


					 EXCEPTION 
						WHEN NO_DATA_FOUND THEN 

						--l_TrackedGiftID :=pmtdtlrec.TrackedGiftID_c ;

						--IF l_alias_Default_TG  = getpaygrouptotal.TrackedGiftID_c THEN 
                        IF  l_tg_alias_id = l_alias_id_c THEN
						l_TrackedGiftID := l_alias_TrackedGift_ID;

						ELSE 

						    l_tracked_data := 'TG_NOT_FOUND';
						    enable_logs('Track40.7');
							l_detall_validation_flag := 'E';
							l_detail_err_msg := l_detail_err_msg||'-The Alias on the contribution does not match the Alias on the Track Gift ID : '||getpaygrouptotal.TrackedGiftID_c;
							l_err_code := 'Err-PD-06';
							pmt_err(p_file_id ,p_flow_id ,NULL,getpaygrouptotal.line_id,l_err_code,'-The Alias on the contribution does not match the Alias on the Track Gift ID :'||sqlerrm);

							--pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'-Exception returned while deriving trackedgiftid_c value :'||sqlerrm);

						END IF;


						IF l_tg_donorid  != l_partyid_1 THEN 

						    l_TrackedGiftID := NULL;

							l_tracked_data := 'TG_NOT_FOUND';
						    enable_logs('Track40.7');
							l_detall_validation_flag := 'E';
							l_detail_err_msg := l_detail_err_msg||'-Donor ID used is not in Limited To list.' ;
							l_err_code := 'Err-PD-06';
							pmt_err(p_file_id ,p_flow_id ,NULL,getpaygrouptotal.line_id,l_err_code,'-Donor ID used is not in Limited To list:'||sqlerrm);

						END IF; 


					   WHEN OTHERS THEN
					        l_tracked_data := 'TG_NOT_FOUND';
							enable_logs('Track40.7');
							l_detall_validation_flag := 'E';
							l_detail_err_msg := l_detail_err_msg||'-Exception returned while deriving trackedgiftid_c value';
							l_err_code := 'Err-PD-06';
							pmt_err(p_file_id ,p_flow_id ,NULL,getpaygrouptotal.line_id,l_err_code,'-Exception returned while deriving trackedgiftid_c value :'||sqlerrm);
					 END;
				WHEN OTHERS THEN
				NULL;
						enable_logs('Track40.7');
						l_detall_validation_flag := 'E';
						l_detail_err_msg := l_detail_err_msg||'-Exception returned while deriving trackedgiftid_c value';
						l_err_code := 'Err-PD-06';
						pmt_err(p_file_id ,p_flow_id ,NULL,getpaygrouptotal.line_id,l_err_code,'-Exception returned while deriving trackedgiftid_c value :'||sqlerrm);
				END;

				ELSIF l_limitedtodonors_c ='N'  THEN 

					IF  l_tg_alias_id = l_alias_id_c THEN  

						l_TrackedGiftID := l_Tg_ID;

					ELSE 

						l_TrackedGiftID := null;
						enable_logs('Track40.7');
						l_detall_validation_flag := 'E';
						l_detail_err_msg := l_detail_err_msg||'-Tracked Gift Issue - Validation failed as Alias is not matched with TG Alias';
						l_err_code := 'Err-PD-06';
						pmt_err(p_file_id ,p_flow_id ,NULL,getpaygrouptotal.line_id,l_err_code,'-Tracked Gift Issue - Validation failed as Alias is not matched with TG Alias-'||sqlerrm);

					END IF;

				ELSE 
				null;

				END IF;
				--End- FS-389 -Vamsi 
                end IF;

                IF getpaygrouptotal.recipientid_c IS NOT NULL THEN

                    BEGIN
                        SELECT DISTINCT PartyId,OrganizationName
                        INTO l_RecipientID, l_RecipientName
                        FROM RTY_CX_b_ACCOUNTS_TBL
                        WHERE PartyNumber = getpaygrouptotal.RecipientIDType_c||'-'||getpaygrouptotal.RecipientID_c
						AND rownum = 1;

                    EXCEPTION
                    WHEN OTHERS THEN
                     NULL;
                    enable_logs('Track40.6');
                    l_validationlineerrorflag := 'Y';
					l_validationLinesError := l_validationLinesError||'-Receipient value: '||getpaygrouptotal.recipientid_c||' does not exist-';
                     l_err_code := 'Err-PD-05';
               -- pmt_err(p_file_id ,p_flow_id ,NULL,pmtdtlrec.line_id,l_err_code,'receipient value does not exist :'||sqlerrm););
                    END;
                END IF;


                    IF l_validationlineerrorflag = 'Y'  THEN
                    enable_logs('Track16 lineid --> '||getpaygrouptotal.line_id);
                   pmt_err(p_file_id ,p_flow_id ,l_hdr_id,l_line_id,l_err_code,l_validationLinesError) ;

                        UPDATE rty_cx_pmt_dtl_stg_tbl
                        SET
                            processflag_c = 'Error',
                            errorflag_c = 'true',
                            errorcomment_c = substr(l_validationlineserror, 1, 499),
                            status = 'E'
                        WHERE
                            line_id = getpaygrouptotal.line_id
                            and hdr_id = getpaygrouptotal.hdr_id
                            and file_id = p_file_id
                            and flow_id = p_flow_id;
                            COMMIT;

                            l_global_line_Err_flag := 'E';

                   ELSIF l_validationlineerrorflag = 'N' THEN
                      UPDATE rty_cx_pmt_dtl_stg_tbl
                        SET
                            processflag_c = 'Ready',
                            errorflag_c = 'false',
                            status = 'P'
                        WHERE
                            line_id = getpaygrouptotal.line_id
                            and hdr_id = getpaygrouptotal.hdr_id
                            and file_id = p_file_id
                            and flow_id = p_flow_id;
                            COMMIT;

                    END IF;
                     --pmt_err(p_file_id ,p_flow_id ,eachstagepaygroup.id,eachstagepaygroup.recordname,'updating err reocrd1');    
  enable_logs('Track16.1--> '||l_validationlineerrorflag);
                END LOOP;
                  enable_logs('Track16.1 line validations completed l_global_line_Err_flag--> ' ||l_global_line_Err_flag);
                  enable_logs('Track16.1 .1 line validations completed after l_validationhdrflag--> ' ||l_validationhdrflag);
                --pmt amount validation

                IF l_paymentamount <> l_pay_group_tot
                THEN
                enable_logs('Track17');
                    l_validationhdrflag := 'Y';
                     l_err_code := 'Err-13';
                    l_validationhdrerror := l_validationhdrerror || ' Payment Total Match error occurred - Payment Total did not match with Sum of Payment Details Total. ';
                    pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,l_validationhdrerror) ;     
                END IF;

                IF l_validationhdrflag = 'N' THEN
               enable_logs('Track18');




                       END IF;

                        enable_logs('Track16.1 .1 final l_validationhdrflag--> ' ||l_validationhdrflag);

             END IF;

                    --get event id  added FS-263 
                    IF eachstagepaygroup.eventid_c IS NOT NULL AND UPPER(eachstagepaygroup.transactiontype_c) = 'UPLOAD_TEMPLATES_EVENT_REGI' THEN
                    enable_logs('Track19');
                        BEGIN
                            SELECT
                                id
                            INTO l_event_id
                            FROM
                                rty_cx_b_events_tbl
                            WHERE
                                recordname = eachstagepaygroup.eventid_c;
                                 enable_logs('Track19');

                        EXCEPTION
                            WHEN OTHERS THEN
                            NULL;
                             enable_logs('Track20');
                             -- pmt_update_err(p_file_id,p_flow_id,eachstagepaygroup.id,eachstagepaygroup.RecordName,substr(SQLERRM, 1, 499));
                              l_validationhdrflag := 'Y';
                              l_err_code := 'Err-14';
							  l_validationhdrerror := l_validationhdrerror ||  eachstagepaygroup.eventid_c ||'- Event Details not found in Event Object Table ';
                             pmt_err(p_file_id ,p_flow_id ,l_hdr_id,NULL,l_err_code,SQLERRM) ;    
                        END;

                    END IF;
					--get event id  added FS-263 - End 
					
                IF l_validationhdrflag = 'N' and l_global_line_Err_flag = 'N' AND UPPER(eachstagepaygroup.transactiontype_c) != 'UPLOAD_TEMPLATES_EVENT_REGI' THEN

                    --create payment
					--update payment
					--update rty_cx_pmt_uploads_stg_tbl above update stmt
					enable_logs('proceed for create payment');
					UPDATE rty_cx_pmt_uploads_stg_tbl
					SET
						status = 'P', --payment create
						remittertype = l_RemitterType,
						remitterdonorid = l_RemitterDonorID,
						attribute1 = 'DPU-'||rty_cx_deposit_seq.nextval, --depostitid
						remitterid = l_remitterID,
						panpresent = l_pan_present,
						--accountingdate_c = to_char(to_date(eachstagepaygroup.accountingdate_c,'YYYY-MM-DD'),'DD-MM-YYYY'),
						--eventid = l_event_id,    -- Commented FS-263 
						processflag_c = 'Ready',
						errorflag_c = 'false',
						errorcomment_c = NULL
					WHERE
						hdr_id = eachstagepaygroup.hdr_id
						and processflag_c = 'Pending'
						and file_id = p_file_id
						and flow_id = p_flow_id;

					UPDATE rty_cx_pmt_dtl_stg_tbl
						SET
							processflag_c = 'Ready',
								errorflag_c = 'false',
								errorcomment_c = NULL,
								status = 'P' --payment exist
						WHERE
							hdr_id = eachstagepaygroup.hdr_id
							 and processflag_c = 'Pending'
							and file_id = p_file_id
						and flow_id = p_flow_id;
						  COMMIT;

						  enable_logs('Track40 caling detial validatio proc');

					--call payment validation pkg  
					validate_pmt_detail_data(p_file_id, p_flow_id, x_sts,x_msg);		  

			  -- FAM-3788 : Added below switch is for populating depostitid for Event based files	
				ELSIF l_validationhdrflag = 'N' AND UPPER(eachstagepaygroup.transactiontype_c) = 'UPLOAD_TEMPLATES_EVENT_REGI' THEN 


					
						enable_logs('proceed for create payment');
						UPDATE rty_cx_pmt_uploads_stg_tbl
						SET
							status = 'P', --payment create
							remittertype = l_RemitterType,
							remitterdonorid = l_RemitterDonorID,
							attribute1 = 'DPU-'||rty_cx_deposit_seq.nextval, --depostitid
							remitterid = l_remitterID,
							panpresent = l_pan_present,
							--accountingdate_c = to_char(to_date(eachstagepaygroup.accountingdate_c,'YYYY-MM-DD'),'DD-MM-YYYY'),
							eventid = l_event_id,
							processflag_c = 'Ready',
							errorflag_c = 'false',
							errorcomment_c = NULL
						WHERE
							hdr_id = eachstagepaygroup.hdr_id
							and processflag_c = 'Pending'
							and file_id = p_file_id
							and flow_id = p_flow_id;

                ELSE
					 enable_logs('Track16.1 .1 payment has errors');
					IF l_validationhdrflag = 'N' THEN

					enable_logs('Track16.1 .1 no errors at headerlevel');
					UPDATE rty_cx_pmt_uploads_stg_tbl
				   SET
							processflag_c = 'Ready',
							errorflag_c = 'false',
							status = 'P'

						WHERE
							hdr_id = eachstagepaygroup.hdr_id
							and file_id = p_file_id
							and flow_id = p_flow_id;
							COMMIT;
							 validate_pmt_detail_data(p_file_id, p_flow_id, x_sts,x_msg);
					ELSE

					 enable_logs('Track16.1 .1 updtating errors');
						UPDATE rty_cx_pmt_uploads_stg_tbl
				   SET
							processflag_c = 'Error',
							errorflag_c = 'true',
							errorcomment_c = l_validationhdrerror,
							status = 'E'

						WHERE
							hdr_id = eachstagepaygroup.hdr_id
							and file_id = p_file_id
							and flow_id = p_flow_id;
							COMMIT;

					END IF;

						UPDATE rty_cx_pmt_dtl_stg_tbl
						SET
							processflag_c = 'Error',
							errorflag_c = 'true',
							errorcomment_c = 'associated to another error line on same payment',
							status = 'E'

						WHERE
							hdr_id = eachstagepaygroup.hdr_id
							and file_id = p_file_id
							and flow_id = p_flow_id
							and status = 'P'; 

						update rty_cx_pmt_file_entry_tbl set file_status = 'ERROR' 
						--, batch_status = 'ERROR'
						where file_id = p_file_id
							and flow_id = p_flow_id; 

							COMMIT;
				END IF;

        END LOOP;

--calling split batch procedure to update batch_id
  split_batch(p_file_id, p_flow_id, p_batch_limit);

    EXCEPTION
        WHEN OTHERS THEN
    -- p_status := 'E';	
    --p_err_msg := 'Copy Err-'||sqlerrm;	
            NULL;
    END;

---------------------------------------------------------------------------------------------------------------------------
  /*ASync Call Procedure */
  ---------------------------------------------------------------------------------------------------------------------------
PROCEDURE ics_async_call1(p_file_id number, p_flow_id number,p_batch_limit NUMBER,p_job_name OUT varchar2)
IS
v_plSqlBlock varchar2(500);
v_job_int binary_integer;
l_job_name varchar2(1000);
    BEGIN    
     v_plSqlBlock  :=
        'BEGIN ' || 'RTY_CX_PAYMENTS_IMPORT_PKG.validate_stg_data('||p_file_id||','||p_flow_id||','||p_batch_limit||'); END;';

        enable_logs(v_plSqlBlock);
        l_job_name := 'RTYCXJOB_'||p_file_id||'_'||p_flow_id;
          dbms_scheduler.create_job
                        (  
                          job_name      =>  l_job_name,  
                          job_type      =>  'PLSQL_BLOCK',  
                          job_action    =>  v_plSqlBlock,  
                          start_date    =>  systimestamp,--sysdate,  
                          enabled       =>  TRUE,  
                          auto_drop     =>  TRUE,  
                          comments      =>  'ICS1_AR_JOB');

     -- BEGIN DBMS_SCHEDULER.run_job(l_job_name,false); END;
     dbms_scheduler.enable(l_job_name);
 commit;
      p_job_name := l_job_name;
      EXCEPTION
      WHEN OTHERS THEN
        NULL;
END;

Procedure populate_stg_data(p_file_id NUMBER,
                            p_flow_id NUMBER,
                            p_status OUT VARCHAR2,
                            p_err_msg OUT VARCHAR2)

 AS

l_acct_date VARCHAR2(100); 
l_paygroup_number NUMBER := 0;
l_paygroup_line_number NUMBER := 0;
l_status VARCHAR2(10) := 'N';
l_exchange_date VARCHAR2(100);
l_taxreceipt_frquency VARCHAR2(100);

CURSOR cur_stg
IS
    SELECT 
        stg.*
    FROM RTY_CX_PMT_STG_TBL stg,
    rty_cx_pmt_file_entry_tbl file1
    where stg.file_id = p_file_id
    and stg.flow_id = p_flow_id
    and stg.file_id = file1.file_id
    and stg.flow_id = file1.flow_id
    and stg.status = 'N'
    order by stg.id asc;

BEGIN
    --insert into paymentuploads_c table
    FOR mainrec IN cur_stg LOOP

        IF mainrec.Y_N = 'Y' THEN
        l_paygroup_number := l_paygroup_number + 1;
        l_paygroup_line_number := 0;
        l_exchange_date := NULL;
        l_taxreceipt_frquency := NULL;

        BEGIN

		BEGIN


             SELECT NVL((case
            when LENGTH(SUBSTR(mainrec.ExchangeRateDate,1,INSTR(mainrec.ExchangeRateDate,'-',1)-1)) = 4 THEN mainrec.ExchangeRateDate
            WHEN LENGTH(SUBSTR(mainrec.ExchangeRateDate,1,INSTR(mainrec.ExchangeRateDate,'-',1)-1)) = 2 THEN to_char(to_date(mainrec.ExchangeRateDate,'DD-MM-YYYY'),'YYYY-MM-DD')
            ELSE NULL
            END),
            (case
            when LENGTH(SUBSTR(mainrec.AccountingDate_c,1,INSTR(mainrec.AccountingDate_c,'-',1)-1)) = 4 THEN mainrec.accountingdate_c
            WHEN LENGTH(SUBSTR(mainrec.AccountingDate_c,1,INSTR(mainrec.AccountingDate_c,'-',1)-1)) = 2 THEN to_char(to_date(mainrec.accountingdate_c,'DD-MM-YYYY'),'YYYY-MM-DD')
            ELSE NULL
            END))INTO l_exchange_date from dual;

            select
             ( CASE
                WHEN (mainrec.TransactionType_c = 'UPLOAD_RECURRING' 
                        OR mainrec.TransactionType_c = 'DPM_RECURRING' OR 
                        mainrec.TransactionType_c = 'RECURRING_ONLINE') 
                        AND (mainrec.PaymentCurrency_c = 'AUD') THEN INITCAP('ANNUAL')
                WHEN (mainrec.BANKACCOUNTNAME_C IN (select lookupcode1
                                                    from rty_cx_b_lookup_tbl
                                                    where tag = 'TRFC'
                                                    and lookuptype1 = 'BANK_ACCOUNT_NAME'
                                                    and enabledflag = 'Y') AND mainrec.AccountingDate_c >=  '2024-01-01') THEN INITCAP('ANNUAL')                                                                                                                                                        											
                WHEN (mainrec.BANKACCOUNTNAME_C IN (select meaning
                                                    from rty_cx_b_lookup_tbl
                                                    where tag = 'TRFC'
                                                    and lookuptype1 = 'BANK_ACCOUNT_NAME'
                                                    and enabledflag = 'Y') AND mainrec.AccountingDate_c >=  '2024-01-01')THEN INITCAP('ANNUAL')
                ELSE INITCAP('DAILY')
                end)
                INTO l_taxreceipt_frquency
                from dual;

        INSERT INTO RTY_CX_PMT_UPLOADS_STG_TBL (file_id,
                                                flow_id,
                                                status,
                                                paymentid_c,
                                                TransactionType_c,
                                                BankAccountName_c,
                                                AccountingDate_c, 
                                                LockboxRemitter_c,
                                                EventRegistrationID_c,
                                                PaymentCurrency_c,
                                                PaymentAmount_c,
                                                recordname,
                                                RecordNumber,
                                                ProcessFlag_c,
                                                ErrorFlag_c,
                                                TaxReceiptRequired_c,
                                                Entity_c,
                                                CharitableFoundation_c,
                                                ExchangeRateDate_c,
                                                RemitterID_c,
                                                RemitterType_c,
                                                EventID_c,
                                                HDR_ID,
                                                currencycode,
                                                currencyrate,
                                                id,
                                                hdr_row_id,
                                                /*MEMORIALTRIBUTEOCCASION_C,
                                                MEMORIALTRIBUTEFAMILYNAME_C,
                                                MEMORIALHONOREE_C,
                                                MEMORIALPHF_C,
                                                MEMORIALTRIBUTEDESCRIPTIONOVERRIDE_C,
                                                MEMORIALTRIBUTEDONORTYPE_C,
                                                MEMORIALTRIBUTEDONORID_C,
                                                MMRLHONOREEADDRESS1_C,
                                                MMRLHONOREEADDRESS2_C,
                                                MMRLHONOREEADDRESS3_C,
                                                MMRLHONOREEPOSTAL_C,
                                                MMRLHONOREESTATEPROVINCE_C,
                                                MMRLHONOREECITY_C,
                                                MMRLHONOREECOUNTRY_C,
                                                MMRLHONOREEEMAIL_C,
                                                MEMORIALTRIBUTESUPPRESSFAMILYLETTER_C,
                                                CRYSTALCERTIFNAME_C,
                                                SHIPTOOFFICER_C,
                                                PRESENTATIONDATE_C,
                                                SHIPTOADDRESS1_C,*/
                                                attribute2) --taxreceiptfrequency
                                         VALUES(mainrec.file_id,
                                                mainrec.flow_id,
                                                'N',
                                                mainrec.paymentid_c,
                                                TRIM(mainrec.TransactionType_c),
                                                TRIM(mainrec.BankAccountName_c),
                                               (case
                                                when LENGTH(SUBSTR(mainrec.AccountingDate_c,1,INSTR(mainrec.AccountingDate_c,'-',1)-1)) = 4 THEN mainrec.accountingdate_c
                                                WHEN LENGTH(SUBSTR(mainrec.AccountingDate_c,1,INSTR(mainrec.AccountingDate_c,'-',1)-1)) = 2 THEN to_char(to_date(mainrec.accountingdate_c,'DD-MM-YYYY'),'YYYY-MM-DD')
                                                ELSE NULL
                                                END),
                                                mainrec.LockboxRemitter_c,
                                                mainrec.EventRegistrationID_c,
                                                TRIM(mainrec.PaymentCurrency_c),
                                                mainrec.PaymentAmount_c,
                                                mainrec.file_name||'~'||l_paygroup_number,
                                                mainrec.file_name||'~'||l_paygroup_number,
                                                'Pending',
                                                'false',
                                                decode(upper(mainrec.TaxReceiptRequired_c),'TRUE','Y','N'),
                                                mainrec.Entity_c,
                                                DECODE(upper(mainrec.CharitableFoundation_c),'TRUE','Y','N'),
                                                l_exchange_date,                                     
                                                TRIM(mainrec.RemitterDonorID_Id_c),
                                                TRIM(mainrec.RotaryRemitterType_c),
                                                mainrec.EventID_c,
                                                l_paygroup_number,
                                                TRIM(mainrec.PaymentCurrency_c),
                                                1,
                                                null,
                                                mainrec.id,
                                             /*UPPER( mainrec.MemorialTributeOccasion_c) ,--MEMORIALTRIBUTEOCCASION_C
                                             mainrec.MemorialTributeFamilyName_c,
                                           mainrec.MemorialHoneree_c ,
                                             decode(upper( mainrec.MemorialPHF_c),'TRUE','Y','N'),  
                                             mainrec.attribute1,
                                            TRIM(mainrec.MemorialTributeDonorIdType_c) ,
                                             TRIM(mainrec.MemorialTributeDonorId_c) ,
                                            mainrec.MmrlHonoreeAddress1_c,
                                            mainrec.MmrlHonoreeAddress2_c,
                                            mainrec.MmrlHonoreeAddress3_c,
                                            mainrec.MmrlHonoreePostal_c,
                                            mainrec.MmrlHonoreeStateProvince_c,
                                             mainrec.MmrlHonoreeCity_c,
                                             (select territorycode
                                            from RTY_CX_B_TERRITORIES
                                            where territoryshortname = mainrec.MmrlHonoreeCountry_c
                                            and rownum = 1),
                                             mainrec.MmrlHonoreeEmail_c,
                                             decode(upper(mainrec.MemorialTributeSuppressFamilyLetter_c),'TRUE','Y','N'), 
                                            mainrec.CrystalCertifName_c,
                                            mainrec.ShipToOfficer_c,
                                              (case
                                                when LENGTH(SUBSTR(mainrec.PresentationDate_c,1,INSTR(mainrec.PresentationDate_c,'-',1)-1)) = 4 THEN mainrec.PresentationDate_c
                                                WHEN LENGTH(SUBSTR(mainrec.PresentationDate_c,1,INSTR(mainrec.PresentationDate_c,'-',1)-1)) = 2 THEN to_char(to_date(mainrec.PresentationDate_c,'DD-MM-YYYY'),'YYYY-MM-DD')
                                                ELSE NULL
                                                END),
                                                 mainrec.SHIPTOADDRESS1_C,*/
                                                 l_taxreceipt_frquency
                                            );
                                            EXCEPTION
                                             WHEn OTHERS THEN
                                            l_status := 'E';
                                            --p_err_msg := 'STG03-'||p_err_msg||SQLERRM;
                                            pmt_err(mainrec.file_id ,mainrec.flow_id ,NULL,NULL,'STG03-011',mainrec.paymentid_c||'-'||SQLERRM) ;
                                            END;  

           EXCEPTION
            WHEn OTHERS THEN
            l_status := 'E';
            --p_err_msg := 'STG02-'||p_err_msg||SQLERRM;
            pmt_err(mainrec.file_id ,mainrec.flow_id ,NULL,NULL,'STG03-01',SQLERRM) ;
            END;
		   l_paygroup_line_number := l_paygroup_line_number +1;
           BEGIN

            INSERT INTO  RTY_CX_PMT_DTL_STG_TBL
                                            (file_id,flow_id,status,
                                            file_type,
                                            SequentialLineNumber_c ,
                                            PaymentCurrency_c,
                                            PaymentAmount_c,
                                            Alias_c ,
                                            PDDonorIDType_c ,
                                            PD_DonorID_c ,
                                            CreditOrgType_c,
                                            CreditOrganizationId_c,
                                            TrackedGiftID_c,
                                            Grants_c,
                                            DonorDistrict_c,
                                            CrystalCertifName_c,
                                            ShipToOfficer_c,
                                            ShipToName_c,
                                            PresentationDate_c,
                                            ShipToCountry_c,
                                            ShipToAddress1_c,
                                            ShipToAddress2_c,
                                            ShipToAddress3_c,
                                            ShipToCity_c,
                                            ShipToStateProvince_c,
                                            ShipToPostal_c,
                                            ShipToPhone_c,
                                            ShipToEmail_c,
                                            RecipientIDType_c ,
                                            RecipientID_c ,
                                            TransferType_c ,
                                            Comments_c,
                                            RecordName,
                                            RecordNumber,
                                            ProcessFlag_c,
                                            ErrorFlag_c,
                                            ErrorComment_c,
                                            TaxReceiptRequired_c ,
                                            CharitableFoundation_c ,
                                            MemorialTributeFamilyName_c,
                                            MemorialTributeOccasion_c ,
                                            MemorialHonoree_c,
                                            MemorialPHF_c ,
                                            MemorialTributeSuppressFamilyLetter_c ,
                                            MemorialTributeDescriptionOverride_c,
                                            MemorialTributeDonorId_c ,
                                            MemorialTributeDonorType_c ,
                                            MmrlHonoreeAddress1_c,
                                            MmrlHonoreeAddress2_c,
                                            MmrlHonoreeAddress3_c,
                                            MmrlHonoreeCity_c,
                                            MmrlHonoreeCountry_c,
                                            MmrlHonoreeEmail_c,
                                            MmrlHonoreePostal_c,
                                            MmrlHonoreeStateProvince_c,
                                            NameOnLetter_c,
                                            AdminFeePercent_c,
                                            CommitmentID_c,
                                            AdminFeeOverride_c,
                                            id,
                                            HDR_ID,
                                            LINE_ID,
                                            totalpaymentamount,
                                            parentrecordnumber,
                                            conversionrate,
                                            line_row_id,
                                            ReceiptFrequency_c,
                                            AssociateToPledge_c,
											currencycode,
                                            attribute1,
											attribute2, --shiptoofficer_c
											attribute3  --MemorialTributeOccasion_c original value if available 
                                            )
                                            VALUES
                                            (mainrec.file_id,mainrec.flow_id,
                                            'N',
                                            mainrec.transactiontype_c,
                                            mainrec.SequentialLineNumber_c,
                                            TRIM(mainrec.PaymentCurrency_c),
                                            mainrec.PaymentAmountdetail_c,
                                            TRIM(mainrec.Alias_Id_c),
                                            TRIM(mainrec.PDDonorIDType_c),
                                            TRIM(mainrec.PD_DonorID_c) ,
                                            TRIM(mainrec.CreditOrgType_c),
                                            TRIM(mainrec.CreditOrg_Id_c),
                                            TRIM(mainrec.TrackedGiftID_Id_c),
                                            TRIM(mainrec.Grants_c),
                                            TRIM(mainrec.DonorDistrict_c),
                                            mainrec.CrystalCertifName_c,
                                            mainrec.ShipToOfficer_c,
                                            mainrec.ShipToName_c,
                                            (case
                                                when LENGTH(SUBSTR(mainrec.PresentationDate_c,1,INSTR(mainrec.PresentationDate_c,'-',1)-1)) = 4 THEN mainrec.PresentationDate_c
                                                WHEN LENGTH(SUBSTR(mainrec.PresentationDate_c,1,INSTR(mainrec.PresentationDate_c,'-',1)-1)) = 2 THEN to_char(to_date(mainrec.PresentationDate_c,'DD-MM-YYYY'),'YYYY-MM-DD')
                                                ELSE NULL
                                                END),                              
                                            mainrec.ShipToCountry_c,
                                            mainrec.ShipToAddress1_c,
                                            mainrec.ShipToAddress2_c,
                                            mainrec.ShipToAddress3_c,
                                            mainrec.ShipToCity_c,
                                            mainrec.ShipToStateProvince_c,
                                            mainrec.ShipToPostal_c,
                                            mainrec.ShipToPhone_c,
                                            mainrec.ShipToEmail_c,
                                            TRIM(mainrec.RecipientIDType_c) ,
                                            TRIM(mainrec.RecipientID_c) ,
                                            TRIM(mainrec.TransferType_c) ,
                                            mainrec.Comments_c,
                                            mainrec.file_name||'~'||l_paygroup_number||'~'||l_paygroup_line_number,
                                            mainrec.file_name||'~'||l_paygroup_number||'~'||l_paygroup_line_number,
                                             (CASE WHEN length(substr(mainrec.PresentationDate_c,1,INSTR(mainrec.PresentationDate_c,'-',1)-1)) > 4 THEN 'Error'
                                            ELSE 'Pending'
                                            END),
                                            'false',
                                            (CASE WHEN length(substr(mainrec.PresentationDate_c,1,INSTR(mainrec.PresentationDate_c,'-',1)-1)) > 4 
                                                        THEN 'Presentation Date Format Error'
                                            ELSE NULL
                                            END),
                                            decode(UPPER(mainrec.TaxReceiptRequired_c),'TRUE','Y','N'),
                                            decode(UPPER(mainrec.CharitableFoundation_c),'TRUE','Y','N'),
                                            mainrec.MemorialTributeFamilyName_c,
                                           UPPER( mainrec.MemorialTributeOccasion_c) ,
                                           mainrec.MemorialHoneree_c,
                                            decode(upper( mainrec.MemorialPHF_c),'TRUE','Y','N'),  
                                           decode(upper(mainrec.MemorialTributeSuppressFamilyLetter_c),'TRUE','Y','N'),
                                            mainrec.MemorialTributeDescriptionOverride_c ,--mainrec.attribute1,
                                            TRIM(mainrec.MemorialTributeDonorId_c) ,
                                            TRIM(mainrec.MemorialTributeDonorIdType_c) ,
                                            mainrec.MmrlHonoreeAddress1_c,
                                            mainrec.MmrlHonoreeAddress2_c,
                                            mainrec.MmrlHonoreeAddress3_c,
                                            mainrec.MmrlHonoreeCity_c,
                                               (select territorycode
                                            from RTY_CX_B_TERRITORIES
                                            where territoryshortname = mainrec.MmrlHonoreeCountry_c
                                            and rownum = 1),
                                            mainrec.MmrlHonoreeEmail_c,
                                            mainrec.MmrlHonoreePostal_c,
                                            mainrec.MmrlHonoreeStateProvince_c,
                                            mainrec.NameOnLetter_cTaxReceiptRequired2_c,
                                            (CASE WHEN mainrec.AdminFeeOverride  = 'Y' AND mainrec.AdminFeeAmt IS NOT NULL THEN mainrec.AdminFeeAmt
                                            ELSE '0'
                                            END),
                                            mainrec.CommitmentID_Id_c,
                                             (CASE WHEN mainrec.AdminFeeOverride  = 'Y' THEN 'TRUE'
                                            ELSE 'FALSE'
                                            END),
                                            null,
                                            l_paygroup_number,
                                            l_paygroup_line_number,
                                            mainrec.PaymentAmount_c,
                                            mainrec.file_name||'~'||l_paygroup_number,
                                            1,
                                            mainrec.id,
                                           UPPER(l_taxreceipt_frquency),
                                            decode(mainrec.TransactionType_c , 'DAF_TRANSFERS','N','Y'),
											mainrec.PaymentCurrency_c,
                                             l_exchange_date, --FAM-3754
											 mainrec.attribute2 ,--shiptofficerc
											 mainrec.attribute3 
                                            );
            EXCEPTION
            WHEn OTHERS THEN
            l_status := 'E';
            --p_err_msg := 'STG01-'||p_err_msg||SQLERRM;
            pmt_err(mainrec.file_id ,mainrec.flow_id ,NULL,NULL,'STG03-02',SQLERRM) ;
            END;
             ELSIF mainrec.TransactionType_c != 'UPLOAD_TEMPLATES_EVENT_REGI' THEN
             l_paygroup_line_number := l_paygroup_line_number +1;
           BEGIN

		    SELECT NVL((case
            when LENGTH(SUBSTR(mainrec.ExchangeRateDate,1,INSTR(mainrec.ExchangeRateDate,'-',1)-1)) = 4 THEN mainrec.ExchangeRateDate
            WHEN LENGTH(SUBSTR(mainrec.ExchangeRateDate,1,INSTR(mainrec.ExchangeRateDate,'-',1)-1)) = 2 THEN to_char(to_date(mainrec.ExchangeRateDate,'DD-MM-YYYY'),'YYYY-MM-DD')
            ELSE NULL
            END),
            (case
            when LENGTH(SUBSTR(mainrec.AccountingDate_c,1,INSTR(mainrec.AccountingDate_c,'-',1)-1)) = 4 THEN mainrec.accountingdate_c
            WHEN LENGTH(SUBSTR(mainrec.AccountingDate_c,1,INSTR(mainrec.AccountingDate_c,'-',1)-1)) = 2 THEN to_char(to_date(mainrec.accountingdate_c,'DD-MM-YYYY'),'YYYY-MM-DD')
            ELSE NULL
            END))INTO l_exchange_date from dual;

            INSERT INTO  RTY_CX_PMT_DTL_STG_TBL
                                            (file_id,flow_id,status,
                                            file_type,
                                            SequentialLineNumber_c ,
                                            PaymentCurrency_c,
                                            PaymentAmount_c,
                                            Alias_c ,
                                            PDDonorIDType_c ,
                                            PD_DonorID_c ,
                                            CreditOrgType_c,
                                            CreditOrganizationId_c,
                                            TrackedGiftID_c,
                                            Grants_c,
                                            DonorDistrict_c,
                                            CrystalCertifName_c,
                                            ShipToOfficer_c,
                                            ShipToName_c,
                                            PresentationDate_c,
                                            ShipToCountry_c,
                                            ShipToAddress1_c,
                                            ShipToAddress2_c,
                                            ShipToAddress3_c,
                                            ShipToCity_c,
                                            ShipToStateProvince_c,
                                            ShipToPostal_c,
                                            ShipToPhone_c,
                                            ShipToEmail_c,
                                            RecipientIDType_c ,
                                            RecipientID_c ,
                                            TransferType_c ,
                                            Comments_c,
                                            RecordName,
                                            RecordNumber,
                                            ProcessFlag_c,
                                            ErrorFlag_c,
                                            ErrorComment_c,
                                            TaxReceiptRequired_c ,
                                            CharitableFoundation_c ,
                                            MemorialTributeFamilyName_c,
                                            MemorialTributeOccasion_c ,
                                            MemorialHonoree_c,
                                            MemorialPHF_c ,
                                            MemorialTributeSuppressFamilyLetter_c ,
                                            MemorialTributeDescriptionOverride_c,
                                            MemorialTributeDonorId_c ,
                                            MemorialTributeDonorType_c ,
                                            MmrlHonoreeAddress1_c,
                                            MmrlHonoreeAddress2_c,
                                            MmrlHonoreeAddress3_c,
                                            MmrlHonoreeCity_c,
                                            MmrlHonoreeCountry_c,
                                            MmrlHonoreeEmail_c,
                                            MmrlHonoreePostal_c,
                                            MmrlHonoreeStateProvince_c,
                                            NameOnLetter_c,
                                            AdminFeePercent_c,
                                            CommitmentID_c,
                                            AdminFeeOverride_c,
                                            id,
                                            HDR_ID,
                                            LINE_ID,
                                            totalpaymentamount,
                                            parentrecordnumber,
                                            conversionrate,
                                            line_row_id,
                                            ReceiptFrequency_c,
                                            AssociateToPledge_c,
											currencycode,
                                            attribute1,
											attribute2, --shiptofficerc
											attribute3  --MemorialTributeOccasion_c original value if available
                                            )
                                            VALUES
                                            (mainrec.file_id,mainrec.flow_id,
                                            'N',
                                            mainrec.transactiontype_c,
                                            mainrec.SequentialLineNumber_c,
                                            TRIM(mainrec.PaymentCurrency_c),
                                            mainrec.PaymentAmountdetail_c,
                                            TRIM(mainrec.Alias_Id_c),
                                            TRIM(mainrec.PDDonorIDType_c),
                                            TRIM(mainrec.PD_DonorID_c) ,
                                            TRIM(mainrec.CreditOrgType_c),
                                            TRIM(mainrec.CreditOrg_Id_c),
                                            TRIM(mainrec.TrackedGiftID_Id_c),
                                            TRIM(mainrec.Grants_c),
                                            TRIM(mainrec.DonorDistrict_c),
                                            mainrec.CrystalCertifName_c,
                                            mainrec.ShipToOfficer_c,
                                            mainrec.ShipToName_c,
                                            (case
                                                when LENGTH(SUBSTR(mainrec.PresentationDate_c,1,INSTR(mainrec.PresentationDate_c,'-',1)-1)) = 4 THEN mainrec.PresentationDate_c
                                                WHEN LENGTH(SUBSTR(mainrec.PresentationDate_c,1,INSTR(mainrec.PresentationDate_c,'-',1)-1)) = 2 THEN to_char(to_date(mainrec.PresentationDate_c,'DD-MM-YYYY'),'YYYY-MM-DD')
                                                ELSE NULL
                                                END),
                                            mainrec.ShipToCountry_c,
                                            mainrec.ShipToAddress1_c,
                                            mainrec.ShipToAddress2_c,
                                            mainrec.ShipToAddress3_c,
                                            mainrec.ShipToCity_c,
                                            mainrec.ShipToStateProvince_c,
                                            mainrec.ShipToPostal_c,
                                            mainrec.ShipToPhone_c,
                                            mainrec.ShipToEmail_c,
                                            TRIM(mainrec.RecipientIDType_c) ,
                                            TRIM(mainrec.RecipientID_c) ,
                                            TRIM(mainrec.TransferType_c) ,
                                            mainrec.Comments_c,
                                            mainrec.file_name||'~'||l_paygroup_number||'~'||l_paygroup_line_number,
                                            mainrec.file_name||'~'||l_paygroup_number||'~'||l_paygroup_line_number,
                                             (CASE WHEN length(substr(mainrec.PresentationDate_c,1,INSTR(mainrec.PresentationDate_c,'-',1)-1)) > 4 THEN 'Error'
                                            ELSE 'Pending'
                                            END),
                                            'false',
                                            (CASE WHEN length(substr(mainrec.PresentationDate_c,1,INSTR(mainrec.PresentationDate_c,'-',1)-1)) > 4 
                                                        THEN 'Presentation Date Format Error'
                                            ELSE NULL
                                            END),
                                            decode(mainrec.TaxReceiptRequired_c,'TRUE','Y','N'),
                                            decode(mainrec.CharitableFoundation_c,'TRUE','Y','N'),
                                            mainrec.MemorialTributeFamilyName_c,
                                           UPPER( mainrec.MemorialTributeOccasion_c) ,
                                            mainrec.MemorialHoneree_c,
                                            decode( mainrec.MemorialPHF_c,'TRUE','Y','N'),  
                                            decode(mainrec.MemorialTributeSuppressFamilyLetter_c,'TRUE','Y','N'), 
                                             mainrec.MemorialTributeDescriptionOverride_c  , --mainrec.attribute1,
                                            TRIM(mainrec.MemorialTributeDonorId_c) ,
                                            TRIM(mainrec.MemorialTributeDonorIdType_c) ,
                                            mainrec.MmrlHonoreeAddress1_c,
                                            mainrec.MmrlHonoreeAddress2_c,
                                            mainrec.MmrlHonoreeAddress3_c,
                                            mainrec.MmrlHonoreeCity_c,
                                            (select territorycode
                                            from RTY_CX_B_TERRITORIES
                                            where territoryshortname = mainrec.MmrlHonoreeCountry_c
                                            and rownum = 1),
                                            mainrec.MmrlHonoreeEmail_c,
                                            mainrec.MmrlHonoreePostal_c,
                                            mainrec.MmrlHonoreeStateProvince_c,
                                            mainrec.NameOnLetter_cTaxReceiptRequired2_c,
                                            (CASE WHEN mainrec.AdminFeeOverride  = 'Y' AND mainrec.AdminFeeAmt IS NOT NULL THEN mainrec.AdminFeeAmt
                                            ELSE '0'
                                            END),
                                            mainrec.CommitmentID_Id_c,
                                             (CASE WHEN mainrec.AdminFeeOverride  = 'Y' THEN 'TRUE'
                                            ELSE 'FALSE'
                                            END),
                                            null,
                                            l_paygroup_number,
                                            l_paygroup_line_number,
                                            mainrec.PaymentAmount_c,
                                            mainrec.file_name||'~'||l_paygroup_number,
                                            1,
                                            mainrec.id,
                                           UPPER(l_taxreceipt_frquency),
                                            decode(mainrec.TransactionType_c , 'DAF_TRANSFERS','N','Y'),
											mainrec.PaymentCurrency_c,
                                             l_exchange_date, --FAM-3754
											  mainrec.attribute2 ,--shiptofficerc
											  mainrec.attribute3  --MemorialTributeOccasion_c original value if available
                                            );
            EXCEPTION
            WHEn OTHERS THEN
            l_status := 'E';
            --p_err_msg := 'STG02-'||p_err_msg||SQLERRM;
            pmt_err(mainrec.file_id ,mainrec.flow_id ,NULL,NULL,'STG03-03',SQLERRM) ;
            END;

           END IF;



    END
    loop;
    --insert into paymentuploadsdtls_c table
    IF l_status = 'E' THEN
        UPDATE rty_cx_pmt_file_entry_tbl
        SET
            file_status = 'ERROR'
        WHERE
                file_id = p_file_id
            AND flow_id = p_flow_id;

        COMMIT;
        p_status := 'E';
    ELSE 
  -- 
        UPDATE rty_cx_pmt_file_entry_tbl
        SET
            file_status = 'PENDING'
        WHERE
                file_id = p_file_id
            AND flow_id = p_flow_id;

        COMMIT;
        p_status := 'S';
    END IF;
exception
    when others then
     p_status := 'E';
    UPDATE rty_cx_pmt_file_entry_tbl
        SET
         file_status = 'ERROR'
        WHERE file_id = p_file_id
        and flow_id = p_flow_id;
END;


end RTY_CX_PAYMENTS_IMPORT_PKG;
/


CREATE OR REPLACE PACKAGE BODY "RTY_CX_PAYMENTS_REVERSAL_IMPORT" AS 

/***************************************************************************************************
Object Name :        RTY_CX_PAYMENTS_REVERSAL_IMPORT
Type        :        Package Body 
Create Date :        29-Jan-2025
Author      :        Vamsi Kiran
Description :        To Process - Cancel payment which has more then 500 CT lines. 

---------------------------------------------------------------------------------------------------
Version     Name        Date            Comments
1.0         Vamsi Kiran 29-Jan-2025     FS-699, 772

***************************************************************************************************/


g_debug_var VARCHAR2(2);		 
PROCEDURE enable_logs ( p_msg VARCHAR2 ) AS
BEGIN
		IF
				g_debug_var = 'Y'
		THEN
				dbms_output.put_line(p_msg);
		END IF;
END;

PROCEDURE insert_into_stg_tbl_prc( P_TAB_TYPE                IN  PAY_TAB_TYPE
								 , x_status  			    OUT	 VARCHAR2
								 , x_error_msg 			    OUT  VARCHAR2
								 )                       
IS

BEGIN

	BEGIN
	  FORALL i IN P_TAB_TYPE.FIRST .. P_TAB_TYPE.LAST SAVE EXCEPTIONS  
		INSERT INTO RTY_CX_PMT_REVERSAL_STG_TBL
		  (               
	Flow_id       
    ,File_Id      
	,InstanceId   
	,Status       
    ,Error_msg
    ,PYId                                   
    ,CTID    
    ,RecordName                            
    ,RecordNumber                        
    ,Payments_Id_c                       
    ,LastUpdateLogin                     
    ,ConflictId                          
    ,UserLastUpdateDate                  
    ,CurrencyCode                        
    ,CurcyConvRateType                   
    ,CorpCurrencyCode                    
    ,DonorName_Id_c                      
    ,DonorName_c                         
    ,Alias_Id_c                          
    ,Alias_c                             
    ,TrackedGiftID_Id_c                  
    ,TrackedGiftID_c                     
    ,TaxReceiptRequired_c                
    ,TaxReceiptPrint_c                   
    ,Comments_c                          
    ,Grants_Id_c                         
    ,Grants_c                            
    ,TaxReceipt_c                        
    ,PaymentID_c                         
    ,AnonymousFlag_c                     
    ,Deceased_c                          
    ,TransferType_c                      
    ,DonorAddressLine1_c                 
    ,SendERPFlag_c                       
    ,SendToRPM_c                         
    ,PaymentAmount_c                     
    ,RateType_c                          
    ,ConversionRate_c                    
    ,USDAmount_c                         
    ,QUIDPROQUOCOUNT_c                   
    ,QUIDPROQUORATE_c                    
    ,QUIDPROQUORATES_c                   
    ,CommitmentID_Id_c                   
    ,CommitmentID_c                      
    ,PaymentCurrencies_c                 
    ,USDAmounts_c                        
    ,DonorDistrict_c                     
    ,AdminFee_c                          
    ,ProgramYear_c                       
    ,PledgeID_Id_c                       
    ,PledgeID_c                          
    ,MultiplePaymentDetailIds_c          
    ,RecipientName_Id_c                  
    ,RecipientName_c                     
    ,RecipientID_c                       
    ,CreditOrg_Id_c                      
    ,CreditOrg_c                         
    ,CreditOrgType_c                     
    ,CreditOrganizationId_c              
    ,TemplateName_c                      
    ,AssociateToPledge_c                 
    ,CopyCollapse_c                      
    ,TaxReceiptNumber_c                  
    ,ERPUpdateDate_c                     
    ,IRAFlag_c                           
    ,ExternalDAFFlag_c                   
    ,CharitableFoundation_c              
    ,PaymentCancel_c                     
    ,TotalPaymentAmmount_c               
    ,PD_DonorID_c                        
    ,Split_c                             
    ,CampaignID_c                        
    ,CorporateMatchingGift_c             
    ,ChangeCategory_c                    
    ,OriginalPaymentDetailId_c           
    ,Status_c                            
    ,PayrollDeduction_c                  
    ,PaymentHeaderAmount_c               
    ,ProgramYear2_c                      
    ,PHS_c                               
    ,EstateInProcess_c                   
    ,Legacy_c                            
    ,MemorialPHF_c                       
    ,SequentialLineNumber_c              
    ,QuidProQuoDescription_c             
    ,QuidProQuoAmount1_c                 
    ,PDDonorIDType_c                     
    ,MemorialTributeFamilyName_c         
    ,MemorialTributeOccasion_c           
    ,MemorialTributeSuppressFamilyLetter_c        
    ,MemorialHoneree_c                            
    ,MemorialTributeDescriptionOverride_c         
    ,MemorialTributeDonorId_c                     
    ,MemorialTributeDonorIdType_c                 
    ,MmrlHonoreeAddress1_c                        
    ,MmrlHonoreeAddress2_c                        
    ,MmrlHonoreeCity_c                            
    ,MmrlHonoreeCountry_c                         
    ,MmrlHonoreeEmail_c                           
    ,MmrlHonoreePostal_c                          
    ,MmrlHonoreeStateProvince_c                   
    ,ShipToAddress1_c                             
    ,ShipToAddress2_c                             
    ,ShipToAddress3_c                             
    ,ShipToCity_c                                 
    ,ShipToCountry_c                              
    ,ShipToName_c                                 
    ,ShipToOfficer_c                              
    ,ShipToPhone_c                                
    ,ShipToPostal_c                               
    ,ShipToStateProvence_c                        
    ,CrystalCertifName_c                          
    ,PresentationDate_c                           
    ,MmrlHonoreeAddress3_c                        
    ,NameOnLetter_c                               
    ,SendRecognition_c                            
    ,AdminFeePercent_c                            
    ,RecipientIDType_c                            
    ,DonorEmail_c                                 
    ,DonorCountry_c                               
    ,LineType_c                                   
    ,ErrorStatisticsCode_c                        
    ,ErrorStatisticsQty_c                         
    ,ReceiptFrequency_c                           
    ,PYCalculation_c                              
    ,ShipToEmail_c                                
    ,ShipToStateProvince1_c                       
    ,ConvertedTransactionID_c                     
    ,SourceName_c                                 
    ,CampaignIdentifier_c                         
    ,ChunkNumber_c                                
    ,GLStatus_c                                   
    ,TaxReceiptInProgress_c                       
    ,AcknowledgementSent_c                        
    ,AcknowledgementSentDate_c                    
    ,CreatedBy                                  
    ,CreationDate                                
    ,LastUpdatedBy                               
    ,LastUpdateDate                     		
	)
		VALUES
		(                             
     P_TAB_TYPE(i).Flow_id       
    ,P_TAB_TYPE(i).File_Id       
	,P_TAB_TYPE(i).InstanceId    
	,P_TAB_TYPE(i).Status        
    ,P_TAB_TYPE(i).Error_msg     
    ,P_TAB_TYPE(i).PYId  
    ,P_TAB_TYPE(i).CTId  	
    ,P_TAB_TYPE(i).RecordName                                   
    ,P_TAB_TYPE(i).RecordNumber                               
    ,P_TAB_TYPE(i).Payments_Id_c                              
    ,P_TAB_TYPE(i).LastUpdateLogin                            
    ,P_TAB_TYPE(i).ConflictId                                 
    ,P_TAB_TYPE(i).UserLastUpdateDate                         
    ,P_TAB_TYPE(i).CurrencyCode                               
    ,P_TAB_TYPE(i).CurcyConvRateType                          
    ,P_TAB_TYPE(i).CorpCurrencyCode                           
    ,P_TAB_TYPE(i).DonorName_Id_c                             
    ,P_TAB_TYPE(i).DonorName_c                                
    ,P_TAB_TYPE(i).Alias_Id_c                                 
    ,P_TAB_TYPE(i).Alias_c                                    
    ,P_TAB_TYPE(i).TrackedGiftID_Id_c                         
    ,P_TAB_TYPE(i).TrackedGiftID_c                            
    ,P_TAB_TYPE(i).TaxReceiptRequired_c                       
    ,P_TAB_TYPE(i).TaxReceiptPrint_c                          
    ,P_TAB_TYPE(i).Comments_c                                 
    ,P_TAB_TYPE(i).Grants_Id_c                                
    ,P_TAB_TYPE(i).Grants_c                                   
    ,P_TAB_TYPE(i).TaxReceipt_c                               
    ,P_TAB_TYPE(i).PaymentID_c                                
    ,P_TAB_TYPE(i).AnonymousFlag_c                            
    ,P_TAB_TYPE(i).Deceased_c                                 
    ,P_TAB_TYPE(i).TransferType_c                             
    ,P_TAB_TYPE(i).DonorAddressLine1_c                        
    ,P_TAB_TYPE(i).SendERPFlag_c                              
    ,P_TAB_TYPE(i).SendToRPM_c                                
    ,P_TAB_TYPE(i).PaymentAmount_c                            
    ,P_TAB_TYPE(i).RateType_c                                 
    ,P_TAB_TYPE(i).ConversionRate_c                           
    ,P_TAB_TYPE(i).USDAmount_c                                
    ,P_TAB_TYPE(i).QUIDPROQUOCOUNT_c                          
    ,P_TAB_TYPE(i).QUIDPROQUORATE_c                           
    ,P_TAB_TYPE(i).QUIDPROQUORATES_c                          
    ,P_TAB_TYPE(i).CommitmentID_Id_c                          
    ,P_TAB_TYPE(i).CommitmentID_c                             
    ,P_TAB_TYPE(i).PaymentCurrencies_c                        
    ,P_TAB_TYPE(i).USDAmounts_c                               
    ,P_TAB_TYPE(i).DonorDistrict_c                            
    ,P_TAB_TYPE(i).AdminFee_c                                 
    ,P_TAB_TYPE(i).ProgramYear_c                              
    ,P_TAB_TYPE(i).PledgeID_Id_c                              
    ,P_TAB_TYPE(i).PledgeID_c                                 
    ,P_TAB_TYPE(i).MultiplePaymentDetailIds_c                 
    ,P_TAB_TYPE(i).RecipientName_Id_c                         
    ,P_TAB_TYPE(i).RecipientName_c                            
    ,P_TAB_TYPE(i).RecipientID_c                              
    ,P_TAB_TYPE(i).CreditOrg_Id_c                             
    ,P_TAB_TYPE(i).CreditOrg_c                                
    ,P_TAB_TYPE(i).CreditOrgType_c                            
    ,P_TAB_TYPE(i).CreditOrganizationId_c                     
    ,P_TAB_TYPE(i).TemplateName_c                             
    ,P_TAB_TYPE(i).AssociateToPledge_c                        
    ,P_TAB_TYPE(i).CopyCollapse_c                             
    ,P_TAB_TYPE(i).TaxReceiptNumber_c                         
    ,P_TAB_TYPE(i).ERPUpdateDate_c                            
    ,P_TAB_TYPE(i).IRAFlag_c                                  
    ,P_TAB_TYPE(i).ExternalDAFFlag_c                          
    ,P_TAB_TYPE(i).CharitableFoundation_c                     
    ,P_TAB_TYPE(i).PaymentCancel_c                            
    ,P_TAB_TYPE(i).TotalPaymentAmmount_c                      
    ,P_TAB_TYPE(i).PD_DonorID_c                               
    ,P_TAB_TYPE(i).Split_c                                    
    ,P_TAB_TYPE(i).CampaignID_c                               
    ,P_TAB_TYPE(i).CorporateMatchingGift_c                    
    ,P_TAB_TYPE(i).ChangeCategory_c                           
    ,P_TAB_TYPE(i).OriginalPaymentDetailId_c                  
    ,P_TAB_TYPE(i).Status_c                                   
    ,P_TAB_TYPE(i).PayrollDeduction_c                         
    ,P_TAB_TYPE(i).PaymentHeaderAmount_c                      
    ,P_TAB_TYPE(i).ProgramYear2_c                             
    ,P_TAB_TYPE(i).PHS_c                                      
    ,P_TAB_TYPE(i).EstateInProcess_c                          
    ,P_TAB_TYPE(i).Legacy_c                                   
    ,P_TAB_TYPE(i).MemorialPHF_c                              
    ,P_TAB_TYPE(i).SequentialLineNumber_c                     
    ,P_TAB_TYPE(i).QuidProQuoDescription_c                    
    ,P_TAB_TYPE(i).QuidProQuoAmount1_c                        
    ,P_TAB_TYPE(i).PDDonorIDType_c                            
    ,P_TAB_TYPE(i).MemorialTributeFamilyName_c                
    ,P_TAB_TYPE(i).MemorialTributeOccasion_c                  
    ,P_TAB_TYPE(i).MemorialTributeSuppressFamilyLetter_c     
    ,P_TAB_TYPE(i).MemorialHoneree_c                         
    ,P_TAB_TYPE(i).MemorialTributeDescriptionOverride_c      
    ,P_TAB_TYPE(i).MemorialTributeDonorId_c                  
    ,P_TAB_TYPE(i).MemorialTributeDonorIdType_c              
    ,P_TAB_TYPE(i).MmrlHonoreeAddress1_c                     
    ,P_TAB_TYPE(i).MmrlHonoreeAddress2_c                     
    ,P_TAB_TYPE(i).MmrlHonoreeCity_c                         
    ,P_TAB_TYPE(i).MmrlHonoreeCountry_c                      
    ,P_TAB_TYPE(i).MmrlHonoreeEmail_c                        
    ,P_TAB_TYPE(i).MmrlHonoreePostal_c                       
    ,P_TAB_TYPE(i).MmrlHonoreeStateProvince_c                
    ,P_TAB_TYPE(i).ShipToAddress1_c                          
    ,P_TAB_TYPE(i).ShipToAddress2_c                          
    ,P_TAB_TYPE(i).ShipToAddress3_c                          
    ,P_TAB_TYPE(i).ShipToCity_c                              
    ,P_TAB_TYPE(i).ShipToCountry_c                           
    ,P_TAB_TYPE(i).ShipToName_c                              
    ,P_TAB_TYPE(i).ShipToOfficer_c                           
    ,P_TAB_TYPE(i).ShipToPhone_c                             
    ,P_TAB_TYPE(i).ShipToPostal_c                            
    ,P_TAB_TYPE(i).ShipToStateProvence_c                     
    ,P_TAB_TYPE(i).CrystalCertifName_c                       
    ,P_TAB_TYPE(i).PresentationDate_c                        
    ,P_TAB_TYPE(i).MmrlHonoreeAddress3_c                     
    ,P_TAB_TYPE(i).NameOnLetter_c                            
    ,P_TAB_TYPE(i).SendRecognition_c                         
    ,P_TAB_TYPE(i).AdminFeePercent_c                         
    ,P_TAB_TYPE(i).RecipientIDType_c                         
    ,P_TAB_TYPE(i).DonorEmail_c                              
    ,P_TAB_TYPE(i).DonorCountry_c                            
    ,P_TAB_TYPE(i).LineType_c                                
    ,P_TAB_TYPE(i).ErrorStatisticsCode_c                     
    ,P_TAB_TYPE(i).ErrorStatisticsQty_c                      
    ,P_TAB_TYPE(i).ReceiptFrequency_c                        
    ,P_TAB_TYPE(i).PYCalculation_c                           
    ,P_TAB_TYPE(i).ShipToEmail_c                             
    ,P_TAB_TYPE(i).ShipToStateProvince1_c                    
    ,P_TAB_TYPE(i).ConvertedTransactionID_c                  
    ,P_TAB_TYPE(i).SourceName_c                              
    ,P_TAB_TYPE(i).CampaignIdentifier_c                      
    ,P_TAB_TYPE(i).ChunkNumber_c                             
    ,P_TAB_TYPE(i).GLStatus_c                                
    ,P_TAB_TYPE(i).TaxReceiptInProgress_c                    
    ,P_TAB_TYPE(i).AcknowledgementSent_c                     
    ,P_TAB_TYPE(i).AcknowledgementSentDate_c                 
    ,P_TAB_TYPE(i).CreatedBy                                   
    ,P_TAB_TYPE(i).CreationDate                                 
    ,P_TAB_TYPE(i).LastUpdatedBy                                
    ,P_TAB_TYPE(i).LastUpdateDate                                      
	);

	x_status:='SUCCESS';

	EXCEPTION
		WHEN OTHERS
        THEN
		  x_status := 'Error occured While inserting into Stage Table - Error :' || SQLERRM;
		  x_error_msg := 'ERROR';
	END;
	COMMIT;  
    EXCEPTION
      WHEN OTHERS
      THEN
            x_status := 'Exception raised for prc - insert_into_stg_tbl_prc :' || SQLERRM;
			x_error_msg := 'ERROR';
    END;

	PROCEDURE ics_async_call1(  p_file_id IN varchar2
							  , p_flow_id  IN varchar2
							  , p_batch_limit IN number
							  , p_job_name OUT varchar2)
	IS

	v_plSqlBlock varchar2(500);
	l_job_name varchar2(1000);

	BEGIN    
	 v_plSqlBlock  :='BEGIN ' || 'RTY_CX_PAYMENTS_REVERSAL_IMPORT.validate_pmt_detail_data('||p_file_id||','||p_flow_id||','||p_batch_limit||'); END;';

		enable_logs(v_plSqlBlock);

		l_job_name := 'RTYCXJOB_'||p_file_id||'_'||p_flow_id;
		  dbms_scheduler.create_job
						(  
						  job_name      =>  l_job_name,  
						  job_type      =>  'PLSQL_BLOCK',  
						  job_action    =>  v_plSqlBlock,  
						  start_date    =>  systimestamp,--sysdate,  
						  enabled       =>  TRUE,  
						  auto_drop     =>  TRUE,  
						  comments      =>  'ICS1_AR_JOB');

	 -- BEGIN DBMS_SCHEDULER.run_job(l_job_name,false); END;
	 dbms_scheduler.enable(l_job_name);
	commit;
	  p_job_name := l_job_name;
	  EXCEPTION
	  WHEN OTHERS THEN
		NULL;
	END;

	--Validations 
	PROCEDURE validate_pmt_detail_data (
											p_file_id IN  VARCHAR2,
											p_flow_id IN  VARCHAR2,
											p_batch_limit IN NUMBER
											--p_status  OUT VARCHAR2,
											--p_err_msg OUT VARCHAR2
										) 
	AS

	p_status   VARCHAR2(20);
	p_err_msg  VARCHAR2(2000);
	--variable declaration
	l_alias_id_c    			    VARCHAR2(100);
	l_PartyId     				    VARCHAR2(100);
	l_DonorDistrictName     	    VARCHAR2(100);
	l_creditorganizationid          VARCHAR2(100);
	l_RecipientID                   VARCHAR2(100);
	l_commitment_id                 VARCHAR2(100);
	l_TrackedGiftID                 VARCHAR2(100);
	l_Grants_Id_c                   VARCHAR2(100);
	l_pledge_id                     VARCHAR2(100);
	l_detall_validation_flag        VARCHAR2(10);
	l_err_code  					VARCHAR2(20);
	l_detail_err_msg    			VARCHAR2(2000);




        CURSOR paymentuploaddtl_cur
		IS
        SELECT
            *
        FROM
            RTY_CX_PMT_REVERSAL_STG_TBL
        WHERE
		file_id = p_file_id
		AND flow_id = p_flow_id
		AND status IN ('NEW','PE','PS');


	TYPE paymentuploaddtl_cur_tab IS TABLE OF paymentuploaddtl_cur%ROWTYPE INDEX BY BINARY_INTEGER;

	lt_paymentuploaddtl_cur_tab paymentuploaddtl_cur_tab;

	BEGIN 

	FOR pmtdtlrec IN paymentuploaddtl_cur LOOP

	l_detall_validation_flag 		   := 'N';
	l_detail_err_msg                   := null;
	l_alias_id_c    		           := null;	    
	l_PartyId     				       := null;	
	l_DonorDistrictName     	       := null;	
	l_creditorganizationid             := null;	
	l_RecipientID                      := null;	
	l_commitment_id                    := null;	
	l_TrackedGiftID                    := null;	
	l_Grants_Id_c                      := null;	
	l_pledge_id                        := null;	


	--Alias validation for Reversal Line
	IF pmtdtlrec.Alias_Id_c IS NOT NULL THEN

	BEGIN
		SELECT DISTINCT
			id             
		INTO
			l_alias_id_c
		FROM
			rty_cx_b_alias_tbl
		WHERE
			id = pmtdtlrec.Alias_Id_c  --300000052233608
			and active_c = 'Y'
			AND rownum = 1;

	EXCEPTION
		WHEN OTHERS THEN
		enable_logs('Track40.1');
		l_detall_validation_flag := 'E';
		l_detail_err_msg := l_detail_err_msg||'Alias validation Failed - ';
		l_err_code := 'Err-PD-01';

	END;
	END IF;


     --Donor Id validation for Reversal Line
	IF pmtdtlrec.DonorName_Id_c IS NOT NULL THEN
		   BEGIN
			SELECT DISTINCT PartyId
			INTO l_PartyId
			FROM rty_cx_b_accounts_tbl
			WHERE PartyId= pmtdtlrec.DonorName_Id_c  --300000083396088
			AND ROWNUM = 1;

			EXCEPTION
			WHEN OTHERS THEN
			 NULL;
			enable_logs('Track40.2');
			l_detall_validation_flag := 'E';
			 l_detail_err_msg := l_detail_err_msg||'-Donor value does not exist-';
			 l_err_code := 'Err-PD-02';
			END;
	END IF; --End: get donor info

    --DonorDistrict validation for Reversal Line
	IF pmtdtlrec.DonorDistrict_c IS NOT NULL AND pmtdtlrec.DonorDistrict_c!='RIHQ' THEN

		BEGIN

		select distinct SUBJECTPARTYPEOPARTYNAME 
		INTO l_DonorDistrictName                    
		from rty_cx_b_relationship_tbl
		where 1=1
		and SUBJECTPARTYPEOPARTYNAME = pmtdtlrec.DonorDistrict_c  --District~3060~3060
		and relationshipcode         = 'District'
		and RELTYPESTATUS            = 'A'
		and sysdate between to_date(relationshipstartdate,'YYYY-MM-DD') and to_date(relationshipenddate,'YYYY-MM-DD')
		;
		EXCEPTION
		WHEN OTHERS THEN

		l_detall_validation_flag := 'E';
		l_detail_err_msg := l_detail_err_msg||'-l_DonorDistrictName Validation failed - ';
		l_err_code := 'Err-PD-02';

		END;

	END IF;

	-- Credit Org validation for Reversal Line 
	IF pmtdtlrec.CreditOrg_Id_c IS NOT NULL THEN

		BEGIN
			SELECT DISTINCT PartyId
			INTO l_creditorganizationid
			FROM rty_cx_b_accounts_tbl
			WHERE PartyId = pmtdtlrec.CreditOrg_Id_c  --300000097956733
			AND ROWNUM = 1;

		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		enable_logs('Track40.3');
		l_detall_validation_flag := 'E';
		l_detail_err_msg := l_detail_err_msg||'-CreditOrg_Id_c value does not exist-';
		l_err_code := 'Err-PD-03';

		END;

	END IF;

	-- Receipient validation for Reversal Line 
	IF pmtdtlrec.recipientid_c IS NOT NULL THEN

		BEGIN
			SELECT DISTINCT PartyId
			INTO l_RecipientID
			FROM RTY_CX_b_ACCOUNTS_TBL
			WHERE PartyId = pmtdtlrec.RecipientID_c
			AND rownum = 1;

		EXCEPTION
		WHEN OTHERS THEN
		 NULL;

		l_detall_validation_flag := 'E';
		l_detail_err_msg := l_detail_err_msg||'-Receipient value does not exist-';
		 l_err_code := 'Err-PD-05';

		END;
	END IF;

	-- Commitment Id validation for Reversal Line
	IF pmtdtlrec.CommitmentID_c IS NOT NULL THEN  
	BEGIN
		SELECT id
		INTO l_commitment_id
		FROM RTY_CX_B_Commitments_tbl
		WHERE id = pmtdtlrec.CommitmentID_c
		AND ROWNUM = 1;

		enable_logs('Detail proc Track1 CommitmentID_c--> '||l_commitment_id);

	EXCEPTION
	WHEN OTHERS THEN
			l_detall_validation_flag := 'Y';
			l_detail_err_msg := l_detail_err_msg||'-CommitmentID_c: '||pmtdtlrec.CommitmentID_c|| ' - Not Available - '; 

	END;		
	END IF;

	-- Commitment Id validation for Reversal Line
	IF pmtdtlrec.trackedgiftid_c IS NOT NULL THEN

	BEGIN

		SELECT DISTINCT Id
		INTO l_TrackedGiftID
		FROM rty_cx_b_tracked_tbl
		WHERE 1=1
		AND Id        = pmtdtlrec.TrackedGiftID_Id_c    --300000436400588
		AND STATUSID_C        IN ('ACTIVE','PENDING') 
		AND ROWNUM = 1;

	EXCEPTION 
	WHEN OTHERS THEN
			enable_logs('Track40.7');
			l_detall_validation_flag := 'E';
			l_detail_err_msg := l_detail_err_msg||'-Exception returned while deriving trackedgiftid_c value - ';
			l_err_code := 'Err-PD-06';
	END;

	END IF;

	-- Grant Id validation for Reversal Line
	IF pmtdtlrec.Grants_Id_c IS NOT NULL THEN

		BEGIN
		SELECT DISTINCT Id
			INTO l_Grants_Id_c
			FROM rty_cx_b_grants_tbl
			WHERE Id = pmtdtlrec.Grants_Id_c  --300000660065515
			AND ROWNUM = 1;
		EXCEPTION
		WHEN OTHERS THEN
			l_detall_validation_flag := 'E';
			l_detail_err_msg := l_detail_err_msg||'Grants_Id_c validation failed - ';
		END;

	END IF;


	IF l_detall_validation_flag = 'E' THEN

		UPDATE RTY_CX_PMT_REVERSAL_STG_TBL
		SET
		status = 'E', 
		Error_msg =  l_detail_err_msg
		WHERE 1=1
		and status = pmtdtlrec.status  --NEW FS-772
		and ctid = pmtdtlrec.ctid
		and file_id = p_file_id
		and flow_id = p_flow_id;  

	COMMIT;

	ELSE

		UPDATE RTY_CX_PMT_REVERSAL_STG_TBL
		SET
		status = 'V' --final payment create
		WHERE ctid = pmtdtlrec.ctid
		and status = pmtdtlrec.status --'NEW'  --FS-772
		and file_id = p_file_id
		and flow_id = p_flow_id;  

	COMMIT;

	END IF;               

	END LOOP;


	split_batch (p_file_id ,p_flow_id,'50');


    p_status    := '1';
	p_err_msg   := 'Success';

    EXCEPTION
        WHEN OTHERS THEN
	    p_status    := '2';
	    p_err_msg   := 'Error - '||SQLERRM;
    END;

   PROCEDURE split_batch (
							p_file_id    IN   VARCHAR2,
							p_flow_id    IN   VARCHAR2,
							p_batch_limit IN  NUMBER
						) 
	AS

        CURSOR c1 IS
        SELECT
            ROWID,
            x.batch_id
        FROM
            RTY_CX_PMT_REVERSAL_STG_TBL x
        WHERE
                file_id = p_file_id
            AND flow_id = p_flow_id
			AND status  = 'V';

        l_batch_id      NUMBER := 0;
        l_batch_limit   NUMBER := 0;

		TYPE batch_rec_tab IS TABLE OF c1%rowtype;

        l_batch_rec_tab batch_rec_tab;

    BEGIN
        l_batch_limit := p_batch_limit;
        OPEN c1;
        LOOP
            FETCH c1
            BULK COLLECT INTO l_batch_rec_tab LIMIT l_batch_limit;
            l_batch_id := l_batch_id + 1;
            EXIT WHEN l_batch_rec_tab.count = 0;
            FORALL i IN 1..l_batch_rec_tab.count
                UPDATE RTY_CX_PMT_REVERSAL_STG_TBL
                SET
                    batch_id = l_batch_id
                WHERE
                    ROWID = l_batch_rec_tab(i).rowid;

            COMMIT;
        END LOOP;

        CLOSE c1;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;


	PROCEDURE update_na_status_prc (
									p_file_id IN  VARCHAR2,
									p_flow_id IN  VARCHAR2,
									p_status  OUT VARCHAR2,
									p_err_msg OUT VARCHAR2
									) 
	IS 

	CURSOR update_status_cur
		IS
        SELECT
             OriginalPaymentDetailId_c
        FROM
            RTY_CX_PMT_REVERSAL_STG_TBL
        WHERE
		file_id      = p_file_id
		AND flow_id  = p_flow_id
		AND status   = 'NEW'
		AND LineType_c ='CORRECTED_LINE'
		;



	TYPE update_status_cur_tab IS TABLE OF update_status_cur%ROWTYPE INDEX BY BINARY_INTEGER;

	lt_update_status_cur_tab   update_status_cur_tab;

    BEGIN

	BEGIN

		UPDATE RTY_CX_PMT_REVERSAL_STG_TBL
		   SET status      = 'NA' -- CT lines payment create
		     , Error_msg   = '- Ignoring Reversal line - '
		WHERE 1=1
		 -- AND OriginalPaymentDetailId_c = lt_update_status_cur_tab(i).OriginalPaymentDetailId_c
		  AND status     = 'NEW'
		  AND LineType_c ='REVERSAL_LINE'
		  AND file_id    = p_file_id
		  AND flow_id    = p_flow_id
		;  

		COMMIT;

	END;

	OPEN update_status_cur;
	FETCH update_status_cur BULK COLLECT INTO lt_update_status_cur_tab;
	CLOSE update_status_cur;


	FORALL i IN lt_update_status_cur_tab.FIRST .. lt_update_status_cur_tab.LAST SAVE EXCEPTIONS

		UPDATE RTY_CX_PMT_REVERSAL_STG_TBL
		   SET  status      = 'NA' -- CT lines payment create
			  , Error_msg   = '- Ignoring it as it has corrected CT Line - '
		WHERE 1=1
		 --AND ctid = lt_update_status_cur_tab(i).ctid
		  AND RecordName = lt_update_status_cur_tab(i).OriginalPaymentDetailId_c
		  AND status = 'NEW'
		  AND LineType_c ='ORIGINAL_LINE'
		  AND file_id = p_file_id
		  AND flow_id = p_flow_id
		  ;  

	COMMIT;
	  p_status   := '1';
	  p_err_msg  := 'Success';
	EXCEPTION
	  WHEN OTHERS THEN 
	  p_status   := '2';
	  p_err_msg  := 'Error-'||SQLERRM;

	END;


	PROCEDURE validate_pledge_data_prc (
										p_file_id IN  VARCHAR2,
										p_flow_id IN  VARCHAR2,
										p_status  OUT VARCHAR2,
										p_err_msg OUT VARCHAR2
										) 
	IS 
	l_pledge_id  VARCHAR2(50);
	l_detail_err_msg         VARCHAR2(2000);
	l_detall_validation_flag VARCHAR2(5);

	CURSOR pledge_validation_cur
	IS
	SELECT
	PledgeID_Id_c, ctid
	FROM
	RTY_CX_PMT_REVERSAL_STG_TBL
	WHERE
	file_id = p_file_id
	AND flow_id = p_flow_id
	AND PledgeID_Id_c IS NOT NULL    --FS-772
	AND status IN ('NEW');           --FS-772

	BEGIN 

	FOR pledge_validation_rec IN pledge_validation_cur LOOP

	l_detail_err_msg         := NULL;
	l_detall_validation_flag := 'N';
	l_pledge_id              := null;	


	IF pledge_validation_rec.PledgeID_Id_c IS NOT NULL THEN 

		BEGIN

			SELECT
			id               
			INTO
			l_pledge_id        
			FROM
			rty_cx_b_pledges_tbl
			WHERE 1= 1
			AND id             = pledge_validation_rec.PledgeID_Id_c  --300000722326565
			AND pledgestatus_c = 'OPEN'
			AND pledgeclosedate_c IS NULL
			AND  ROWNUM = 1;

		EXCEPTION 
		WHEN OTHERS THEN 
			l_detall_validation_flag := 'E';
			l_detail_err_msg := 'PledgeID_Id_c validation failed for - '||pledge_validation_rec.PledgeID_Id_c ;
		END;


	END IF;


	IF l_detall_validation_flag = 'E' THEN

		UPDATE RTY_CX_PMT_REVERSAL_STG_TBL
		SET
		status = 'PE', 
		Error_msg =  l_detail_err_msg
		WHERE 1=1
		and status <> 'NA'
		and ctid = pledge_validation_rec.ctid   
		and file_id = p_file_id
		and flow_id = p_flow_id;  

	COMMIT;

	ELSE

		UPDATE RTY_CX_PMT_REVERSAL_STG_TBL
		SET
		status = 'PS' --final payment create
		WHERE ctid = pledge_validation_rec.ctid
		and status <> 'NA'
		and file_id = p_file_id
		and flow_id = p_flow_id;  

	COMMIT;

	END IF;               

	END LOOP;

	  p_status    := '1';
	  p_err_msg   := 'Success';

	EXCEPTION
	WHEN OTHERS THEN 
	  p_status    := '2';
	  p_err_msg   := 'Error - '||SQLERRM;
	END;

	PROCEDURE update_PY_status_prc (
									p_file_id  IN  VARCHAR2,
									p_flow_id  IN  VARCHAR2,
									p_pystatus IN  VARCHAR2,
									p_revline_count OUT VARCHAR2,
									p_totline_count	OUT VARCHAR2,								
									p_status  OUT VARCHAR2,
									p_err_msg OUT VARCHAR2
									) 
	IS 

	lv_revline_count VARCHAR2(10):=null;

	CURSOR update_pystatus_cur
	IS
	SELECT
		 pyid, ctid, file_id,flow_id, status
	FROM
		RTY_CX_PMT_REVERSAL_STG_TBL
	WHERE
	file_id      = p_file_id
	AND flow_id  = p_flow_id
	AND status   = 'V'
	AND LineType_c ='ORIGINAL_LINE'
	;

	TYPE update_pystatus_cur_tab IS TABLE OF update_pystatus_cur%ROWTYPE INDEX BY BINARY_INTEGER;
	lt_update_pystatus_cur_tab   update_pystatus_cur_tab;

	BEGIN 
    BEGIN

	OPEN update_pystatus_cur;
	FETCH update_pystatus_cur BULK COLLECT INTO lt_update_pystatus_cur_tab;
	CLOSE update_pystatus_cur;


	FORALL i IN lt_update_pystatus_cur_tab.FIRST .. lt_update_pystatus_cur_tab.LAST SAVE EXCEPTIONS

		UPDATE RTY_CX_PMT_REVERSAL_STG_TBL
		   SET  Status  = p_pystatus
		WHERE 1=1
		  AND pyid       = lt_update_pystatus_cur_tab(i).pyid
		  AND ctid       = lt_update_pystatus_cur_tab(i).ctid
		  AND status     = lt_update_pystatus_cur_tab(i).status
		  AND LineType_c ='ORIGINAL_LINE'
		  AND file_id    = lt_update_pystatus_cur_tab(i).file_id
		  AND flow_id    = lt_update_pystatus_cur_tab(i).flow_id
		  ;  

	COMMIT;

	END;


	SELECT COUNT(1) 
	  INTO lv_revline_count
	  FROM RTY_CX_PMT_REVERSAL_STG_TBL
	WHERE status     = p_pystatus
	  AND LineType_c ='ORIGINAL_LINE'
	  AND file_id    = p_file_id
	  AND flow_id    = p_flow_id
	  ;

	UPDATE RTY_CX_PMT_REVERSAL_TRACKING_TBL
	   SET flow_status = 'COMPLETED'
	     , TOTALLINECOUNT_C         = lv_revline_count
		 , TOTALREVERSALLINECOUNT_C = lv_revline_count
	 WHERE file_id    = p_file_id
	  AND flow_id    = p_flow_id
	 ;

	 COMMIT;

	 p_revline_count := lv_revline_count;
	 p_totline_count := lv_revline_count;


	EXCEPTION
	WHEN OTHERS THEN 
	  p_status    := '2';
	  p_err_msg   := 'Error - '||SQLERRM;
	END;
END;
/


CREATE OR REPLACE PACKAGE BODY rty_i027_atp_pkg AS
/***************************************************************************************************
PACKAGE:          RTY_I027_ATP_PKG
Create Date:        2023-08-01
Author:             Rakesh Gurrapu
Description:        Process NETFORUM bulk data i.e. Object storage --> ATP --> CX
                    Process NOI and NOU bulk errors for Individual and Affiliations
                    This inteegation proess only NETFORUM Individual and Affiliations
---------------------------------------------------------------------------------------------------
Version     Name        Date            Comments
1.0         Rakesh G    01-FEB-2024     Initial Version 
1.1         Rakesh G    01-FEB-2024     Affiliation Fix 
1.2         Sravan      14-Nov-2024     Annonymous_c,DeceasedFlag_c, should passY/N instead of true/false
1.3         Vamsi       19-Mar-2025     FS-833 retry_count<=3 logic added
1.4         Vamsi       04-Apr-2025     Added logic to restrict record count to 50k max as Appdrive has limitation of 6hrs
										--FS-XXXX Mass Termination
***************************************************************************************************/

 PROCEDURE get_file_name (
        x_file_name OUT VARCHAR2,
        x_file_status OUT VARCHAR2
    ) AS
        l_days_cnt  NUMBER := 0;
        l_max_date  DATE;
        l_file_name VARCHAR2(1000);
    BEGIN

        BEGIN
        SELECT
            round(sysdate - from_date)
        INTO l_days_cnt
        FROM
            rty_i027_error_log_tbl
        WHERE 1=1
        --AND  to_date(sysdate,'DD-MON-YY') between to_date(from_date,'DD-MON-YY') and to_date(file_to_date,'DD-MON-YY')
        AND  from_date = (SELECT
                                MAX(from_date)
                            FROM
                                rty_i027_error_log_tbl
                                );                    
        EXCEPTION WHEN OTHERS THEN
            l_days_cnt := -1;
            dbms_output.put_line('track1--> ');
        END;

        dbms_output.put_line('l_days_cnt--> '||l_days_cnt);

        IF l_days_cnt > 7 OR l_days_cnt = -1 THEN
            INSERT INTO rty_i027_error_log_tbl (from_date,file_to_date,file_name,creation_date)
            VALUES (
                sysdate, --from_date
                sysdate + 6, --to_date
                'I027_Error_Log_' 
                || to_char(sysdate , 'DDMON') 
                || '_'
                || to_char(sysdate + 6, 'DDMON')
                || '_'
                || to_char(sysdate, 'YYYY')
                ||'.csv', --filename
                sysdate
            );

            COMMIT;
            x_file_status := 'NEW';
            dbms_output.put_line('x_file_status--> '||x_file_status);
        ELSE
            x_file_status := 'OLD';
        END IF;

        SELECT
            file_name
        INTO l_file_name
        FROM
            rty_i027_error_log_tbl
        WHERE
            from_date = (
                SELECT
                    MAX(from_date)
                FROM
                    rty_i027_error_log_tbl
            );

        x_file_name := l_file_name;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
    END;

procedure update_batch_route (p_batch_limit IN NUMBER,
							  p_retry_limit IN NUMBER)
as
l_rec_count NUMBER;
begin

	delete rtyintg.rty_i027_customer_data_tbl
	where ra0_objectname in ('IndividualSubscription','OrganizationSubscription');

	COMMIT;

 --updating status N records to process via import route if batch limit is more
	 begin

		select count(1)
		into l_rec_count
		from rtyintg.rty_i027_customer_data_tbl
		where ra0_objectname IN ('Individual','IndividualAffiliation')
		 and retry_count <=3     --FS-833
		and process_mode IS null
		and status  IN ('N','E');

		IF p_batch_limit <= l_rec_count THEN

			 Update rtyintg.rty_i027_customer_data_tbl nfacct
			 set process_mode = 'IMPORT_ROUTE'
			 where status  IN ('N','E')
			 and ra0_objectname IN ('Individual','IndividualAffiliation')
			 and retry_count <=3  --FS-833
			 and process_mode is null
              and ra0_id in (select min(ra0_id)
							from rtyintg.rty_i027_customer_data_tbl
							where 1=1
							and nfid = nfacct.nfid
							and status IN ('N','E'));
			 COMMIT;

		--update status to HOLD(H) until IMPORT_ROUTE record will process for the same NFID
		Update rtyintg.rty_i027_customer_data_tbl nfacct
			 set status = 'H'
			 where status  IN ('N','E')
			 and ra0_objectname IN ('Individual','IndividualAffiliation')
			 --and retry_count <=3
			 and process_mode is null
              and ra0_id not in (select min(ra0_id)
							from rtyintg.rty_i027_customer_data_tbl
							where 1=1
							and nfid = nfacct.nfid
							and status IN ('N','E'));

		COMMIT;				
		END IF;

		--update status to N(NEW) when min of IMPORT_ROUTE record processed for that NFID
		--so that, remaining NFID's are processed manually using I027B
		Update rtyintg.rty_i027_customer_data_tbl nfacct
			 set status = 'N'
			 where status  = 'H'
			 and ra0_objectname IN ('Individual','IndividualAffiliation')
			 --and retry_count <=3
			 and process_mode is null
              and ra0_id not in (select min(ra0_id)
							from rtyintg.rty_i027_customer_data_tbl
							where 1=1
							and nfid = nfacct.nfid
							and process_mode = 'IMPORT_ROUTE'
							and status IN ('P','E'));	
		COMMIT;

	 exception when others then
		dbms_output.put_line('whileinserting error --> '||sqlerrm);
	 end;

	  l_rec_count := 0;
	 --updating status E records to process via import route if batch limit is more
	 begin

		select count(1)
		into l_rec_count
		from rtyintg.rty_i027_customer_data_tbl
		where ra0_objectname IN ('Individual','IndividualAffiliation')
		and process_mode IS null
		and retry_count <=3  --FS-833
		and status  = 'E';

		IF p_batch_limit >= l_rec_count THEN

			 Update rtyintg.rty_i027_customer_data_tbl nfacct
			 set process_mode = 'IMPORT_ROUTE'
			 where status = 'E'
			 and ra0_objectname IN ('Individual','IndividualAffiliation')
			 and process_mode is null 
			 and retry_count <=3  --FS-833
             and ra0_id in (select min(ra0_id)
							from rtyintg.rty_i027_customer_data_tbl
							where 1=1
							and nfid = nfacct.nfid
							and status IN ('N','E'));
			 COMMIT;
		END IF;

	 exception when others then
		dbms_output.put_line('whileinserting error --> '||sqlerrm);
		end;


	l_rec_count := 0;
--updating status E where import route errors are less then Import route limit
	 begin

		select count(1)
		into l_rec_count
		from rtyintg.rty_i027_customer_data_tbl
		where ra0_objectname IN ('Individual','IndividualAffiliation')
		and process_mode IS not null
		and retry_count <=3  --FS-833
		and status  = ('I');

		IF l_rec_count <= p_batch_limit THEN   --1000<=500

			 Update rtyintg.rty_i027_customer_data_tbl
			 set process_mode = null,
				 status = decode(status,'I','N')
			 where status  = 'I'
			 and ra0_objectname IN ('Individual','IndividualAffiliation')
			 and retry_count <=3  --FS-833
			 and process_mode is not null;
			 COMMIT;
		END IF;

	 exception when others then
		dbms_output.put_line('whileinserting error --> '||sqlerrm);
	 end;

	 l_rec_count := 0;
	 --updating status E records to process via import route if batch limit is more
	 begin

		select count(1)
		into l_rec_count
		from rtyintg.rty_i027_customer_data_tbl
		where ra0_objectname IN ('Individual','IndividualAffiliation')
		and process_mode IS not null
		and retry_count <=3  --FS-833
		and status  = 'E';

		IF l_rec_count <= p_batch_limit THEN   --200<=500

			 Update rtyintg.rty_i027_customer_data_tbl
			 set process_mode = null
			 where status = 'E'
			 and ra0_objectname IN ('Individual','IndividualAffiliation')
			 and retry_count <=3  --FS-833
			 and process_mode is not null;
			 COMMIT;
		END IF;

	 exception when others then
		dbms_output.put_line('whileinserting error --> '||sqlerrm);
		end;	


	/*update rtyintg.rty_i027_customer_data_tbl
	set status = 'O' --obseloute
	where retry_count >= p_retry_limit;
	COMMIT;*/


exception when others then
		dbms_output.put_line('whileinserting error --> '||sqlerrm);
end;	

function get_sts_count (p_batch_id number, p_object_name varchar2,p_column_name varchar2)
return varchar2
as
l_count number;
l_stmt varchar2(10000);
begin

l_stmt := 'select count(1) 
            from rtyintg.rty_i027_customer_data_tbl
             WHERE '||p_column_name||' = ''V''
             AND batch_id = '
             ||''''||p_batch_id||''''||
             ' AND ra0_objectname = ''Individual''
                 AND account_update_status = ''P''
                AND customerid IS NOT NULL'
                ;
         execute immediate l_stmt  INTO l_count;

--return l_stmt;
return l_count;
end; 

procedure log_info(p_log_Y_N VARCHAR2,p_flow_id number, message varchar2)
as
PRAGMA AUTONOMOUS_TRANSACTION;
begin

IF p_log_Y_N = 'Yes' THEN

 insert into rty_i027_track_tbl(batch_id,errmsg) values(p_flow_id,message);
 commit;
 END IF;

end;

PROCEDURE update_batch_err (
        p_flow_id NUMBER,
		p_credentail_name IN VARCHAR2,
		p_batch_id              NUMBER,
        p_status VARCHAR2,
        p_object_name           VARCHAR2,
        p_object_hierarchy           VARCHAR2,
        p_namespace VARCHAR2,
		p_bucket VARCHAR2,
        p_debug VARCHAR2
    ) AS
        CURSOR batch_errors IS
        SELECT
            *
        FROM
            rty_i027_import_manager_err_tbl
        WHERE
                batch_id = p_batch_id
            AND objecttype = p_object_name;

		CURSOR creditorgnullrec
		IS
		SELECT substr(objectpartypeopartynumber,3) nfid,
				relationshiprecid,
				relationshipstartdate
			FROM
				rty_cx_b_relationship_tbl rrt
			WHERE 1 = 1
			AND relationshipcode = 'Credit Org'
			AND relationshiptype = 'Credit Org'
			AND reltypestatus = 'A'
			and relationshipenddate = '4712-12-31'
			AND objectpartypeopartynumber IN 
											(SELECT
											customertype|| '-'||customerid 
											FROM
											rtyintg.rty_i027_customer_data_tbl
											WHERE batch_id = p_batch_id
											AND ra0_objectname = 'Individual'
											AND account_update_status = 'P'
											AND creditorgid IS NULL)
											;		

            l_sqlstmt varchar2(1000);
            l_update_column_name VARCHAR2(200);
            l_acc_upd_count  NUMBER;
            l_object_name VARCHAR2(100);
			l_credit_org_count NUMBER;
			l_acct_upd_relship_cnt NUMBER;
            l_error_message varchar2(1000);
			l_new_relship_count NUMBER;
			l_object_hierarchy VARCHAR2(1000);
			l_terminate_account_count NUMBER;

PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN

	l_object_hierarchy := UPPER(p_object_hierarchy);

    IF p_object_name = 'Individual' and l_object_hierarchy = 'INDIVIDUAL' THEN
        l_update_column_name := 'ACCOUNT_UPDATE_STATUS';
        l_object_name := 'Individual';
        --
    ELSIF p_object_name = 'Individual' and l_object_hierarchy = 'ACCOUNTUPDATERELSHIP' THEN
        l_update_column_name := 'ACC_UPD_REL_STATUS';
        l_object_name := 'Individual';
        --
   ELSIF p_object_name = 'Individual' and l_object_hierarchy = 'ACCOUNTENDRELSHIP' THEN
        l_update_column_name := 'ACC_UPD_END_REL_STATUS';
        l_object_name := 'Individual';
        --
     ELSIF p_object_name = 'Individual' and l_object_hierarchy = 'ACCOUNTDELETERELSHIP' THEN
        l_update_column_name := 'ACC_DELETE_REL_STATUS';
        l_object_name := 'Individual';
        --
	 ELSIF p_object_name = 'Individual' and l_object_hierarchy = 'ACCOUNTNEWRELSHIP' THEN
		l_update_column_name := 'ACCT_NEW_RELATIONSHIP_STATUS';
		l_object_name := 'Individual';
		--
	ELSIF p_object_name IN ('IndividualAffiliation') and l_object_hierarchy = 'AFFILIATIONCREATE' THEN
		l_update_column_name := 'AFFILIATION_CREATE_RELSHIP';
		l_object_name := 'IndividualAffiliation'; 

	ELSIF p_object_name IN ('IndividualAffiliation') and l_object_hierarchy = 'AFFILIATIONUPDATE' THEN
		l_update_column_name := 'AFFILIATION_UPDATE_RELSHIP';
		l_object_name := 'IndividualAffiliation'; 	

	ELSIF p_object_name IN ('Individual') and l_object_hierarchy = 'TERMINATEACCOUNT' THEN
		l_update_column_name := 'TERMINATION_ACCOUNT';
		l_object_name := 'IndividualAffiliation'; 		



    END IF;


    dbms_output.put_line('track1');
    dbms_output.put_line('p_status--> '||p_status);
        --UPDATE error records status against ACCOUNT_UPDATE
        IF p_status = 'E' THEN
            FOR err_rec IN batch_errors LOOP
			l_error_message := replace(err_rec.error_message,chr(39),'');
                   l_sqlstmt := 'Update rtyintg.rty_i027_customer_data_tbl set ' 
                                ||l_update_column_name||
                                ' = ''E'',
                                status = ''E'',error_message = '
                                ||''''||l_error_message||''''||
                                ', retry_count = retry_count + 1
                                 WHERE batch_id = '
                                ||p_batch_id||
                                ' AND batch_row_id = '
                                ||err_rec.file_record_number||
                                '  AND ra0_objectname = '
                                ||''''||l_object_name||''''
                                ;
              dbms_output.put_line('p_status--> '||l_sqlstmt);
              log_info(p_debug,p_batch_id,'l_sqlstmt_0 ErrMsg:  --> '||l_sqlstmt);
             execute immediate l_sqlstmt;

             l_sqlstmt := '';

                    COMMIT;

                    l_sqlstmt := 'Update rty_i027_import_manager_err_tbl set party_number= (select nfid from rtyintg.rty_i027_customer_data_tbl where batch_row_id= '
                                ||err_rec.file_record_number||
                                '  AND '
                                ||''''||l_update_column_name||''''||'= ''E'')
                                 WHERE batch_id = '
                                ||p_batch_id||
                                ' AND file_record_number = '
                                ||err_rec.file_record_number||
                                '  AND objecttype = '
                                ||''''||p_object_name||'''';
				log_info(p_debug,p_batch_id,'l_sqlstmt_1 partyNumberUpdate:  --> '||l_sqlstmt);
                  execute immediate l_sqlstmt;
                  l_sqlstmt := '';
            END LOOP;

        --UPDATE partial Success Records status
        l_sqlstmt := 'Update rtyintg.rty_i027_customer_data_tbl set ' 
                                ||l_update_column_name||
                                ' = ''P'',error_message = null WHERE batch_id = '
                                ||p_batch_id||
                                ' AND batch_row_id NOT IN (  SELECT file_record_number
                                FROM rty_i027_import_manager_err_tbl
                                WHERE batch_id = '
                                ||p_batch_id||
                                '  AND objecttype = '
                                ||''''||p_object_name||''''
                                ||')
                                 AND ra0_objectname = '
                                ||''''||l_object_name||''''
								||' AND '
								||l_update_column_name||
								' = ''V'''
                                ;
             log_info(p_debug,p_batch_id,'l_sqlstmt_2 partialupdate:  --> '||l_sqlstmt);
			 execute immediate l_sqlstmt;
            l_sqlstmt := '';

            --UPDATE all Success Records status
            ELSIF p_status = 'P' THEN
        --UPDATE Success Records status
               l_sqlstmt := 'Update rtyintg.rty_i027_customer_data_tbl set ' 
                                ||l_update_column_name||
                                ' = ''P'', error_message = null WHERE batch_id = '
                                ||p_batch_id||
                                ' AND ra0_objectname = '
                                ||''''||l_object_name||''''
								||' AND '
								||l_update_column_name||
								' = ''V''';
						log_info(p_debug,p_batch_id,'l_sqlstmt_3 SuccessUpdate:  --> '||l_sqlstmt);

                        execute immediate  l_sqlstmt;
                        l_sqlstmt := '';
commit;
            END IF;


           IF p_object_name = 'Individual' AND l_object_hierarchy = 'INDIVIDUAL'THEN

			FOR i in creditorgnullrec loop 

				update rty_i027_customer_data_tbl
				set status = 'I',
					ACC_UPD_REL_STATUS = 'V',
					relationship_end_date = to_char(to_date(sysdate),'YYYY-MM-DD'),
					relationship_start_date = i.relationshipstartdate,
					relationship_rec_id = i.relationshiprecid
				where batch_id = p_batch_id
				and ra0_objectname = 'Individual'
				and ra0_processed = 'NoU'
				and creditorgid is null
				and account_update_status = 'P'
				and nfid  = i.nfid;

			END LOOP;

			   BEGIN

				update rtyintg.rty_i027_customer_data_tbl
				set status = 'P'
				where batch_id = p_batch_id
				and ra0_objectname = p_object_name
				and creditorgid is null
				and ACC_UPD_REL_STATUS = 'N'
				and account_update_status = 'P';
				COMMIT;

				l_credit_org_count := 0;

				BEGIN
					SELECT COUNT(1)
					INTO l_credit_org_count
					from rtyintg.rty_i027_customer_data_tbl
					where batch_id = p_batch_id
					and creditorgid IS NOT NULL
					and account_update_status = 'P';

					IF l_credit_org_count <> 0 then

						update rtyintg.rty_i027_customer_data_tbl
						set status = 'I'
						where batch_id = p_batch_id
						and ra0_objectname = p_object_name
						and creditorgid is not null
						and account_update_status = 'P';
						COMMIT;



					END IF;

				EXCEPTION
				WHEN OTHERS THEN
					NULL;
				END;

			validate_credit_org_relationship(p_flow_id,p_credentail_name,p_batch_id,p_namespace,p_bucket,p_debug);

            EXCEPTION WHEN OTHERS THEN
                NULL;
            END;
         END IF;

		  IF p_object_name = 'Individual' and l_object_hierarchy = 'ACCOUNTUPDATERELSHIP' then

					SELECT COUNT(1)
					INTO l_acct_upd_relship_cnt
					from rtyintg.rty_i027_customer_data_tbl
					where batch_id = p_batch_id
					--and creditorgid IS NOT NULL
					and account_update_status = 'P'
					and ACC_UPD_REL_STATUS = 'P';

					IF l_acct_upd_relship_cnt <> 0 THEN		 
						update rtyintg.rty_i027_customer_data_tbl
						set status  = 'P'
						where batch_id = p_batch_id
						--and creditorgid IS NOT NULL
						and account_update_status = 'P'
						and ACC_UPD_REL_STATUS = 'P'
						and status = 'I';
					END IF;

					COMMIT;
		 END IF;

		  IF p_object_name = 'Individual' and l_object_hierarchy = 'ACCOUNTDELETERELSHIP' then

					SELECT COUNT(1)
					INTO l_acct_upd_relship_cnt
					from rtyintg.rty_i027_customer_data_tbl
					where batch_id = p_batch_id
					and creditorgid IS NOT NULL
					and account_update_status = 'P'
					and ACC_DELETE_REL_STATUS = 'P';

					IF l_acct_upd_relship_cnt <> 0 THEN		 
						update rtyintg.rty_i027_customer_data_tbl
						set status  = 'P'
						where batch_id = p_batch_id
						and creditorgid IS NOT NULL
						and account_update_status = 'P'
						and ACC_DELETE_REL_STATUS = 'P'
						and status = 'I';
					END IF;

					UPDATE rty_cx_b_relationship_tbl
					set reltypestatus = 'I'
					where relationshipcode = 'Credit Org'
					and relationshiptype = 'Credit Org'
					and subjectpartypeopartynumber IN(
														(select subject_party_number 
														from rtyintg.rty_i027_customer_data_tbl
														where batch_id = p_batch_id
														and creditorgid IS NOT NULL
														and account_update_status = 'P'
														and ACC_DELETE_REL_STATUS = 'P' 
														and delete_relationship_rec_id IS NOT NULL))
					and objectpartypeopartynumber IN(
														(select customertype||'-'||customerid
														from rtyintg.rty_i027_customer_data_tbl
														where batch_id = p_batch_id
														and creditorgid IS NOT NULL
														and account_update_status = 'P'
														and ACC_DELETE_REL_STATUS = 'P' 
														and delete_relationship_rec_id IS NOT NULL));                        


					COMMIT;
		 END IF;

		 IF p_object_name = 'Individual' and l_object_hierarchy = 'ACCOUNTENDRELSHIP' then

					SELECT COUNT(1)
					INTO l_acct_upd_relship_cnt
					from rtyintg.rty_i027_customer_data_tbl
					where batch_id = p_batch_id
					and creditorgid IS NOT NULL
					and account_update_status = 'P'
					and ACC_UPD_END_REL_STATUS = 'P';

					IF l_acct_upd_relship_cnt <> 0 THEN		 
						update rtyintg.rty_i027_customer_data_tbl
						set status  = 'P'
						where batch_id = p_batch_id
						and creditorgid IS NOT NULL
						and account_update_status = 'P'
						and ACC_UPD_END_REL_STATUS = 'P'
						and status = 'I';


					END IF;

					COMMIT;
		 END IF;

		 BEGIN

			UPDATE rtyintg.rty_i027_customer_data_tbl
            set ACCT_NEW_RELATIONSHIP_STATUS = 'E'
			where batch_id = p_batch_id
			and account_update_status = 'P'
			and ((ACC_DELETE_REL_STATUS = 'E' OR ACC_UPD_END_REL_STATUS = 'E') AND (ACCT_NEW_RELATIONSHIP_STATUS = 'I'));
            COMMIT;


			select count(1)
			INTO l_new_relship_count
			FROM rtyintg.rty_i027_customer_data_tbl
			where batch_id = p_batch_id
			and account_update_status = 'P'
			and (((ACC_DELETE_REL_STATUS = 'P' OR ACC_UPD_END_REL_STATUS = 'P') AND (ACCT_NEW_RELATIONSHIP_STATUS = 'I'))
				OR (ACC_DELETE_REL_STATUS = 'N' AND ACC_UPD_END_REL_STATUS = 'N' AND ACCT_NEW_RELATIONSHIP_STATUS = 'I') );

			 IF  l_new_relship_count <> 0 THEN
				create_credit_org_relship(p_flow_id,p_credentail_name ,p_batch_id,p_namespace,p_bucket,p_debug );
			 END IF;
		 EXCEPTION
         WHEN OTHERS THEN
		  NULL;
		 END;

		  IF p_object_name = 'Individual' and l_object_hierarchy = 'ACCOUNTNEWRELSHIP' then

					SELECT COUNT(1)
					INTO l_acct_upd_relship_cnt
					from rtyintg.rty_i027_customer_data_tbl
					where batch_id = p_batch_id
					and creditorgid IS NOT NULL
					and account_update_status = 'P'
					and ACCT_NEW_RELATIONSHIP_STATUS = 'P';

					IF l_acct_upd_relship_cnt <> 0 THEN		 
						update rtyintg.rty_i027_customer_data_tbl
						set status  = 'P'
						where batch_id = p_batch_id
						and creditorgid IS NOT NULL
						and account_update_status = 'P'
						and ACCT_NEW_RELATIONSHIP_STATUS = 'P'
						and status = 'I';
					END IF;

					COMMIT;
		 END IF;

		 IF p_object_name IN ('IndividualAffiliation') and l_object_hierarchy = 'AFFILIATIONCREATE' THEN

			update rtyintg.rty_i027_customer_data_tbl
			set status = 'P'
			where status  = 'I'
			and batch_id = p_batch_id
			and AFFILIATION_CREATE_RELSHIP = 'P';
			COMMIT;

		 END IF;

		 IF p_object_name IN ('IndividualAffiliation') and l_object_hierarchy = 'AFFILIATIONUPDATE' THEN

			update rtyintg.rty_i027_customer_data_tbl
			set status = 'P',
			TERMINATION_ACCOUNT = 'V'
			where status  = 'I'
			and batch_id = p_batch_id
			and AFFILIATION_UPDATE_RELSHIP = 'P';
			COMMIT;

		 END IF;

    dbms_output.put_line('terminate track1');
		begin
			select count(1)
			into l_terminate_account_count
			from rtyintg.rty_i027_customer_data_tbl
			where status  = 'P'
			and batch_id = p_batch_id
			and AFFILIATION_UPDATE_RELSHIP = 'P'
			and termination_account = 'V';

			IF l_terminate_account_count <> 0 then
 dbms_output.put_line('terminate track2');
				terminate_account(p_flow_id ,
									 p_credentail_name ,
									 p_batch_id ,
									 p_namespace ,
									 p_bucket,
                                     p_debug);

			END IF;

		END;


COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
dbms_output.put_line(sqlerrm);
populate_runtime_error(null,p_batch_id, 'Error at procedure update_batch_err : '||substr(sqlerrm,500));
NULL;
END;


    PROCEDURE update_batch (
        p_flow_id        IN NUMBER,
        p_import_id      VARCHAR2,
        p_ucm_content_id VARCHAR2,
        p_object_name    VARCHAR2,
        p_batch_id       NUMBER,
        p_batch_flow_id  NUMBER
    ) AS
    BEGIN
        UPDATE rtyintg.rty_i027_customer_data_tbl
        SET
            import_activity_id = p_import_id,
            ucm_content_id = p_ucm_content_id
        WHERE
                account_update_status = 'N'
            AND batch_id = p_batch_id
            AND ra0_objectname = p_object_name;
           --AND ra0_objectname = p_object_name
            --AND batch_flow_id = p_batch_flow_id;

    END;

	  PROCEDURE validate_customer_data (
        p_flow_id     IN NUMBER,
		p_debug IN VARCHAR2
    ) AS

	cursor get_cust_nfid
	is
	select nfidtbl.partynumber,
		   nfidtbl.EXTNATTRIBUTECHAR002
	from rtyintg.rty_i027_customer_data_tbl nftbl,
	RTY_CX_B_PARTY_NFID_TBL nfidtbl
	where UPPER(nftbl.individualkey) = UPPER(nfidtbl.EXTNATTRIBUTECHAR002)
	--and nftbl.status IN ('N','E')    --FS-XXXX
	and nftbl.status ='I'              --FS-XXXX
	and nftbl.file_name like '%.json'  --FS-XXXX
    and retry_count<=3  --FS-833
	and nftbl.flow_id  = p_flow_id
    ; --status ='I' and file_name like '%.json' --Vamsi 

	cursor get_creditorg_nfid
	is
	select nfidtbl.partynumber,
		   nfidtbl.EXTNATTRIBUTECHAR002
	from rtyintg.rty_i027_customer_data_tbl nftbl,
	RTY_CX_B_PARTY_NFID_TBL nfidtbl
	where UPPER(nftbl.creditorgkey) = UPPER(nfidtbl.EXTNATTRIBUTECHAR002)
	--and nftbl.status IN ('N','E')   --FS-XXXX
	and nftbl.status ='I'             --FS-XXXX
	and nftbl.file_name like '%.json' --FS-XXXX
	and nftbl.flow_id  = p_flow_id    --FS-XXXX
    and retry_count<=3  --FS-833
    ;

	cursor get_org_nfid
	is
	select nfidtbl.partynumber,
		   nfidtbl.EXTNATTRIBUTECHAR002
	from rtyintg.rty_i027_customer_data_tbl nftbl,
	RTY_CX_B_PARTY_NFID_TBL nfidtbl
	where UPPER(nftbl.organizationkey) = UPPER(nfidtbl.EXTNATTRIBUTECHAR002)
	--and nftbl.status IN ('N','E')
	and nftbl.status ='I'
	and nftbl.file_name like '%.json'
    and retry_count<=3  --FS-833
	and nftbl.flow_id  = p_flow_id    --FS-XXXX
    ;

	begin


	--Updating Customer details against NFID from CX
	FOR I IN get_cust_nfid LOOP

		UPDATE rtyintg.rty_i027_customer_data_tbl nfacct
		set nfid = substr(i.partynumber,3),   --1-2391907
			typeid = substr(i.partynumber,1,1),
			customerid = substr(i.partynumber,3),
			customertype = substr(i.partynumber,1,1)
		where  1=1 --flow_id = p_flow_id
		and UPPER(individualkey) = UPPER(i.EXTNATTRIBUTECHAR002)
		and individualkey IS NOT NULL
		and process_mode = 'IMPORT_ROUTE'
		--and status IN ('N','E')
		and status ='I'  --FS-XXXX
		and file_name like '%.json'
		and nfacct.flow_id  = p_flow_id    --FS-XXXX
		;
	COMMIT;	
	END LOOP;

	--Updating credit org customer details against NFID from CX
	FOR I IN get_creditorg_nfid LOOP

	UPDATE rtyintg.rty_i027_customer_data_tbl nfacct
	set organizationtype = substr(i.partynumber,1,1)
	where  1=1 --flow_id = p_flow_id
	and UPPER(creditorgkey) = UPPER(i.EXTNATTRIBUTECHAR002)
	and creditorgkey IS NOT NULL
	and process_mode = 'IMPORT_ROUTE'
	--and status IN ('N','E')      --FS-XXXX
	and status = 'I'               --FS-XXXX
	and file_name like '%.json'    --FS-XXXX
	and nfacct.flow_id  = p_flow_id    --FS-XXXX
	;
	COMMIT;	
	END LOOP;

	--Updating Affiliation customer details against NFID from CX
	FOR I IN get_org_nfid LOOP

	UPDATE rtyintg.rty_i027_customer_data_tbl nfacct
	set orgid = substr(i.partynumber,3),
		orgtypeid = substr(i.partynumber,1,1)
	where  1=1 --flow_id = p_flow_id
	and UPPER(organizationkey) = UPPER(i.EXTNATTRIBUTECHAR002)
	and organizationkey IS NOT NULL
	and process_mode = 'IMPORT_ROUTE'
	--and status IN ('N','E')        --FS-XXXX
	and status = 'I'               --FS-XXXX
	and file_name like '%.json'    --FS-XXXX
	and nfacct.flow_id  = p_flow_id    --FS-XXXX
	;
	COMMIT;	
	END LOOP;

		log_info(p_debug,null,'spilt batch prc track1:  Entered validate_customer_data  --> ');

		--validate customer data
		UPDATE rtyintg.rty_i027_customer_data_tbl nfacct
		set 
			error_message = 'Customer not exist in ATP/CX',
              status = 'O'
		where  1=1 --flow_id = p_flow_id
		--and status IN ('N','E')      --FS-XXXX
	    and status = 'I'               --FS-XXXX
	    and file_name like '%.json'    --FS-XXXX
		and process_mode = 'IMPORT_ROUTE'
		and nfacct.flow_id  = p_flow_id    --FS-XXXX
		and not exists
							( SELECT
								1
							FROM
								RTY_CX_B_ACCOUNTS_TBL      acct							
							WHERE acct.partynumber = nfacct.typeid|| '-'|| nfacct.nfid);

		--validate affiliation data
		UPDATE rtyintg.rty_i027_customer_data_tbl nfacct
		set status = 'O',
			error_message = 'Relationship Customer not exist in ATP/CX'
		where  1=1 --flow_id = p_flow_id
		and ra0_objectname = 'IndividualAffiliation'
		and process_mode = 'IMPORT_ROUTE'
		--and status IN ('N','E')	   --FS-XXXX
		and status = 'I'               --FS-XXXX
	    and file_name like '%.json'    --FS-XXXX
		and nfacct.flow_id  = p_flow_id    --FS-XXXX
		and not exists 
							( SELECT
								1
							FROM
								rty_cx_b_accounts_tbl      acct							
							WHERE acct.partynumber = nfacct.orgtypeid|| '-'|| nfacct.orgid);

		--validate credit org data
		UPDATE rtyintg.rty_i027_customer_data_tbl nfacct
		set status = 'O',
			error_message = 'Credit Org Customer not exist in ATP/CX'
		where  1=1 --flow_id = p_flow_id
		and process_mode = 'IMPORT_ROUTE'
		and creditorgid IS NOT NULL
		--and status IN ('N','E')	   --FS-XXXX
		and status = 'I'               --FS-XXXX
	    and file_name like '%.json'    --FS-XXXX
		and nfacct.flow_id  = p_flow_id    --FS-XXXX
		and not exists
							( SELECT
								1
							FROM
								rty_cx_b_accounts_tbl      acct							
							WHERE acct.partynumber = nfacct.creditorgtype||'-'||nfacct.creditorgid);


	--update if NF customer not exist in CX
	/*UPDATE rtyintg.rty_i027_customer_data_tbl nftbl
	set status = 'O', error_message = 'NF customer not exist in CX'
	where nfid is null
	and ra0_objectname = 'Individual';

			--update if NF customer not exist in CX
	UPDATE rtyintg.rty_i027_customer_data_tbl nftbl
	set status = 'O', error_message = 'NF customer not exist in CX'
	where orgid is null
	and ra0_objectname =  'IndividualAffiliation';

	--Udpate if relationship party not exist in CX
	UPDATE rtyintg.rty_i027_customer_data_tbl nftbl
	set nftbl.status = 'O',
		error_message = 'Relationship PartyNumber not exist in CX'
	where 1=1
	and not exists (select  1 from RTY_CX_B_PARTY_NFID_TBL where UPPER(EXTNATTRIBUTECHAR002) = UPPER(nftbl.organizationkey))
	and process_mode = 'IMPORT_ROUTE'
	and ra0_objectname = 'IndividualAffiliation'
	and nftbl.organizationkey IS not NULL
	and nftbl.status IN ('N','E');

	--Udpate if creditorg party not exist in CX
/*	UPDATE rtyintg.rty_i027_customer_data_tbl nftbl
	set nftbl.status = 'O',
		error_message = 'Creditorg PartyNumber not exist in CX'
	where 1=1
	and not exists (select  1 from RTY_CX_B_PARTY_NFID_TBL where UPPER(EXTNATTRIBUTECHAR002) = UPPER(nftbl.creditorgkey))
	and process_mode = 'IMPORT_ROUTE'
	and ra0_objectname = 'Individual'
	and nftbl.creditorgkey IS NOT NULL
	and nftbl.status IN ('N','E');

	--Udpate if  party not exist in CX
	UPDATE rtyintg.rty_i027_customer_data_tbl nftbl
	set nftbl.status = 'O',
		error_message = 'PartyNumber not exist in CX'
	where 1=1
	and not exists (select  1 from RTY_CX_B_PARTY_NFID_TBL where UPPER(EXTNATTRIBUTECHAR002) = UPPER(nftbl.customerkey))
	and process_mode = 'IMPORT_ROUTE'
	and ra0_objectname = 'Individual'
	and nftbl.customerkey IS NOT NULL
	and nftbl.status IN ('N','E');

		COMMIT;
		log_info(p_debug,null,'spilt batch prc track1:  Completed validate_customer_data  --> ');*/
		NULL;

	EXCEPTION
	WHEN OTHERS THEN
	   populate_runtime_error(null,null, 'Error at procedure validate_customer_data : '||substr(sqlerrm,500));
    END;


    PROCEDURE split_batches (
        p_flow_id     IN NUMBER,
        p_batch_limit NUMBER,
        p_debug IN VARCHAR2
    ) AS
--PRAGMA AUTONOMOUS_TRANSACTION;
        CURSOR get_entity_list IS
         SELECT
            ra0_objectname entityname,
            status,
            COUNT(1)       entitycount
        FROM
            rtyintg.rty_i027_customer_data_tbl
        WHERE 1=1
             --   ra0_processed = 'NoU'
            and status IN ('N','E')
			and ra0_objectname = 'Individual'
			--and flow_id = p_flow_id
            AND process_mode = 'IMPORT_ROUTE'
            AND retry_count<=3 --FS-833
             GROUP BY ra0_objectname,status;

        CURSOR c1 (
            p_entity_name IN VARCHAR2
        ) IS
        SELECT
            nfacct.rowid,nfacct.*
        FROM
            rty_cx_b_accounts_tbl      acct,
            rtyintg.rty_i027_customer_data_tbl nfacct
        WHERE acct.partynumber = nfacct.typeid|| '-'|| nfacct.nfid
           -- AND ra0_processed = 'NoU'
            and nfacct.status IN ('N','E')
            AND nfacct.ra0_objectname = p_entity_name
			--and flow_id = p_flow_id
            AND process_mode = 'IMPORT_ROUTE'
            AND retry_count<=3 --FS-833
            AND ROWNUM <=50000   --1.4 added by Vamsi
            ORDER BY ra0_id asc;     --1.4 added by Vamsi

        CURSOR get_batch_id (
            p_entity IN VARCHAR2
        ) IS
        SELECT DISTINCT batch_id
        FROM rtyintg.rty_i027_customer_data_tbl
        WHERE 1=1
            AND process_mode = 'IMPORT_ROUTE'
			and status IN ('N','E')
			--and flow_id = p_flow_id
            AND ra0_objectname = p_entity
            AND retry_count<=3 --FS-833
            ;

        CURSOR upd_batch_row_id (
            p_batch_id NUMBER,
            p_entity   IN VARCHAR2
        ) IS
        SELECT
            batch_row_id,
            flow_id,
            ROWID
        FROM
            rtyintg.rty_i027_customer_data_tbl
        WHERE 1=1
            AND process_mode = 'IMPORT_ROUTE'
			and status IN ('N','E')
            AND ra0_objectname = p_entity
			--and flow_id = p_flow_id
            AND batch_id = p_batch_id
            AND retry_count<=3 --FS-833
            ;

        TYPE batch_rec_tab IS
            TABLE OF c1%rowtype;
        l_batch_rec_tab batch_rec_tab;
        l_batch_id      NUMBER;
        l_batch_limit   NUMBER;
        l_batch_row_id  NUMBER := 0;
        l_use_batch_id  NUMBER;
		l_rec_count NUMBER ;
    BEGIN

     log_info(p_debug,null,'spilt batch prc track1:  p_batch_limit --> '||p_batch_limit);
	 log_info(p_debug,null,'spilt batch prc track1:  calling validate_customer_data  --> ');

	 --to reprocess error records updating all the status as 'N' where status = 'E' until obseloute
	 Update rtyintg.rty_i027_customer_data_tbl
	 set status = 'N',
		 account_update_status = 'N',
		 ACC_UPD_REL_STATUS = 'N',
		 ACC_UPD_END_REL_STATUS = 'N',
		 ACC_DELETE_REL_STATUS = 'N',
		 ACCT_NEW_RELATIONSHIP_STATUS = 'N',
		 AFFILIATION_CREATE_RELSHIP = 'N',
		 AFFILIATION_UPDATE_RELSHIP = 'N',
		 TERMINATION_ACCOUNT = 'N',
		 error_message = null
	 where 1=1
	 and status = 'E'
	 and ra0_objectname IN ('Individual','IndividualAffiliation')
	 and process_mode is not null
     AND retry_count<=3 --FS-833
     ;

	 COMMIT;


	 validate_customer_data(p_flow_id,p_debug);


	/* --if retry count is >= 3 then update statu as obseloute
	 Update rtyintg.rty_i027_customer_data_tbl
	 set status = 'O'
	 where 1=1
	 --and ra0_processed = 'NoU'
	 --and status = 'I'
	 and ra0_objectname IN ('Individual','IndividualAffiliation')
	 and retry_count >= 3
	 and process_mode is not null;*/


	-- COMMIT;


        l_batch_limit := p_batch_limit;
		log_info(p_debug,null,'Begining of split batch procedure  --> ');
        FOR get_entity_list_rec IN get_entity_list LOOP

        log_info(p_debug,null,'spilt batch prc track1:  get_entity_list --> '||get_entity_list_rec.entityname);
            l_batch_id := 0;
            l_use_batch_id := 0;
			 dbms_output.put_line('polling table inserts--> ' || get_entity_list_rec.entityname);
            OPEN c1(get_entity_list_rec.entityname);
            LOOP
                FETCH c1
                BULK COLLECT INTO l_batch_rec_tab LIMIT l_batch_limit;				

                l_batch_id := l_batch_id + 1;
                EXIT WHEN l_batch_rec_tab.count = 0;
                dbms_output.put_line('l_batch_rec_tab.count 2--> ' || l_batch_rec_tab.count);
                dbms_output.put_line('l_batch_id.count--> ' || l_batch_id);
                l_use_batch_id := p_flow_id
                                  || '0'
                                  || rty_i027_import_mannager_seq.nextval
                                  || '0'
                                  || l_batch_id;

                 log_info(p_debug,null,'spilt batch prc track1:  before upating count --> '||l_batch_rec_tab.count);
                FORALL i IN 1..l_batch_rec_tab.count


                    UPDATE rtyintg.rty_i027_customer_data_tbl
                    SET
                        batch_id = l_use_batch_id,
						parent_batch_id = l_use_batch_id,
						status = 'I'
                    WHERE
                        ROWID = l_batch_rec_tab(i).rowid;

              dbms_output.put_line('polling table inserts--> ' || get_entity_list_rec.entityname);

            END LOOP;

            l_batch_rec_tab.DELETE;
            CLOSE c1;
            FOR i IN get_batch_id(get_entity_list_rec.entityname) LOOP
                FOR j IN upd_batch_row_id(i.batch_id, get_entity_list_rec.entityname) LOOP
                    l_batch_row_id := l_batch_row_id + 1;
                --dbms_output.put_line('l_batch_row_id--> ' || l_batch_row_id);
                    UPDATE rtyintg.rty_i027_customer_data_tbl
                    SET
                        batch_row_id = l_batch_row_id
                    WHERE
                        ROWID = j.rowid;

                    COMMIT;
                END LOOP;

                l_batch_row_id := 0;
            END LOOP;

        END LOOP;

        dbms_output.put_line('callin serprate batch proc--> ');
		split_relship_batches(p_flow_id,p_batch_limit,p_debug);

    EXCEPTION
        WHEN OTHERS THEN
           populate_runtime_error(null,null, 'Error at procedure update_batch : '||substr(sqlerrm,500));
    END;

    PROCEDURE split_relship_batches (
        p_flow_id     IN NUMBER,
        p_batch_limit NUMBER,
        p_debug IN VARCHAR2
    ) AS
--PRAGMA AUTONOMOUS_TRANSACTION;
        CURSOR get_entity_list IS
         SELECT
            DISTINCT relationtypecode entityname
        FROM
            rtyintg.rty_i027_customer_data_tbl
        WHERE 1=1
            and status IN ('N','E')
			and ra0_objectname = 'IndividualAffiliation'
            AND process_mode = 'IMPORT_ROUTE';

        CURSOR c1 (
            p_entity_name IN VARCHAR2
        ) IS
        SELECT
            nfacct.rowid,nfacct.*
        FROM

            rtyintg.rty_i027_customer_data_tbl nfacct
        WHERE 1=1
            and status IN ('N','E')
            AND ra0_objectname = 'IndividualAffiliation'
			and relationtypecode = p_entity_name
			and ra0_id in (select min(ra0_id)
							from rtyintg.rty_i027_customer_data_tbl
							where 1=1
							and ra0_id = nfacct.ra0_id
							and status IN ('N','E'))
            AND process_mode = 'IMPORT_ROUTE';

        CURSOR get_batch_id (
            p_entity IN VARCHAR2
        ) IS
        SELECT DISTINCT batch_id
        FROM rtyintg.rty_i027_customer_data_tbl
        WHERE 1=1
            AND process_mode = 'IMPORT_ROUTE'
			and status IN ('N','E')
			--and flow_id = p_flow_id
            AND ra0_objectname = 'IndividualAffiliation'
			and relationtypecode = p_entity;

        CURSOR upd_batch_row_id (
            p_batch_id NUMBER,
            p_entity   IN VARCHAR2
        ) IS
        SELECT
            batch_row_id,
            flow_id,
            ROWID
        FROM
            rtyintg.rty_i027_customer_data_tbl
        WHERE 1=1
            AND process_mode = 'IMPORT_ROUTE'
			and status IN ('N','E')
            AND ra0_objectname = p_entity
			--and flow_id = p_flow_id
            AND batch_id = p_batch_id;

        TYPE batch_rec_tab IS
            TABLE OF c1%rowtype;
        l_batch_rec_tab batch_rec_tab;
        l_batch_id      NUMBER;
        l_batch_limit   NUMBER;
        l_batch_row_id  NUMBER := 0;
        l_use_batch_id  NUMBER;
		l_rec_count NUMBER ;
    BEGIN

     log_info(p_debug,null,'spilt batch prc track1:  p_batch_limit --> '||p_batch_limit);
	 log_info(p_debug,null,'spilt batch prc track1:  calling validate_customer_data  --> ');

	 --to reprocess error records updating all the status as 'N' where status = 'E' until obseloute
	 Update rtyintg.rty_i027_customer_data_tbl
	 set status = 'N',
		 account_update_status = 'N',
		 ACC_UPD_REL_STATUS = 'N',
		 ACC_UPD_END_REL_STATUS = 'N',
		 ACC_DELETE_REL_STATUS = 'N',
		 ACCT_NEW_RELATIONSHIP_STATUS = 'N',
		 AFFILIATION_CREATE_RELSHIP = 'N',
		 AFFILIATION_UPDATE_RELSHIP = 'N',
		 TERMINATION_ACCOUNT = 'N',
		 error_message = NULL,
         RELATIONSHIPENDDATE = null
	 where 1=1
	 and status = 'E'
	 and ra0_objectname = 'IndividualAffiliation'
	 and process_mode = 'IMPORT_ROUTE';


	 --validate_customer_data(p_flow_id,p_debug);


	/* --if retry count is >= 3 then update statu as obseloute
	 Update rtyintg.rty_i027_customer_data_tbl
	 set status = 'O'
	 where 1=1
	 --and ra0_processed = 'NoU'
	 --and status = 'I'
	 and ra0_objectname IN ('Individual','IndividualAffiliation')
	 and retry_count >= 3
	 and process_mode is not null;


	 COMMIT;*/

	 --update if relationtype itself does not exist from NF system
	 update rtyintg.rty_i027_customer_data_tbl
	 set error_message = 'Relationship Type does not exist from NF',
	 status = 'O'
	 where 1=1
	 and ra0_objectname = 'IndividualAffiliation'
	 and relationtypecode IS NULL
	 and process_mode = 'IMPORT_ROUTE';

	 --update if NF relationship does not exist in CX
	 update rtyintg.rty_i027_customer_data_tbl
	 set error_message = 'Relationship Type does not exist in CX',
		 status = 'O'
	 where 1=1
	 and ra0_objectname = 'IndividualAffiliation'
	 and CXRELATIONTYPE = 'NA'
	 and CXRELATIONTYPECODE = 'NA'
	 and process_mode = 'IMPORT_ROUTE';


	 COMMIT;

        l_batch_limit := p_batch_limit;
		log_info(p_debug,null,'Begining of split batch procedure  --> ');
        FOR get_entity_list_rec IN get_entity_list LOOP

        log_info(p_debug,null,'spilt batch prc track1:  get_entity_list --> '||get_entity_list_rec.entityname);
            l_batch_id := 0;
            l_use_batch_id := 0;
			 dbms_output.put_line('polling table inserts--> ' || get_entity_list_rec.entityname);
            OPEN c1(get_entity_list_rec.entityname);
            LOOP
                FETCH c1
                BULK COLLECT INTO l_batch_rec_tab LIMIT l_batch_limit;				

                l_batch_id := l_batch_id + 1;
                EXIT WHEN l_batch_rec_tab.count = 0;
                dbms_output.put_line('l_batch_rec_tab.count 2--> ' || l_batch_rec_tab.count);
                dbms_output.put_line('l_batch_id.count--> ' || l_batch_id);
                l_use_batch_id := p_flow_id
                                  || '0'
                                  || rty_i027_import_mannager_seq.nextval
                                  || '0'
                                  || l_batch_id;

                 log_info(p_debug,null,'spilt batch prc track1:  before upating count --> '||l_batch_rec_tab.count);
				  dbms_output.put_line('spilt batch prc track1:  before upating count --> '||l_batch_rec_tab.count);
                FORALL i IN 1..l_batch_rec_tab.count


                    UPDATE rtyintg.rty_i027_customer_data_tbl
                    SET
                        batch_id = l_use_batch_id,
						parent_batch_id = l_use_batch_id,
						status = 'I'
                    WHERE
                        ROWID = l_batch_rec_tab(i).rowid;

              dbms_output.put_line('polling table inserts--> ' || get_entity_list_rec.entityname);
			  COMMIT;

            END LOOP;

            l_batch_rec_tab.DELETE;
            CLOSE c1;
            FOR i IN get_batch_id(get_entity_list_rec.entityname) LOOP
                FOR j IN upd_batch_row_id(i.batch_id, get_entity_list_rec.entityname) LOOP
                    l_batch_row_id := l_batch_row_id + 1;
                --dbms_output.put_line('l_batch_row_id--> ' || l_batch_row_id);
                    UPDATE rtyintg.rty_i027_customer_data_tbl
                    SET
                        batch_row_id = l_batch_row_id
                    WHERE
                        ROWID = j.rowid;

                    COMMIT;
                END LOOP;

                l_batch_row_id := 0;
            END LOOP;

        END LOOP;

        dbms_output.put_line('callin serprate batch proc--> ');
		--split_error_batches(p_flow_id,p_batch_limit,p_debug);

    EXCEPTION
        WHEN OTHERS THEN
           populate_runtime_error(null,null, 'Error at procedure update_batch : '||substr(sqlerrm,500));
    END;

      PROCEDURE populate_runtime_error (
        p_flow_id      IN NUMBER,
        p_batch_id  NUMBER,
        p_error_detail VARCHAR2
    ) AS

    PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN

         INSERT INTO rty_i027_err_tbl VALUES (
                    p_flow_id,
                    NULL,
                    NULL,
                    NULL,
                   NULL,
                    'ATP_PROC_ERR',
                    p_error_detail,
                    sysdate,
                    p_batch_id,NULL,NULL,NULL,NULL,NULL);
           COMMIT;         

       EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;

      PROCEDURE populate_error (
        p_flow_id      IN NUMBER,
        p_error_reason VARCHAR2,
        p_error_detail VARCHAR2
    ) AS
        CURSOR c1 IS
        SELECT
            *
        FROM
            rtyintg.rty_i027_customer_data_tbl
        WHERE
            flow_id = p_flow_id;
PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
          update rtyintg.rty_i027_customer_data_tbl
            set error_message = p_error_detail||'-'||error_message
            WHERE flow_id = p_flow_id;  
            COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
          populate_runtime_error(null,null, 'Error at procedure populate_err : '||substr(sqlerrm,500));
    END;

--account hirarchy-Creditorgrelationship Validation
    PROCEDURE account_update (
        p_credentail_name IN VARCHAR2,
		p_flow_id       IN NUMBER,
        p_batch_id      IN NUMBER,
		p_namespace VARCHAR2,
		p_bucket VARCHAR2,
        p_debug IN VARCHAR2
    ) AS

    CURSOR C1
	IS
	select
		ROW_NUMBER() Over (Order by ra0_id) columnseq,
		ra0_id
	from rtyintg.rty_i027_customer_data_tbl
	where RA0_OBJECTNAME IN  ('Individual')
	and account_update_status = 'N'
	and retry_count <=3  --FS-833
	and status = 'I'
	and batch_id = p_batch_id;

	l_os_file_name VARCHAR2(1000);
	l_error_message VARCHAR2(1000);
	l_acct_update_count NUMBER := 0;


    begin

    log_info(p_debug,p_batch_id,'account updated track1:  p_batch_id --> '||p_batch_id);
	l_os_file_name := 'I027_Individual_'||p_batch_id;

	 FOR c1_rec in c1 LOOP

	 update rtyintg.rty_i027_customer_data_tbl
	 set batch_row_id = c1_rec.columnseq
	 where RA0_OBJECTNAME IN  ('Individual')
		and account_update_status = 'N'
		and ra0_id = c1_rec.ra0_id
		and retry_count <=3  --FS-833
		and batch_id = p_batch_id;
		COMMIT;

	 END LOOP;


   -- FOR I in get_account_object LOOP
     log_info(p_debug,p_batch_id,'account updated track1: loop  p_batch_id --> '||p_batch_id);

	BEGIN
		select count(1)
		into l_acct_update_count
		from rtyintg.rty_i027_customer_data_tbl
		where RA0_OBJECTNAME IN  ('Individual')
		and account_update_status = 'N'
		and status = 'I'
		and retry_count <=3  --FS-833
		and batch_id = p_batch_id;
	Exception when others then
		populate_runtime_error(null,p_batch_id, 'Error while fetching l_acct_update_count : '||substr(sqlerrm,500));
	END ;

    IF l_acct_update_count <> 0 THEN 
	BEGIN

     log_info(p_debug,p_batch_id,'account updated track1: begin block p_batch_id --> '||p_batch_id);
	--FS-833 retry_count <= 3
    DBMS_CLOUD.EXPORT_DATA(
    credential_name => p_credentail_name, --'RTY_ATPDEV1_OS_CRED01',
    file_uri_list =>'https://swiftobjectstorage.us-ashburn-1.oraclecloud.com/v1/'||p_namespace||'/'||p_bucket||'/'||l_os_file_name||'.csv',
    query => 'select distinct column1,column2,column3,column4,
                column5,column6,column7,column8,column9,column10,
                column11,column12,column13,column14,column15,column16,column17,column18,column19,column20,column21, 
                column22,column23,column24 from rtyintg.rty_i027_importmgr_tbl_hdr where objectname=''ACCOUNT_UPDATE''
                  union all
                  select * 
				  from(
				  select 
                DECODE(RA0_OBJECTNAME, ''Individual'', DECODE(UPPER(ISANONYMOUSDONOR), ''TRUE'',''Y'', ''FALSE'',''N'', ISANONYMOUSDONOR)) AS col1,
				DECODE(RA0_OBJECTNAME, ''Individual'', DECODE(UPPER(ISDECEASED), ''TRUE'',''Y'', ''FALSE'', ''N'', ISDECEASED)) AS col2,
                decode(RA0_OBJECTNAME, ''Individual'', CLUBINVOICEPREFERENCE) col3,
                decode(RA0_OBJECTNAME,''Organization'',NFIDTYPE||''~''||ORGANIZATIONNAME||''~''||NFID, ''Individual'', NFIDTYPE||''~''||FIRSTNAME||''~''||LASTNAME||''~''||NFID)col4 ,
                (case when ISDELETED <> '''' and ISDELETED = 0 THEN ''N'' when ISDELETED <> '''' and ISDELETED = 1 THEN ''Y'' ELSE ''N'' END)col5,
                TYPEID||''-''||NFID col6,
                NFID col7,
                TYPEID col8,
                decode(RA0_OBJECTNAME, ''Individual'', DECEASEDDATE)col9,
                (case when LANGUAGEKEY <> '''' THEN  NVL((select ISO2 from rty_I027_language_tbl where gui = LANGUAGEKEY),null)
                when PREFERREDRILANGUAGEKEY <> '''' THEN NVL((select ISO2 from rty_I027_language_tbl where gui = PREFERREDRILANGUAGEKEY),null) ELSE null END)col10,
                SALUTATION col11,
                decode(RA0_OBJECTNAME, ''Individual'', FIRSTNAME) col12,
                decode(RA0_OBJECTNAME, ''Individual'', LASTNAME) col13,
                decode(RA0_OBJECTNAME, ''Individual'', CHARTEREDDATE) col14,
                individualkey col15,
                decode(RA0_OBJECTNAME, ''Individual'', PREFIX) col16,
                decode(RA0_OBJECTNAME, ''Individual'', MIDDLENAME)col17,
                LOCALIZEDNAME col18,
                null col19,
                null col20,
                ''ZCA_CUSTOMER'' col21,
                to_char(to_date(substr(DATEOFBIRTH,1,11),''YYYY-MM-DD''),''YYYY-MM-DD'') col22,
                NULL col23,
                (case when RA0_OBJECTNAME = ''Individual'' and GENDER <> ''Male'' and GENDER <> ''Female''  THEN ''OTHER'' ELSE upper( GENDER) END) col24
                from rtyintg.rty_i027_customer_data_tbl
                where RA0_OBJECTNAME IN  (''Individual'')
                and account_update_status = ''N''
				and retry_count <= 3
                and batch_id = '||p_batch_id||'
				order by batch_row_id
				)',
      format => JSON_OBJECT( 'type' value 'csv')
 );


				update rtyintg.rty_i027_customer_data_tbl
				SET account_update_status = 'V'
				where account_update_status = 'N'
				and  retry_count <=3  --FS-833
				and batch_id = p_batch_id;

								COMMIT;


				  BEGIN
               INSERT INTO RTY_I027_IMPORTROUTE_POLLING_TBL
               VALUES (p_flow_id,p_batch_id,
                       'INDIVIDUAL',--objecthierarchy
                      'Individual',--objectname
						'Account', --objectcode
                        'R',
                        l_os_file_name,
                        sysdate
                    );
                    COMMIT;     

                EXCEPTION
				WHEN OTHERS THEN
                log_info(p_debug,p_batch_id,'Error while inserting relship batch: ' || sqlerrm);

				UPDATE rtyintg.rty_i027_customer_data_tbl
				set status = 'E',
					retry_count = retry_count + 1,
					batch_id = p_batch_id,
					error_message = 'Error while submitting Individal Extract Data as batch'
				where status = 'I';

			END;          


                     COMMIT;

         log_info(p_debug,p_batch_id,'account updated track1: file copied to OS  p_batch_id --> '||p_batch_id);           

     EXCEPTION
        WHEN OTHERS THEN
		l_error_message := SQLERRM;
            UPDATE
            rtyintg.rty_i027_customer_data_tbl
       set status = 'E',error_message = 'Plsql: Main Exception Error while Extracting account data: '||l_error_message
           where    batch_id = p_batch_id
            AND ra0_objectname = 'Individual'
            AND account_update_status = 'N'
            and status IN ('I','E');

            update rty_i027_importroute_polling_tbl set object_status = 'E' where batch_id = p_batch_id;
            END;
			END IF;


     log_info(p_debug,p_batch_id,'account updated track1:  runtime error --> '||SQLERRM||'--'||p_batch_id);
  --  END LOOP;


     EXCEPTION
        WHEN OTHERS THEN
           populate_runtime_error(null,p_batch_id, 'Error at procedure account_update : '||substr(sqlerrm,500));
    end;

--account hirarchy-Creditorgrelationship Validation
    PROCEDURE validate_credit_org_relationship (        
		p_flow_id       IN NUMBER,
		p_credentail_name IN VARCHAR2,
        p_batch_id      IN NUMBER,
		p_namespace VARCHAR2,
		p_bucket VARCHAR2,
        p_debug IN VARCHAR2
    ) AS

        CURSOR c1 IS
        SELECT
            *
        FROM
            rtyintg.rty_i027_customer_data_tbl
        WHERE
                batch_id = p_batch_id
            AND ra0_objectname = 'Individual'
            AND account_update_status = 'P'
			and retry_count <=3  --FS-833
            AND nfid != creditorgid
            AND creditorgid IS NOT NULL;

        l_relationshiprecid         NUMBER;

        l_rel_start_date            VARCHAR2(100);
        l_rel_end_date              VARCHAR2(100);
        l_subjectpartynumber        VARCHAR2(100);
        l_previous_rel_count NUMBER;

        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        FOR i IN c1 LOOP


             dbms_output.put_line('validate condition ');
           -- log_info(p_debug,p_batch_id,'raoid: '||i.RA0_ID||'_'||'vcor1: in else condition');
                BEGIN
                    SELECT DISTINCT
                        rrt.relationshiprecid,
                        relationshipstartdate,
						relationshipenddate,
                        subjectpartypeopartynumber
                    INTO
                        l_relationshiprecid,
                        l_rel_start_date,
						l_rel_end_date,
                        l_subjectpartynumber
                    FROM
                        rty_cx_b_relationship_tbl rrt
                    WHERE
                            1 = 1
                        AND subjectpartypeopartynumber = i.creditorgtype||'-'||i.creditorgid
                        AND objectpartypeopartynumber = i.customertype
                                                        || '-'
                                                        || i.customerid --actualaccount
                        AND relationshipcode = 'Credit Org'
                        AND relationshiptype = 'Credit Org'
                        AND reltypestatus = 'A';

                    IF l_relationshiprecid IS NOT NULL THEN
                    IF l_rel_end_date <> '4712-12-31' THEN
						--create new relatioship
						UPDATE rtyintg.rty_i027_customer_data_tbl
                        SET
                            ACCT_NEW_RELATIONSHIP_STATUS = 'I',
							relationship_start_date = decode( l_rel_end_date,
															  to_char(to_date(sysdate),'YYYY-MM-DD'),
															  to_char(sysdate+1,'YYYY-MM-DD'),
															  to_char(sysdate,'YYYY-MM-DD')
															),
                            subject_party_number = l_subjectpartynumber
                        WHERE
                                batch_id = p_batch_id
                            AND ra0_objectname = 'Individual'
							and retry_count <=3  --FS-833
                            AND account_update_status = 'P'
							AND ACCT_NEW_RELATIONSHIP_STATUS = 'N'
                            AND nfid != creditorgid
                            AND creditorgid IS NOT NULL
                            AND ra0_id = i.ra0_id
                            AND customerid IS NOT NULL;
                    COMMIT;

					ELSE 
             --      log_info(p_debug,p_batch_id,'raoid: '||i.ra0_id||'_'||'vcor2: in if condition');
                        UPDATE rtyintg.rty_i027_customer_data_tbl
                        SET
                            acc_upd_rel_status = 'V',
                            relationship_rec_id = l_relationshiprecid,
                            relationship_start_date = l_rel_start_date,
                            subject_party_number = l_subjectpartynumber
                        WHERE
                                batch_id = p_batch_id
                            AND ra0_objectname = 'Individual'
                            AND account_update_status = 'P'
							and retry_count <=3  --FS-833
                            AND nfid != creditorgid
                            AND creditorgid IS NOT NULL
                            AND ra0_id = i.ra0_id
                            AND customerid IS NOT NULL;
                    COMMIT;
                    END IF;
                    END IF;

                EXCEPTION

                    WHEN NO_DATA_FOUND THEN
                        dbms_output.put_line('UPDREL --> d: ' || i.ra0_id);
                        dbms_output.put_line('p_batch_id --> d: ' || p_batch_id);
                        log_info(p_debug,p_batch_id,'raoid: '||i.ra0_id||'_'||'vcor1: in ndf section');

                           --validating RELNOTEXIST flow
						   --> check any credit org relship exist
                           --> Delete relationship
                           BEGIN
						   l_previous_rel_count := 0;
                            BEGIN
                            SELECT count(1)
                            INTO l_previous_rel_count
                             from    rty_cx_b_relationship_tbl rrt
                            WHERE 1 = 1
                                AND objectpartypeopartynumber = i.customertype
                                                                || '-'
                                                                || i.customerid --actualaccount
                                AND relationshipcode = 'Credit Org'
                                AND  relationshipEndDate= '4712-12-31'
                                AND reltypestatus = 'A';
               --                                           dbms_output.put_line('l_previous_rel_count --> d: ' || l_previous_rel_count);

                               IF l_previous_rel_count <> 0 THEN
                 --               log_info(p_debug,p_batch_id,'raoid: '||i.ra0_id||'_'||'vcor1: in del rel section');
                               BEGIN
                                SELECT DISTINCT
                                rrt.relationshiprecid,
                                relationshipstartdate,
                                relationshipenddate,
                                subjectpartypeopartynumber
                                INTO
                                    l_relationshiprecid,
                                    l_rel_start_date,
                                    l_rel_end_date,
                                    l_subjectpartynumber
                                 from    rty_cx_b_relationship_tbl rrt
                                WHERE 1 = 1
                                    AND objectpartypeopartynumber = i.customertype
                                                                    || '-'
                                                                    || i.customerid --actualaccount
                                    AND relationshipcode = 'Credit Org'
                                    AND  relationshipEndDate= '4712-12-31'
                                    AND reltypestatus = 'A';
                                    dbms_output.put_line('relationshipstartdate --> d: ' || l_rel_start_date);
                                    IF l_rel_start_date = to_char(to_date(sysdate),'YYYY-MM-DD') THEN
                                        --deleterelationship via integration
                                        --update flag to V
                                        --delete relationship reord from rty_cx_b_relationship_tbl post success to CX

                                        UPDATE rtyintg.rty_i027_customer_data_tbl
                                        SET
                                            acc_delete_rel_status = 'V',
											ACCT_NEW_RELATIONSHIP_STATUS = 'I',
                                            delete_relationship_rec_id = l_relationshiprecid,
                                            relationship_start_date = l_rel_start_date,
                                            relationship_end_date = l_rel_end_date,
                                            subject_party_number = l_subjectpartynumber
                                        WHERE
                                                batch_id = p_batch_id
                                            AND ra0_objectname = 'Individual'
                                            AND account_update_status = 'P'
                                            AND nfid != creditorgid
                                            AND creditorgid IS NOT NULL
                                            AND ra0_id = i.ra0_id
											and retry_count <=3  --FS-833
                                            AND customerid IS NOT NULL;
                                        COMMIT;
                                    ELSE 

                                    --updateerelationship with previous end date via integration
                                        --update flag to V

                   --                      log_info(p_debug,p_batch_id,'raoid: '||i.ra0_id||'_'||'vcor1: in prevdel rel section');
                                        UPDATE rtyintg.rty_i027_customer_data_tbl
                                        SET
                                            ACC_UPD_END_REL_STATUS = 'V',
											ACCT_NEW_RELATIONSHIP_STATUS = 'I',
                                            relationship_rec_id = l_relationshiprecid,
                                            relationship_start_date =  to_char(sysdate,'YYYY-MM-DD'), --l_rel_start_date,
                                            relationship_end_date = l_rel_end_date,
                                            subject_party_number = l_subjectpartynumber
                                        WHERE
                                                batch_id = p_batch_id
                                            AND ra0_objectname = 'Individual'
                                            AND account_update_status = 'P'
                                            AND nfid != creditorgid
											and retry_count <=3  --FS-833
                                            AND creditorgid IS NOT NULL
                                            AND ra0_id = i.ra0_id
                                            AND customerid IS NOT NULL;
                                    COMMIT;
                                    END IF;

                                EXCEPTION WHEN OTHERS THEN
                               populate_runtime_error(null,p_batch_id, 'Error at procedure validate_creditorg_relship 3 : '||substr(sqlerrm,500));
                               END;


                               ELSE 

								--if credit org relationship not exist then create new one	
									UPDATE rtyintg.rty_i027_customer_data_tbl
                                        SET
                                            ACCT_NEW_RELATIONSHIP_STATUS = 'I'
                                        WHERE
                                                batch_id = p_batch_id
                                            AND ra0_objectname = 'Individual'
                                            AND account_update_status = 'P'
											AND ACCT_NEW_RELATIONSHIP_STATUS = 'N'
                                            AND nfid != creditorgid
											and retry_count <=3  --FS-833
                                            AND creditorgid IS NOT NULL
                                            AND ra0_id = i.ra0_id
                                            AND customerid IS NOT NULL;

								COMMIT;

							   END IF;


                            EXCEPTION WHEN OTHERS THEN
                            populate_runtime_error(null,p_batch_id, 'Error at procedure validate_creditorg_relship 2 : '||substr(sqlerrm,500));
                           END;

                           EXCEPTION WHEN OTHERS THEN
                            populate_runtime_error(null,p_batch_id, 'Error at procedure validate_creditorg_relship 3 : '||substr(sqlerrm,500));
                           END;

                END;
        END LOOP;
         log_info(p_debug,p_batch_id,'calling procedure process_acc_flow_sts p_batch_id--> '||p_batch_id);
       process_acc_flow_sts(p_flow_id,p_credentail_name,p_batch_id,p_namespace, p_bucket,p_debug  );
                --


    EXCEPTION
        WHEN OTHERS THEN
           populate_runtime_error(null,p_batch_id, 'Error at procedure validate_creditorg_relship : '||substr(sqlerrm,500));
    END;

procedure process_acc_flow_sts(p_flow_id number, p_credentail_name IN VARCHAR2,p_batch_id number,p_namespace VARCHAR2,
		p_bucket VARCHAR2,p_debug IN VARCHAR2)
as
l_acc_creditorg_upd_rel_sts_count number;
l_acc_creditorg_del_rel_sts_count number;
l_acc_creditorg_upd_previous_rel_status_count number;
p_object_name varchar2(1000) := 'Individual';

CURSOR relship_update
is
select 
	ROW_NUMBER() Over (Order by ra0_id) columnseq,
	ra0_id
from  rtyintg.rty_i027_customer_data_tbl
where batch_id =  p_batch_id
--and creditorgid IS NOT NULL
and ACC_UPD_REL_STATUS = 'V'
and account_update_status = 'P'
and retry_count <=3  --FS-833
;

CURSOR relship_delete
is
select 
	ROW_NUMBER() Over (Order by ra0_id) columnseq,
	ra0_id
from  rtyintg.rty_i027_customer_data_tbl
where batch_id =  p_batch_id
and ACC_DELETE_REL_STATUS = 'V'
--and creditorgid IS NOT NULL
and ACCOUNT_UPDATE_STATUS = 'P'
and retry_count <=3  --FS-833
;

CURSOR relship_previous_update
is
select 
	ROW_NUMBER() Over (Order by ra0_id) columnseq,
	ra0_id
from  rtyintg.rty_i027_customer_data_tbl
where batch_id =  p_batch_id
--and creditorgid IS NOT NULL
and ACC_UPD_END_REL_STATUS = 'V'
and ACCOUNT_UPDATE_STATUS = 'P'
and retry_count <=3  --FS-833
;

l_relship_update_batch_id number;
l_relship_delete_batch_id number;
l_relship_enddate_batch_id number;

PRAGMA AUTONOMOUS_TRANSACTION;
begin

l_relship_update_batch_id := p_flow_id||'0'||rty_i027_import_mannager_seq.nextval;
l_relship_delete_batch_id := p_flow_id||'0'||rty_i027_import_mannager_seq.nextval;
l_relship_enddate_batch_id := p_flow_id||'0'||rty_i027_import_mannager_seq.nextval;

FOR relship_update_rec IN relship_update loop
	UPDATE  rtyintg.rty_i027_customer_data_tbl
	set batch_row_id = relship_update_rec.columnseq,
	batch_id = l_relship_update_batch_id
	where batch_id =  p_batch_id
	--and creditorgid IS NOT NULL
	and ra0_id = relship_update_rec.ra0_id
	and ACC_UPD_REL_STATUS = 'V'
	and account_update_status = 'P'
	and retry_count <=3  --FS-833
	;

COMMIT;
END loop;

FOR relship_delete_rec IN relship_delete loop

	UPDATE  rtyintg.rty_i027_customer_data_tbl
	set batch_row_id = relship_delete_rec.columnseq,
		batch_id = l_relship_delete_batch_id
	where batch_id =  p_batch_id
	--and creditorgid IS NOT NULL
	and ra0_id = relship_delete_rec.ra0_id
	and ACC_DELETE_REL_STATUS = 'V'
	and ACCOUNT_UPDATE_STATUS = 'P'
	and retry_count <=3  --FS-833
	;

COMMIT;
END loop;

FOR relship_update_rec IN relship_previous_update loop

	UPDATE  rtyintg.rty_i027_customer_data_tbl
	set batch_row_id = relship_update_rec.columnseq,
		batch_id = l_relship_enddate_batch_id
	where batch_id =  p_batch_id
	--and creditorgid IS NOT NULL
	and ra0_id = relship_update_rec.ra0_id
	and ACC_UPD_END_REL_STATUS = 'V'
	and ACCOUNT_UPDATE_STATUS = 'P'
	and retry_count <=3  --FS-833
	;

COMMIT;
END loop;

--get credit org update relationship sts count where ACC_UPD_REL_STATUS = 'V'
--if count <> 0 insert record in polling table to process 
log_info(p_debug,l_relship_update_batch_id,'traack1.1 l_relship_update_batch_id--> ' || l_relship_update_batch_id);  
        l_acc_creditorg_upd_rel_sts_count := get_sts_count(l_relship_update_batch_id,p_object_name,'ACC_UPD_REL_STATUS');
         dbms_output.put_line('traack1 l_acc_creditorg_upd_rel_sts_count--> ' || l_acc_creditorg_upd_rel_sts_count);
          log_info(p_debug,l_relship_update_batch_id,'traack1 l_acc_creditorg_upd_rel_sts_count--> ' || l_acc_creditorg_upd_rel_sts_count);
            IF l_acc_creditorg_upd_rel_sts_count <> 0 THEN
             log_info(p_debug,l_relship_update_batch_id,'in l_acc_creditorg_upd_rel_sts_count--> ' || l_acc_creditorg_upd_rel_sts_count);

--write data to csv
            BEGIN
			--FS-833 retry_count <= 3
            DBMS_CLOUD.EXPORT_DATA( credential_name =>p_credentail_name, --'RTY_ATPDEV1_OS_CRED01',
                                file_uri_list =>'https://swiftobjectstorage.us-ashburn-1.oraclecloud.com/v1/'||p_namespace||'/'||p_bucket||'/'||'I027CREDITORGRELSHIP_UPDATE_'||l_relship_update_batch_id||'.csv',
                                query => 'select column1,column2,column3,column4,
                                            column5,column6,column7 from rtyintg.rty_i027_importmgr_tbl_hdr where objectname=''ACCOUNT_RELSHIP_UPDATE''
                                              union all
                                            select *
											from(
											select  to_char(relationship_rec_id),''Credit Org'' col1,''Credit Org'' col2,
											customertype||''-''||customerid ,
											subject_party_number,
											 relationship_start_date,
											 to_char(decode(isdeleted,0,relationship_end_date,to_char(sysdate,''YYYY-MM-DD'')))
                                            from  rtyintg.rty_i027_customer_data_tbl
                                            where batch_id =  '||l_relship_update_batch_id||'
                                            and ACC_UPD_REL_STATUS = ''V''
											and retry_count <= 3
											and account_update_status = ''P''
											order by batch_row_id
											)',
                                format => JSON_OBJECT( 'type' value 'csv'));

            dbms_output.put_line('insert track1 -->');

             BEGIN
               INSERT INTO RTY_I027_IMPORTROUTE_POLLING_TBL
               VALUES (p_flow_id,l_relship_update_batch_id,'ACCOUNTUPDATERELSHIP',--hierarchy
                        p_object_name, --objectname
                        'Relationship',--objectcode
                        'R','I027CREDITORGRELSHIP_UPDATE_'||l_relship_update_batch_id,sysdate
                        );
                    COMMIT;           
                EXCEPTION
            WHEN OTHERS THEN
                log_info(p_debug,l_relship_update_batch_id,'Error while inserting relship batch: ' || sqlerrm);
                NULl;
        END;               
           EXCEPTION
            WHEN OTHERS THEN
               log_info(p_debug,l_relship_update_batch_id,'Error while extracting relship update data: ' || sqlerrm);

			UPDATE rtyintg.rty_i027_customer_data_tbl
			set status = 'E',
				retry_count = retry_count + 1,
				batch_id = l_relship_update_batch_id,
				error_message = 'Error while extracting relship update data 1: '
			where status = 'I'; 
        END;

            END IF;

--get credit org delete relationship sts count where ACC_DELETE_REL_STATUS = 'V'
--if count <> 0 insert record in polling table to process   
        l_acc_creditorg_del_rel_sts_count :=get_sts_count(l_relship_delete_batch_id,p_object_name,'ACC_DELETE_REL_STATUS');
         log_info(p_debug,l_relship_delete_batch_id,'l_acc_creditorg_del_rel_sts_count-->' || l_acc_creditorg_del_rel_sts_count);
            IF l_acc_creditorg_del_rel_sts_count <> 0 THEN

             log_info(p_debug,l_relship_delete_batch_id,'in l_acc_creditorg_del_rel_sts_count' || l_acc_creditorg_del_rel_sts_count);
            --write data to csv
            BEGIN
			--FS-833 retry_count <= 3
            DBMS_CLOUD.EXPORT_DATA( credential_name =>p_credentail_name, --'RTY_ATPDEV1_OS_CRED01',
                                file_uri_list =>'https://swiftobjectstorage.us-ashburn-1.oraclecloud.com/v1/'||p_namespace||'/'||p_bucket||'/'||'I027CREDITORGRELSHIP_DELETE_'||l_relship_delete_batch_id||'.csv',
                                query => 'select column1,column4
                                            from rtyintg.rty_i027_importmgr_tbl_hdr where objectname=''ACCOUNT_RELSHIP_UPDATE''
                                              union all
                                             select *
											from(
											select to_char(DELETE_RELATIONSHIP_REC_ID),customertype||''-''||customerid 
                                            from  rtyintg.rty_i027_customer_data_tbl
                                            where batch_id =  '||l_relship_delete_batch_id||'
                                            and ACC_DELETE_REL_STATUS = ''V''
											and ACCOUNT_UPDATE_STATUS = ''P''
											and retry_count <= 3
											order by batch_row_id
											)',
                                format => JSON_OBJECT( 'type' value 'csv'));
              dbms_output.put_line('plling table inserts4--> ');
              BEGIN
               INSERT INTO RTY_I027_IMPORTROUTE_POLLING_TBL
               VALUES (p_flow_id,l_relship_delete_batch_id,'ACCOUNTDELETERELSHIP',--hierarchy
                        p_object_name, --objectname
                        'Relationship',--objectcode
                        'R','I027CREDITORGRELSHIP_DELETE_'||l_relship_delete_batch_id,sysdate
                        );
                         COMMIT; 

                          EXCEPTION
            WHEN OTHERS THEN
                  log_info(p_debug,l_relship_delete_batch_id,'in l_acc_creditorg_del_rel_sts_count' || sqlerrm);
                  NULL;
        END;

           EXCEPTION
            WHEN OTHERS THEN
                 log_info(p_debug,l_relship_delete_batch_id,'in l_acc_creditorg_del_rel_sts_count 2' || sqlerrm);

					UPDATE rtyintg.rty_i027_customer_data_tbl
					set status = 'E',
						retry_count = retry_count + 1,
						batch_id = l_relship_delete_batch_id,
						error_message = 'Error l_acc_creditorg_del_rel_sts_count 1: '
					where status = 'I'; 
        END;


            END IF;          

--get credit org previous relationship sts count where ACC_UPD_END_REL_STATUS = 'V'
--if count <> 0 insert record in polling table to process   
        l_acc_creditorg_upd_previous_rel_status_count := get_sts_count(l_relship_enddate_batch_id,p_object_name,'ACC_UPD_END_REL_STATUS');
          log_info(p_debug,l_relship_enddate_batch_id,'l_acc_creditorg_upd_previous_rel_status_count-->' || l_acc_creditorg_upd_previous_rel_status_count);
            IF l_acc_creditorg_upd_previous_rel_status_count <> 0 THEN
               log_info(p_debug,l_relship_enddate_batch_id,'in l_acc_creditorg_upd_previous_rel_status_count' || l_acc_creditorg_upd_previous_rel_status_count);      
--write data to csv
            BEGIN
			--FS-833 retry_count <= 3
            DBMS_CLOUD.EXPORT_DATA( credential_name =>p_credentail_name,--'RTY_ATPDEV1_OS_CRED01',
                                file_uri_list =>'https://swiftobjectstorage.us-ashburn-1.oraclecloud.com/v1/'||p_namespace||'/'||p_bucket||'/'||'I027CREDITORGRELSHIP_ENDDATE_'||l_relship_enddate_batch_id||'.csv',
                                query => 'select column1,column4,column7
                                            from rtyintg.rty_i027_importmgr_tbl_hdr where objectname=''ACCOUNT_RELSHIP_UPDATE''
                                              union all
                                             select *
											from(
											select to_char(relationship_rec_id),customertype||''-''||customerid ,
											to_char(sysdate-1,''YYYY-MM-DD'')
                                            from  rtyintg.rty_i027_customer_data_tbl
                                            where batch_id =  '||l_relship_enddate_batch_id||'
                                            and ACC_UPD_END_REL_STATUS = ''V''
											and ACCOUNT_UPDATE_STATUS = ''P''
											and retry_count <= 3
											order by batch_row_id
											)',
                                            format => JSON_OBJECT( 'type' value 'csv'));
           BEGIN
               INSERT INTO RTY_I027_IMPORTROUTE_POLLING_TBL
               VALUES (p_flow_id,l_relship_enddate_batch_id,'ACCOUNTENDRELSHIP',--hierarchy
                        p_object_name, --objectname
                        'Relationship',--objectcode
                        'R','I027CREDITORGRELSHIP_ENDDATE_'||l_relship_enddate_batch_id,sysdate
                        );
              COMMIT; 
             EXCEPTION
            WHEN OTHERS THEN
                log_info(p_debug,l_relship_enddate_batch_id,'in l_acc_creditorg_upd_previous_rel_status_count' || sqlerrm);
                NULL;
        END;                  

           EXCEPTION
            WHEN OTHERS THEN
                log_info(p_debug,p_batch_id,'in l_acc_creditorg_upd_previous_rel_status_count1' || sqlerrm);

			UPDATE rtyintg.rty_i027_customer_data_tbl
			set status = 'E',
				retry_count = retry_count + 1,
				batch_id = p_batch_id,
				error_message = 'Error l_acc_creditorg_upd_previous_rel 1: '
			where status = 'I'; 

        END;

            END IF;  

        EXCEPTION
            WHEN OTHERS THEN
                UPDATE rtyintg.rty_i027_customer_data_tbl
             set status = 'E',
			 error_message = 'Plsql: Error while processing Credit Org Data:'
            where batch_id = p_batch_id
            and ra0_objectname = p_object_name
            and account_update_status = 'P';
			COMMIT;
        END;


procedure create_credit_org_relship(p_flow_id number, p_credentail_name IN VARCHAR2,p_batch_id number,p_namespace VARCHAR2,
		p_bucket VARCHAR2,p_debug IN VARCHAR2)
as
l_relship_count number;
p_object_name varchar2(1000) := 'Individual';

CURSOR new_relship_cur
is
select distinct batch_id
from  rtyintg.rty_i027_customer_data_tbl
where batch_id =  p_batch_id
and creditorgid IS NOT NULL
and account_update_status = 'P'
and ACCT_NEW_RELATIONSHIP_STATUS = 'I'
and retry_count <=3  --FS-833
;

CURSOR c1
is
select 
	ROW_NUMBER() Over (Order by ra0_id) columnseq,
ra0_id
from  rtyintg.rty_i027_customer_data_tbl
where batch_id =  p_batch_id
and creditorgid IS NOT NULL
and account_update_status = 'P'
and ACCT_NEW_RELATIONSHIP_STATUS = 'I'
and retry_count <=3  --FS-833
;

l_rel_new_batch_id NUMBER;

PRAGMA AUTONOMOUS_TRANSACTION;
begin

l_rel_new_batch_id := p_flow_id||'0'||rty_i027_import_mannager_seq.nextval;

FOR new_relship_rec IN new_relship_cur LOOP

l_rel_new_batch_id := new_relship_rec.batch_id;

	FOR i in C1 loop
		update  rtyintg.rty_i027_customer_data_tbl
		set batch_row_id = i.columnseq
			--batch_id = l_rel_new_batch_id
		where batch_id =  l_rel_new_batch_id
		and ra0_id = i.ra0_id
		and account_update_status = 'P'
		and creditorgid IS NOT NULL		
		and ACCT_NEW_RELATIONSHIP_STATUS = 'I'
		and retry_count <=3  --FS-833
		;

		COMMIT;

	END LOOP;

--get new credit org records where account delete status and account update relship status as 'P'
BEGIN

	select count(1)
	into l_relship_count
	from rtyintg.rty_i027_customer_data_tbl nftbl,
		rty_cx_b_accounts_tbl acct
	where batch_id = l_rel_new_batch_id
	and acct.partynumber = nftbl.CustomerType||'-'||nftbl.customerid
	and creditorgid IS NOT NULL
	and (((ACC_DELETE_REL_STATUS = 'P' OR ACC_UPD_END_REL_STATUS = 'P') AND (ACCT_NEW_RELATIONSHIP_STATUS = 'I'))
		OR (ACC_DELETE_REL_STATUS = 'N' AND ACC_UPD_END_REL_STATUS = 'N' AND ACCT_NEW_RELATIONSHIP_STATUS = 'I') )
	and ACCOUNT_UPDATE_STATUS = 'P'
	and retry_count <=3  --FS-833
	;

EXCEPTION
when others THEN
NULL;
END;
          log_info(p_debug,l_rel_new_batch_id,'extracting data for new credit org relationship: l_relship_count: '||l_relship_count);
            IF l_relship_count <> 0 THEN          
			--write data to csv

			update rtyintg.rty_i027_customer_data_tbl nftbl
			set ACCT_NEW_RELATIONSHIP_STATUS = 'V'
			where batch_id = l_rel_new_batch_id
			and creditorgid IS NOT NULL
			and (((ACC_DELETE_REL_STATUS = 'P' OR ACC_UPD_END_REL_STATUS = 'P') AND (ACCT_NEW_RELATIONSHIP_STATUS = 'I'))
				OR (ACC_DELETE_REL_STATUS = 'N' AND ACC_UPD_END_REL_STATUS = 'N' AND ACCT_NEW_RELATIONSHIP_STATUS = 'I') )
			and retry_count <=3  --FS-833
				;

				COMMIT;

            BEGIN
			--FS-833 retry_count <= 3
            DBMS_CLOUD.EXPORT_DATA( credential_name =>p_credentail_name,
                                file_uri_list =>'https://swiftobjectstorage.us-ashburn-1.oraclecloud.com/v1/'||p_namespace||'/'||p_bucket||'/'||'I027CREDITORG_RELSHIP_CREATE_'||l_rel_new_batch_id||'.csv',
                                query => 'select column2,column3,column4,column5,column6
											from rtyintg.rty_i027_importmgr_tbl_hdr where objectname=''ACCOUNT_RELSHIP_UPDATE''
                                            union all
                                            select *
											from(
											select  ''Credit Org'' column1,''Credit Org'' column2,
											customertype||''-''||customerid ,
                                            creditorgtype||''-''||creditorgid,
											relationship_start_date
                                            from  rtyintg.rty_i027_customer_data_tbl
                                            where batch_id =  '||l_rel_new_batch_id||'
											and creditorgid IS NOT NULL
											and account_update_status = ''P''
											and ACCT_NEW_RELATIONSHIP_STATUS = ''V''
											and retry_count <= 3
											order by batch_row_id
											)',
                                format => JSON_OBJECT( 'type' value 'csv'));

            dbms_output.put_line('insert track1 -->');

             BEGIN
               INSERT INTO RTY_I027_IMPORTROUTE_POLLING_TBL
               VALUES (p_flow_id,l_rel_new_batch_id,'ACCOUNTNEWRELSHIP',--hierarchy
                        p_object_name, --objectname
                        'Relationship',--objectcode
                        'R','I027CREDITORG_RELSHIP_CREATE_'||l_rel_new_batch_id,sysdate
                        );
                    COMMIT;           
                EXCEPTION
				WHEN OTHERS THEN
                log_info(p_debug,l_rel_new_batch_id,'Error while inserting relship batch: ' || sqlerrm);
                NULl;
			END;               
           EXCEPTION
            WHEN OTHERS THEN
               log_info(p_debug,l_rel_new_batch_id,'Error while extracting new relshipdata: ' || sqlerrm);

			UPDATE rtyintg.rty_i027_customer_data_tbl
			set status = 'E',
				retry_count = retry_count + 1,
				batch_id = l_rel_new_batch_id,
				error_message = 'Error while extracting new relshipdata 1: '
			where status = 'I'; 


        END;
        END IF;
		END LOOP;
		END;

procedure validate_affiliate_relship(p_flow_id number,
									 p_batch_id NUMBER,	
									 p_credentail_name IN VARCHAR2,
									 p_namespace VARCHAR2,
									 p_bucket VARCHAR2,
                                     p_debug IN VARCHAR2)
as
cursor get_relationship_cur
IS
select nftbl.*
from rtyintg.rty_i027_customer_data_tbl nftbl
where ra0_objectname IN ('IndividualAffiliation')
and batch_id = p_batch_id
--and enddate is not null
and status = 'I'
and retry_count <=3 --FS-833
;

cursor get_relationship_cur1
IS
select nftbl.CXRelationType,
		nftbl.CXRelationTypeCode,
		nftbl.CustomerType,
		nftbl.CustomerId,
		nftbl.orgtypeid,
		nftbl.orgid,
		to_date(substr(nftbl.startdate,1,10),'YYYY-MM-DD')startdate,
		to_date(substr(nftbl.enddate,1,10),'YYYY-MM-DD')enddate,
		--to_char(to_date(substr(nftbl.startdate,1,10),'YYYY-MM-DD')-1,'YYYY-MM-DD')previous_startdate,
		--to_char(to_date(substr(nftbl.enddate,1,10),'YYYY-MM-DD')-1,'YYYY-MM-DD')previous_enddate,
		substr(startdate,1,10) startdate1,
		substr(enddate,1,10) enddate1,
		nftbl.ra0_id,
        nftbl.nfid,
        nftbl.typeid,
        ra0_processed,ra0_objectname,RELATIONTYPECODE
from rtyintg.rty_i027_customer_data_tbl nftbl
where ra0_objectname IN ('IndividualAffiliation')
and batch_id = p_batch_id
--and nfid = 9915900
--and enddate is null
and status = 'I'
and retry_count <=3 --FS-833
;

l_ind_affiliation_relship_count  NUMBER;
l_ind_affiliation_non_relship_count NUMBER;
l_relationshipstartdate varchar2(100);
l_relationshipenddate varchar2(100);
l_relationshiprecid varchar2(100);
l_RELATIONSHIP_PREVIOUS_STARTDATE varchar2(100);
l_relationship_previous_enddate varchar2(100);
l_RELATIONSHIPSTARTDATE_1 VARCHAR2(100);
l_errmsg varchar2(1000);

BEGIN

log_info(p_debug,p_batch_id,'entered in affliatoin validation procedure : ');

/*UPDATE rtyintg.rty_i027_customer_data_tbl
set affiliation_create_relship = 'V'
where status = 'I'
--and enddate is null
and affiliation_create_relship = 'N'
and ra0_id IN (select ra0_id 
			from rtyintg.rty_i027_customer_data_tbl 
			where status = 'I'
			and batch_id = p_batch_id
			--and enddate is null
			and affiliation_create_relship = 'N');

COMMIT;	*/

for relationship_rec IN get_relationship_cur
LOOP

l_relationshipstartdate := null;
l_relationshipenddate := null;
l_relationshiprecid	:= null;
l_relationship_previous_enddate := null;
l_ind_affiliation_relship_count := 0;
l_ind_affiliation_non_relship_count := 0;

	--validate relationship exist or not
	--> if exist, update relationship with end date and create new relationship
	/*BEGIN

		select distinct 
		--relationshipstartdate,
					--relationshipenddate,
					relationshiprecid
		INTO --l_relationshipstartdate,
			 --l_relationshipenddate,
			 l_relationshiprecid			 
		from rty_cx_b_relationship_tbl relship
		where 1=1
		and reltypestatus = 'A'
	    and relship.objectpartypeopartynumber = relationship_rec.typeid||'-'||relationship_rec.nfid
	    --and relship.RelationshipCode = relationship_rec.cxRelationTypeCode
		and relship.RelationshipType = relationship_rec.cxRelationType
		and relship.subjectpartypeopartynumber = relationship_rec.orgtypeid||'-'||relationship_rec.orgid
		and relationshipstartdate = SUBSTR(relationship_rec.StartDate,1,10)
		and to_date(substr(RELATIONSHIPCREATIONDATE,1,10),'YYYY-MM-DD') = 
                                (select
                                max(to_date(substr(RELATIONSHIPCREATIONDATE,1,10),'YYYY-MM-DD')	 )
                                from rty_cx_b_relationship_tbl relship
                                where 1=1
                                and reltypestatus = 'A'
                                and relship.objectpartypeopartynumber = relationship_rec.typeid||'-'||relationship_rec.nfid
                                --and relship.RelationshipCode = relationship_rec.cxRelationTypeCode
                                and relship.RelationshipType = relationship_rec.cxRelationType
                                and relship.subjectpartypeopartynumber = relationship_rec.orgtypeid||'-'||relationship_rec.orgid
                                and relationshipstartdate = SUBSTR(relationship_rec.StartDate,1,10))
        and rownum =1;

		IF l_relationshiprecid IS NOT NULL THEN


				UPDATE rtyintg.rty_i027_customer_data_tbl
				set affiliation_update_relship = 'V',						
				relationship_rec_id = l_relationshiprecid
				where status = 'I'
				and batch_id = p_batch_id
				and ra0_id =  relationship_rec.ra0_id
				and affiliation_update_relship = 'N';

				COMMIT;	

		END IF;

	exception
	when NO_DATA_FOUND then


		UPDATE rtyintg.rty_i027_customer_data_tbl
		set affiliation_update_relship = 'E',
			status = 'E',
			retry_count = retry_count + 1,
			error_message = 'Relationship not found in CX with given start date'
		where status = 'I'
		and batch_id = p_batch_id
		and ra0_id =  relationship_rec.ra0_id
		--and TERMINATIONREASONKEY IS NULL
		and enddate is not null
		and affiliation_update_relship = 'N';

	when others then
	 populate_runtime_error(null,p_batch_id, 'Error at procedure process_ind_affiliation_relationship 1 : '||substr(sqlerrm,500));
	END;
	*/

end loop;

for relationship_rec1 IN get_relationship_cur1
LOOP

l_relationshiprecid := null;
l_RELATIONSHIPSTARTDATE	:= null;
l_relationshipenddate := null;
l_RELATIONSHIP_PREVIOUS_STARTDATE := null;
l_relationship_previous_enddate := null;
l_RELATIONSHIPSTARTDATE_1 := null;
	--validate relationship exist or not
	--> if exist, update relationship with end date and create new relationship
	BEGIN

		select distinct 		
					relationshiprecid,
					to_date(RELATIONSHIPSTARTDATE,'YYYY-MM-DD'),
					RELATIONSHIPSTARTDATE,
					to_char(to_date(RELATIONSHIPSTARTDATE,'YYYY-MM-DD')-1,'YYYY-MM-DD'),
                    to_date(RELATIONSHIPENDDATE,'YYYY-MM-DD'),
					to_char(to_date(RELATIONSHIPENDDATE,'YYYY-MM-DD')-1,'YYYY-MM-DD')
		INTO l_relationshiprecid,
			 l_RELATIONSHIPSTARTDATE,
			 l_RELATIONSHIPSTARTDATE_1,
			 l_RELATIONSHIP_PREVIOUS_STARTDATE,
			 l_relationshipenddate,
			 l_relationship_previous_enddate
		from rty_cx_b_relationship_tbl relship
		where 1=1
		and reltypestatus = 'A'
	    and relship.objectpartypeopartynumber = relationship_rec1.typeid||'-'||relationship_rec1.nfid
	    --and relship.RelationshipCode = relationship_rec1.cxRelationTypeCode
		and relship.RelationshipType = relationship_rec1.cxRelationType
		and relship.subjectpartypeopartynumber = relationship_rec1.orgtypeid||'-'||relationship_rec1.orgid
		--and sysdate between to_date(relationshipstartdate,'YYYY-MM-DD') and to_date(relationshipenddate,'YYYY-MM-DD')
		and to_date(substr(RELATIONSHIPCREATIONDATE,1,10),'YYYY-MM-DD') = 
                                (select
                                max(to_date(substr(RELATIONSHIPCREATIONDATE,1,10),'YYYY-MM-DD')	 )
                                from rty_cx_b_relationship_tbl relship
                                where 1=1
                                and reltypestatus = 'A'
                                and relship.objectpartypeopartynumber = relationship_rec1.typeid||'-'||relationship_rec1.nfid
                                --and relship.RelationshipCode = relationship_rec1.cxRelationTypeCode
                                and relship.RelationshipType = relationship_rec1.cxRelationType
                                and relship.subjectpartypeopartynumber = relationship_rec1.orgtypeid||'-'||relationship_rec1.orgid
                                --and sysdate between to_date(relationshipstartdate,'YYYY-MM-DD') and to_date(relationshipenddate,'YYYY-MM-DD')
								);
       -- and rownum =1;

	log_info(p_debug,p_batch_id,'entered in affliatoin validation procedure l_RELATIONSHIPENDDATE: '||l_RELATIONSHIPENDDATE);
	log_info(p_debug,p_batch_id,'entered in affliatoin validation procedure l_RELATIONSHIPSTARTDATE: '||l_RELATIONSHIPSTARTDATE);
	log_info(p_debug,p_batch_id,'entered in affliatoin validation procedure relationship_rec1.enddate: '||relationship_rec1.enddate);
	log_info(p_debug,p_batch_id,'entered in affliatoin validation procedure relationship_rec1.startdate: '||relationship_rec1.startdate);
	log_info(p_debug,p_batch_id,'entered in affliatoin validation procedure l_relationshiprecid: '||l_relationshiprecid);
	log_info(p_debug,p_batch_id,'entered in affliatoin validation procedure l_relationshipstartdate: '||l_relationshipstartdate);
	log_info(p_debug,p_batch_id,'entered in affliatoin validation procedure l_RELATIONSHIP_PREVIOUS_STARTDATE: '||l_RELATIONSHIP_PREVIOUS_STARTDATE);

		IF l_relationshiprecid IS NOT NULL THEN


			log_info(p_debug,p_batch_id,'entered in affliatoin validation procedure relationship_rec1.startdate: 1st if');

			IF (l_relationshipstartdate = relationship_rec1.startdate) OR 
				(l_relationshipstartdate > relationship_rec1.startdate and 
											l_relationshipenddate <= relationship_rec1.enddate) OR 
					(l_relationshipenddate < relationship_rec1.enddate)			THEN

				UPDATE rtyintg.rty_i027_customer_data_tbl
				set affiliation_update_relship = 'V',						
				relationship_rec_id = l_relationshiprecid,
				RELATIONSHIPSTARTDATE = (case when l_relationshipstartdate > relationship_rec1.startdate and 
											l_relationshipenddate <= relationship_rec1.enddate then l_relationshipstartdate_1
										 else relationship_rec1.startdate1
										 end),
				RELATIONSHIPENDDATE = (case 
									  when l_relationshipstartdate = relationship_rec1.startdate then relationship_rec1.enddate1
									  when l_relationshipstartdate > relationship_rec1.startdate and 
											l_relationshipenddate <= relationship_rec1.enddate then relationship_rec1.enddate1
									  when l_relationshipenddate < relationship_rec1.enddate
											and l_relationshipstartdate > relationship_rec1.startdate 
											then to_char(to_date(substr(relationship_rec1.enddate1,10),'YYYY-MM-DD')-1,'YYYY-MM-DD')
									  else relationship_rec1.enddate1
									  end)
				where status = 'I'
				and batch_id = p_batch_id
				and ra0_id =  relationship_rec1.ra0_id
				and affiliation_update_relship = 'N'
				and retry_count <=3  --FS-833
				;

			END IF;

				IF (l_relationshipstartdate > relationship_rec1.startdate) and 
											(l_relationshipenddate <= relationship_rec1.enddate 
												OR relationship_rec1.enddate is null OR relationship_rec1.enddate = '4712-12-31')
											 THEN
				log_info(p_debug,p_batch_id,'entered in affliatoin validation procedure relationship_rec1.startdate: 1st if insert');
				BEGIN
				INSERT INTO rty_i027_customer_data_tbl (CXRelationType,CXRelationTypeCode,CustomerType,CustomerId,orgtypeid,orgid,											RELATIONSHIPSTARTDATE,RELATIONSHIPENDDATE,
													status,batch_id,affiliation_create_relship,process_mode, creation_date,ra0_id,
													nfid,RA0_OBJECTNAME,ra0_processed,retry_count,RELATIONTYPECODE)
													VALUES(relationship_rec1.CXRelationType,
															relationship_rec1.CXRelationTypeCode,
															relationship_rec1.CustomerType,
															relationship_rec1.CustomerId,
															relationship_rec1.orgtypeid,
															relationship_rec1.orgid,
															relationship_rec1.StartDate1,
															l_RELATIONSHIP_PREVIOUS_STARTDATE, --enddate
															'I',
															p_batch_id,
															'V',
															'IMPORT_ROUTE',
															to_char(sysdate,'YYYY-MM-DD'),
															relationship_rec1.ra0_id||replace(substr(current_timestamp,11,instr(substr(current_timestamp,11),'.',1,3)),'.',null),
															relationship_rec1.nfid,
															relationship_rec1.RA0_OBJECTNAME,
															relationship_rec1.ra0_processed,
															'0',
                                                            relationship_rec1.RELATIONTYPECODE
															);
			exception
			when others then
				NUll;
			end;
			END IF;
		END IF;

		/*ELSIF --relationship_rec1.startdate > l_relationshipstartdate OR 
				l_relationshipstartdate > relationship_rec1.startdate then

			log_info(p_debug,p_batch_id,'entered in affliatoin validation procedure relationship_rec1.startdate: 2nd if');
			log_info(p_debug,p_batch_id,'entered in affliatoin validation procedure relationship_rec1.startdate: 2nd if');
			log_info(p_debug,p_batch_id,'2nd if: relationship_rec1.StartDate1--> '||relationship_rec1.StartDate1);
			log_info(p_debug,p_batch_id,'2nd if: l_RELATIONSHIP_PREVIOUS_STARTDATE--> '||l_RELATIONSHIP_PREVIOUS_STARTDATE);

			BEGIN
			INSERT INTO rty_i027_customer_data_tbl (CXRelationType,CXRelationTypeCode,CustomerType,CustomerId,orgtypeid,orgid,											RELATIONSHIPSTARTDATE,RELATIONSHIPENDDATE,
													status,batch_id,affiliation_create_relship,process_mode, creation_date,ra0_id,
													nfid,RA0_OBJECTNAME,ra0_processed,retry_count,RELATIONTYPECODE)
													VALUES(relationship_rec1.CXRelationType,
															relationship_rec1.CXRelationTypeCode,
															relationship_rec1.CustomerType,
															relationship_rec1.CustomerId,
															relationship_rec1.orgtypeid,
															relationship_rec1.orgid,
															relationship_rec1.StartDate1,
															case when l_relationshipstartdate > relationship_rec1.startdate 
																 then l_RELATIONSHIP_PREVIOUS_STARTDATE
															else relationship_rec1.EndDate1 end, --enddate
															'I',
															p_batch_id,
															'V',
															'IMPORT_ROUTE',
															to_char(sysdate,'YYYY-MM-DD'),
															relationship_rec1.ra0_id||replace(substr(current_timestamp,11,instr(substr(current_timestamp,11),'.',1,3)),'.',null),
															relationship_rec1.nfid,
															relationship_rec1.RA0_OBJECTNAME,
															relationship_rec1.ra0_processed,
															'0',
                                                            relationship_rec1.RELATIONTYPECODE
															);
			log_info(p_debug,p_batch_id,'new record inserted');
			commit;
			exception
			when others then
				populate_runtime_error(null,p_batch_id, 'while inserting new record error:--> '||substr(sqlerrm,1,500));
			END;												

				/*UPDATE rtyintg.rty_i027_customer_data_tbl
				set affiliation_create_relship = 'V' ,
					relationship_rec_id = l_relationshiprecid,
					affiliation_update_relship = (case when to_date(substr(relationship_rec1.startdate,1,10),'YYYY-MM-DD') > to_date(l_relationshipstartdate,'YYYY-MM-DD') then 'V' else 'N' end),
					RELATIONSHIPSTARTDATE = (case when to_date(substr(relationship_rec1.startdate,1,10),'YYYY-MM-DD') > to_date(						l_relationshipstartdate,'YYYY-MM-DD'
											) then l_relationshipstartdate else null end),
					RELATIONSHIPENDDATE = (case 
										  when to_date(l_relationshipstartdate,'YYYY-MM-DD')= to_date(substr(relationship_rec1.startdate,1,10),'YYYY-MM-DD') 
												then substr(relationship_rec1.enddate,1,10)
										  when to_date(substr(relationship_rec1.startdate,1,10),'YYYY-MM-DD') > to_date(l_relationshipstartdate,'YYYY-MM-DD'
												) then to_char(to_date(substr(relationship_rec1.startdate,1,10),'YYYY-MM-DD')-1,'YYYY-MM-DD')
										  else
										  to_char(substr(relationship_rec1.enddate,1,10),'YYYY-MM-DD')
										  end)
				where status = 'I'
				and batch_id = p_batch_id
				--and affiliation_create_relship = 'N'
				and ra0_id =  relationship_rec1.ra0_id;*/
		COMMIT;	

		log_info(p_debug,p_batch_id,'entered in affliatoin validation procedure relationship_rec1.startdate: in else block');
	exception
	when NO_DATA_FOUND then	
	NULL;
	/*--in the above block no data found then relationship does not exist
	--considering new relationship record
		UPDATE rtyintg.rty_i027_customer_data_tbl
			set affiliation_create_relship = 'V',
				RELATIONSHIPSTARTDATE = relationship_rec1.startdate,
				RELATIONSHIPENDDATE = relationship_rec1.enddate
			where status = 'I'
			--and enddate is null
			and affiliation_create_relship = 'N'
			and ra0_id = relationship_rec1.ra0_id;

			COMMIT;*/

	when others then
	l_errmsg := substr(sqlerrm,500);
		UPDATE rtyintg.rty_i027_customer_data_tbl
			set status = 'E',
				retry_count = retry_count + 1,
				error_message = 'Error while validating Relationship: '||l_errmsg
			where status = 'I'
			and ra0_id = relationship_rec1.ra0_id;

	 populate_runtime_error(null,p_batch_id, 'Error at procedure process_ind_affiliation_relationship 1 : '||substr(sqlerrm,500));
	END;
end loop;

--call import route affiliation procedure
process_affiliation(p_flow_id ,
					 p_credentail_name ,
					 p_batch_id ,
					 p_namespace ,
					 p_bucket,
                     p_debug);

EXCEPTION WHEN oTHERS THEN
populate_runtime_error(null,p_batch_id, 'Error at procedure process_ind_affiliation_relationship 1 : '||substr(sqlerrm,500));
END validate_affiliate_relship;

procedure process_affiliation(p_flow_id number,
								 p_credentail_name IN VARCHAR2,
								 p_batch_id number,
								 p_namespace VARCHAR2,
								 p_bucket VARCHAR2,
                                 p_debug IN VARCHAR2)
as
l_relship_count number;
p_object_name varchar2(1000) := 'IndividualAffiliation';

CURSOR get_relship_update_cur
is
select 
	distinct relationtypecode,batch_id
from  rtyintg.rty_i027_customer_data_tbl
where 1 = 1 --batch_id =  p_batch_id
and status = 'I'
and ra0_objectname = p_object_name
and affiliation_update_relship = 'V'
and retry_count <=3 --FS-833
;

CURSOR get_relship_create_cur
is
select 
	distinct  relationtypecode,batch_id
from  rtyintg.rty_i027_customer_data_tbl
where 1=1 --batch_id =  p_batch_id
and status = 'I'
and ra0_objectname = p_object_name
and affiliation_create_relship = 'V'
and retry_count <=3 --FS-833
;


CURSOR relship_update_cur(p_rel_type_code VARCHAR2)
is
select 
	ROW_NUMBER() Over (Order by ra0_id) columnseq,
ra0_id
from  rtyintg.rty_i027_customer_data_tbl
where batch_id =  p_batch_id
and status = 'I'
and ra0_objectname = p_object_name
and relationtypecode = p_rel_type_code
and affiliation_update_relship = 'V'
and retry_count <=3 --FS-833
;


CURSOR relship_create_cur(p_rel_type_code VARCHAR2)
is
select 
	ROW_NUMBER() Over (Order by ra0_id) columnseq,
ra0_id
from  rtyintg.rty_i027_customer_data_tbl
where batch_id =  p_batch_id
and status = 'I'
and ra0_objectname = p_object_name
and relationtypecode = p_rel_type_code
and affiliation_create_relship = 'V'
and retry_count <=3 --FS-833
;

l_relship_update_batch_id NUMBER;
l_relship_creat_batch_id NUMBER;

l_relship_update_count NUMBER := 0;
l_relship_create_count NUMBER := 0;

l_relship_update_file_name VARCHAR2(500);
l_relship_create_file_name VARCHAR2(500);
l_relship_type_code  VARCHAR2(1000);

PRAGMA AUTONOMOUS_TRANSACTION;
begin


log_info(p_debug,p_batch_id,'IN process affilciaton prc track1--> ');
FOR get_relship_type_rec IN get_relship_update_cur LOOP
log_info(p_debug,p_batch_id,'IN process affilciaton prc track2--> ');
l_relship_update_batch_id := p_flow_id||'0'||rty_i027_import_mannager_seq.nextval;
l_relship_update_file_name := 'I027_'||replace(get_relship_type_rec.relationtypecode,' ','_')||'_Update_'||l_relship_update_batch_id;
l_relship_update_count := 0;
l_relship_type_code := get_relship_type_rec.relationtypecode;

	FOR relship_update_rec in relship_update_cur(get_relship_type_rec.relationtypecode) loop
	log_info(p_debug,p_batch_id,'IN process affilciaton prc track3--> ');
		update  rtyintg.rty_i027_customer_data_tbl
		set batch_row_id = relship_update_rec.columnseq,
			batch_id = l_relship_update_batch_id
		where batch_id =  get_relship_type_rec.batch_id
		and ra0_id = relship_update_rec.ra0_id
		and ra0_objectname = p_object_name
		and relationtypecode = get_relship_type_rec.relationtypecode
		and affiliation_update_relship = 'V'
		and status = 'I'
		and retry_count <=3  --FS-833
		;

		COMMIT;

	END LOOP;

	--get update relationship records where aaffiliation_update_relship as 'V'
	BEGIN
dbms_output.put_line('track4');
		select count(1)
		into l_relship_update_count
		from rtyintg.rty_i027_customer_data_tbl nftbl
		where batch_id = l_relship_update_batch_id
		and affiliation_update_relship = 'V'
		and relationtypecode = get_relship_type_rec.relationtypecode
		and ra0_objectname = p_object_name
		and CXRelationTypeCode != 'NA'
		and status = 'I'
		and retry_count <=3  --FS-833
		;

	EXCEPTION
	when others THEN
	NULL;
	END;

	log_info(p_debug,l_relship_update_batch_id,'extracting data for affiliation_update_relship : l_relship_update_count: '||l_relship_update_count);
	dbms_output.put_line('track5 l_relship_update_count--> '||l_relship_update_count);
            IF l_relship_update_count <> 0 THEN          
			--write data to csv

            BEGIN
	      --FS-833 retry_count <= 3
           DBMS_CLOUD.EXPORT_DATA( credential_name => p_credentail_name, --'RTY_ATPDEV1_OS_CRED01',
                                file_uri_list =>'https://swiftobjectstorage.us-ashburn-1.oraclecloud.com/v1/'||p_namespace||'/'||p_bucket||'/'||l_relship_update_file_name||'.csv',
                                query => 'select column1,column2,column3,column4,column5,column6,column7
                                            from rtyintg.rty_i027_importmgr_tbl_hdr where objectname=''ACCOUNT_RELSHIP_UPDATE''
                                            UNION ALL                                            
                                            SELECT distinct
                                                to_char(nftbl.relationship_rec_id),
                                                nftbl.CXRelationType,
                                                 nftbl.CXRelationTypeCode,
                                                nftbl.CustomerType||''-''||CustomerId objectpartynum,
                                                nftbl.orgtypeid||''-''||nftbl.orgid subjecttpartynum,
                                                RELATIONSHIPSTARTDATE,
												RELATIONSHIPENDDATE
                                            from rtyintg.rty_i027_customer_data_tbl nftbl
                                            where batch_id =  '||l_relship_update_batch_id||'
                                            and affiliation_update_relship = ''V''
											and CXRelationTypeCode != ''NA''
											and retry_count <= 3
											and status = ''I''
                                            ',
                                format => JSON_OBJECT( 'type' value 'csv'));


			 BEGIN
               INSERT INTO RTY_I027_IMPORTROUTE_POLLING_TBL
               VALUES (p_flow_id,l_relship_update_batch_id,'AFFILIATIONUPDATE',--hierarchy
                        p_object_name, --objectname
                        'Relationship',--objectcode
                        'R',l_relship_update_file_name,sysdate
                        );
                    COMMIT;           
                EXCEPTION
				WHEN OTHERS THEN



                log_info(p_debug,l_relship_update_batch_id,'Error while inserting relship batch: ' || sqlerrm);
			END;               

           EXCEPTION
            WHEN OTHERS THEN

			UPDATE rtyintg.rty_i027_customer_data_tbl
			set status = 'E',
				retry_count = retry_count + 1,
				batch_id = p_batch_id,
				error_message = 'Error while processing update relship batch: '
			where status = 'I';

               log_info(p_debug,l_relship_update_batch_id,'Error while extracting affl update relshipdata: ' || sqlerrm);
               NULL;
        END;
        END IF;

END LOOP;	

	FOR get_relship_create_rec IN get_relship_create_cur LOOP
	log_info(p_debug,p_batch_id,'IN process affilciaton prc track4--> ');

l_relship_creat_batch_id := p_flow_id||'0'||rty_i027_import_mannager_seq.nextval;
l_relship_create_file_name :=  'I027_'||replace(get_relship_create_rec.relationtypecode,' ','_')||'_Create_'||l_relship_creat_batch_id;
l_relship_create_count  := 0;
l_relship_type_code := get_relship_create_rec.relationtypecode;

	FOR relship_create_rec in relship_create_cur(get_relship_create_rec.relationtypecode) loop
	log_info(p_debug,p_batch_id,'IN process affilciaton prc track5 l_relship_creat_batch_id--> '||l_relship_creat_batch_id);
		update  rtyintg.rty_i027_customer_data_tbl
		set batch_row_id = relship_create_rec.columnseq,
			batch_id = l_relship_creat_batch_id
		where batch_id =  get_relship_create_rec.batch_id
		and ra0_id = relship_create_rec.ra0_id
		and ra0_objectname = p_object_name
		and relationtypecode = get_relship_create_rec.relationtypecode
		and affiliation_create_relship = 'V'
		and status = 'I'
		and retry_count <=3  --FS-833
		;

		COMMIT;

	END LOOP;

	--get create relationship records where aaffiliation_create_relship as 'V'
BEGIN

	select count(1)
	into l_relship_create_count
	from rtyintg.rty_i027_customer_data_tbl nftbl
	where batch_id = l_relship_creat_batch_id
	and affiliation_create_relship = 'V'
	and relationtypecode = get_relship_create_rec.relationtypecode
	and ra0_objectname = p_object_name
	and CXRelationTypeCode != 'NA'
	and status = 'I'
	and retry_count <=3  --FS-833
	;

EXCEPTION
when others THEN
NULL;
END;

	log_info(p_debug,p_batch_id,'IN process affilciaton prc track5 l_relship_create_count--> '||l_relship_create_count);


		 IF l_relship_create_count <> 0 THEN          
			--write data to csv

            BEGIN
	       --FS-833 retry_count <= 3
           DBMS_CLOUD.EXPORT_DATA( credential_name => p_credentail_name, --'RTY_ATPDEV1_OS_CRED01',
                                file_uri_list =>'https://swiftobjectstorage.us-ashburn-1.oraclecloud.com/v1/'||p_namespace||'/'||p_bucket||'/'||l_relship_create_file_name||'.csv',
                                query => 'select column2,column3,column4,column5,column6,column7
                                            from rtyintg.rty_i027_importmgr_tbl_hdr where objectname=''ACCOUNT_RELSHIP_UPDATE''
                                            UNION ALL                                            
                                            SELECT distinct
												nftbl.CXRelationType,
                                                 nftbl.CXRelationTypeCode,
                                                nftbl.CustomerType||''-''||CustomerId objectpartynum,
                                                nftbl.orgtypeid||''-''||nftbl.orgid subjecttpartynum,
                                                SUBSTR(nftbl.RELATIONSHIPSTARTDATE,1,10) startdate,
												SUBSTR(nftbl.RELATIONSHIPENDDATE,1,10) enddate
                                            from rtyintg.rty_i027_customer_data_tbl nftbl
                                            where batch_id =  '||l_relship_creat_batch_id||'
                                            and affiliation_create_relship = ''V''
											and CXRelationTypeCode != ''NA''
											and retry_count <= 3
											and status = ''I''
                                            ',
                                format => JSON_OBJECT( 'type' value 'csv'));


			 BEGIN
               INSERT INTO RTY_I027_IMPORTROUTE_POLLING_TBL
               VALUES (p_flow_id,l_relship_creat_batch_id,'AFFILIATIONCREATE',--hierarchy
                        p_object_name, --objectname
                        'Relationship',--objectcode
                        'R',l_relship_create_file_name,sysdate
                        );
                    COMMIT;           
                EXCEPTION
				WHEN OTHERS THEN


                log_info(p_debug,l_relship_creat_batch_id,'Error while inserting relship batch: ' || sqlerrm);
			END;               

           EXCEPTION
            WHEN OTHERS THEN
			UPDATE rtyintg.rty_i027_customer_data_tbl
			set status = 'E',
				retry_count = retry_count + 1,
				batch_id = p_batch_id,
				error_message = 'Error while processing Insert relship batch: '
			where status = 'I';
               log_info(p_debug,l_relship_creat_batch_id,'Error while extracting AFFILIATIONCREATE relshipdata: ' || sqlerrm);

        END;
        END IF;

	END LOOP;



		END process_affiliation;  

procedure terminate_account(p_flow_id number,
								 p_credentail_name IN VARCHAR2,
								 p_batch_id number,
								 p_namespace VARCHAR2,
								 p_bucket VARCHAR2,
                                 p_debug IN VARCHAR2)
as

p_object_name varchar2(1000) := 'IndividualAffiliation';

CURSOR terminate_acc_cur
is
select 
	ROW_NUMBER() Over (Order by ra0_id) columnseq,
ra0_id
from  rtyintg.rty_i027_customer_data_tbl
where batch_id =  p_batch_id
and status = 'P'
and ra0_objectname = p_object_name
and affiliation_update_relship = 'P'
and TERMINATIONREASONKEY IS NOT NULL
and termination_account = 'V'
and retry_count <=3  --FS-833
;

l_terminate_acc_batch_id NUMBER;

l_terminate_acc_count NUMBER := 0;

l_terminate_acc_file_name VARCHAR2(500);


PRAGMA AUTONOMOUS_TRANSACTION;
begin

l_terminate_acc_file_name := 'I027_Terminate_Account_'||p_batch_id;

 log_info(p_debug,p_batch_id,'track1');
	FOR terminate_acc_rec IN terminate_acc_cur loop

		update  rtyintg.rty_i027_customer_data_tbl
		set batch_row_id = terminate_acc_rec.columnseq
		where batch_id =  p_batch_id
		and ra0_id = terminate_acc_rec.ra0_id
		and ra0_objectname = p_object_name
		and affiliation_update_relship = 'P'
		and TERMINATIONREASONKEY IS NOT NULL
		and termination_account = 'V'
		and status = 'P'
		and retry_count <=3  --FS-833
		;

		COMMIT;

	END LOOP;
	log_info(p_debug,p_batch_id,'track2');
--get terminate account count where Relationship got updated
BEGIN

	select count(1)
	into l_terminate_acc_count
	from rtyintg.rty_i027_customer_data_tbl nftbl
	where batch_id =  p_batch_id
	and ra0_objectname = p_object_name
	and affiliation_update_relship = 'P'
	and TERMINATIONREASONKEY IS NOT NULL
	and termination_account = 'V'
	and status = 'P'
	and retry_count <=3  --FS-833
	;

EXCEPTION
when others THEN
NULL;
END;

          log_info(p_debug,p_batch_id,'terminate record count : l_terminate_acc_count: '||l_terminate_acc_count);
            IF l_terminate_acc_count <> 0 THEN          
			--write data to csv

            BEGIN
			--FS-833 retry_count <= 3
           DBMS_CLOUD.EXPORT_DATA( credential_name => p_credentail_name, --'RTY_ATPDEV1_OS_CRED01',
                                file_uri_list =>'https://swiftobjectstorage.us-ashburn-1.oraclecloud.com/v1/'||p_namespace||'/'||p_bucket||'/'||l_terminate_acc_file_name||'.csv',
                                query => 'select distinct column6,column33,column34,column35
										  from rtyintg.rty_i027_importmgr_tbl_hdr where objectname=''ACCOUNT_UPDATE''
                                            UNION ALL                                            
                                            SELECT distinct
                                                nftbl.CustomerType||''-''||CustomerId,
												''TERMINATED'',
                                                nftbl.termination_reason,
                                                SUBSTR(nftbl.enddate,1,10) enddate                                              
                                            from rtyintg.rty_i027_customer_data_tbl nftbl
											where 1=1
											and ra0_objectname = ''IndividualAffiliation''
											and affiliation_update_relship = ''P''
											and TERMINATIONREASONKEY IS NOT NULL
											and status = ''P''
											and batch_id =  '||p_batch_id||'
											and termination_account = ''V''
											and retry_count <= 3
                                            and affiliation_update_relship = ''P''
                                            ',
                                format => JSON_OBJECT( 'type' value 'csv'));


			 BEGIN
               INSERT INTO RTY_I027_IMPORTROUTE_POLLING_TBL
               VALUES (p_flow_id,p_batch_id,
						'TERMINATEACCOUNT',--objecthierarchy
                      'Individual',--objectname
						'Account', --objectcode
                        'R',l_terminate_acc_file_name,sysdate
                        );
                    COMMIT;           
                EXCEPTION
				WHEN OTHERS THEN
                log_info(p_debug,p_batch_id,'Error while inserting relship batch: ' || sqlerrm);
			END;               

           EXCEPTION
            WHEN OTHERS THEN
               log_info(p_debug,p_batch_id,'Error while extracting terminate account data: ' || sqlerrm);

			UPDATE rtyintg.rty_i027_customer_data_tbl
			set status = 'E',
				retry_count = retry_count + 1,
				batch_id = p_batch_id,
				error_message = 'Error while processing terminate account data: '
			where status = 'I';
        END;
        END IF;



		END terminate_account;  		

END;
/


CREATE OR REPLACE PACKAGE BODY rty_i027_cmn_pkg AS

    PROCEDURE get_file_name (
        x_file_name OUT VARCHAR2,
        x_file_status OUT VARCHAR2
    ) AS
        l_days_cnt  NUMBER := 0;
        l_max_date  DATE;
        l_file_name VARCHAR2(1000);
    BEGIN

        BEGIN
        SELECT
            round(sysdate - from_date)
        INTO l_days_cnt
        FROM
            rty_i027_error_log_tbl
        WHERE 1=1
        --AND  to_date(sysdate,'DD-MON-YY') between to_date(from_date,'DD-MON-YY') and to_date(file_to_date,'DD-MON-YY')
        AND  from_date = (SELECT
                                MAX(from_date)
                            FROM
                                rty_i027_error_log_tbl
                                );                    
        EXCEPTION WHEN OTHERS THEN
            l_days_cnt := -1;
            dbms_output.put_line('track1--> ');
        END;

        dbms_output.put_line('l_days_cnt--> '||l_days_cnt);

        IF l_days_cnt > 7 OR l_days_cnt = -1 THEN
            INSERT INTO rty_i027_error_log_tbl VALUES (
                sysdate, --from_date
                sysdate + 6, --to_date
                'I027_Error_Log_' 
                || to_char(sysdate , 'DDMON') 
                || '_'
                || to_char(sysdate + 6, 'DDMON')
                || '_'
                || to_char(sysdate, 'YYYY')
                ||'.csv', --filename
                sysdate,null,null,null,null,null
            );

            COMMIT;
            x_file_status := 'NEW';
            dbms_output.put_line('x_file_status--> '||x_file_status);
        ELSE
            x_file_status := 'OLD';
        END IF;

        SELECT
            file_name
        INTO l_file_name
        FROM
            rty_i027_error_log_tbl
        WHERE
            from_date = (
                SELECT
                    MAX(from_date)
                FROM
                    rty_i027_error_log_tbl
            );

        x_file_name := l_file_name;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
    END;

END;
/

CREATE SEQUENCE RTY_CX_DEPOSIT_SEQ
  START WITH 328708
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
  NOKEEP
  NOSCALE
  GLOBAL;


CREATE SEQUENCE RTY_CX_PAYMENT_S
  START WITH 8259
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
  NOKEEP
  NOSCALE
  GLOBAL;


CREATE SEQUENCE RTY_I027_IMPORT_MANNAGER_SEQ
  START WITH 843743
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
  NOKEEP
  NOSCALE
  GLOBAL;

CREATE TABLE BKP_RTY_CX_B_TRACKED_TBL_APR17
(
  ALIAS_ID_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  AREAOFFOCUS_C         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DESIGNATION_ID_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DONORNAME_ID_C        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ENTITY_C              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FUND_C                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  GIFTNAME_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  GIFTTYPE_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXOWNER_ID_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PRIMARYDONORIDTYPE_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PRIMARYDONORID_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  REPORTPREFERRED_C     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ROWTYPE               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  STATUSID_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TEMPLATENAME_C        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_BICC_ERROR_TBL
(
  INSTANCE_ID    NUMBER,
  FILE_NAME      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TABLE_NAME     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ERROR_MESSAGE  VARCHAR2(10000 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE  VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE1     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE4     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE5     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_BICC_ERROR_TBL_BKP24JUNE24
(
  INSTANCE_ID    NUMBER,
  FILE_NAME      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TABLE_NAME     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ERROR_MESSAGE  VARCHAR2(10000 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE  VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE1     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE4     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE5     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_ACCOUNTPII_TBL
(
  ACCOUNTID_C               NUMBER,
  ACCOUNTNAME_C             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ACCOUNTTYPE_C             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATEDBY                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGANIZATIONPROFILE_ID_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PAN_C                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RRNCOLLECTIONDATE_C       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RRN_C                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_ACCOUNTS_STG_TBL
(
  ADDRESS1               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COUNTRY                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EMAILADDRESS           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGANIZATIONNAME       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGANIZATIONPROFILEID  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGANIZATIONTYPE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARTYID                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARTYNAME              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARTYNUMBER            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARTYTYPE              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_ACCOUNTS_TBL
(
  ADDRESS1               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COUNTRY                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EMAILADDRESS           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGANIZATIONNAME       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGANIZATIONPROFILEID  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGANIZATIONTYPE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARTYID                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARTYNAME              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARTYNUMBER            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARTYTYPE              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_ACCTPERIOD_STG_TBL
(
  CALENDARYEAR_C     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATEDBY          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FISCALYEAR_C       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                 NUMBER,
  LASTUPDATEDATE     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATELOGIN    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PERIODENDDATE_C    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PERIODMONTH_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PERIODSTARTDATE_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PERIOD_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  STATUS_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_ACCTPERIOD_TBL
(
  CALENDARYEAR_C     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATEDBY          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FISCALYEAR_C       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                 NUMBER,
  LASTUPDATEDATE     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATELOGIN    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PERIODENDDATE_C    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PERIODMONTH_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PERIODSTARTDATE_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PERIOD_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  STATUS_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_ALIAS_STG_TBL
(
  ACTIVE_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ALIASDESRIPTION_C         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ALIAS_ID_C                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CONTRIBUTIONFLAG_C        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CORPCURRENCYCODE          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATEDBY                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURCYCONVRATETYPE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DESRIPTION_C              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FEEPERCENTAGE_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FUND_C                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  GRANTRELATED_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATELOGIN           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  NONCONTRIBUTIONRELATED_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXOWNER_ID_C          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXSEARCHFILTER_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PYCALCULATION_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PLEDGERELATED_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ROWTYPE                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBFUND_C                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TEMPLATENAME_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TRACKEDGIFTRELATED_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TRACKEDGIFT_ID_C          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_ALIAS_TBL
(
  ACTIVE_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ALIASDESRIPTION_C         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ALIAS_ID_C                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CONTRIBUTIONFLAG_C        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CORPCURRENCYCODE          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATEDBY                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURCYCONVRATETYPE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DESRIPTION_C              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FEEPERCENTAGE_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FUND_C                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  GRANTRELATED_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATELOGIN           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  NONCONTRIBUTIONRELATED_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXOWNER_ID_C          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXSEARCHFILTER_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PYCALCULATION_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PLEDGERELATED_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ROWTYPE                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBFUND_C                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TEMPLATENAME_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TRACKEDGIFTRELATED_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TRACKEDGIFT_ID_C          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_COMMITMENTS_STG_TBL
(
  CREATIONDATE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TRANSACTIONDATE_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_COMMITMENTS_TBL
(
  CREATIONDATE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TRANSACTIONDATE_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_DAILYRATES_STG_TBL
(
  DAILYRATECONVERSIONDATE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATECONVERSIONRATE       NUMBER,
  DAILYRATECONVERSIONTYPE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATECREATEDBY            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATECREATIONDATE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATEFROMCURRENCY         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATELASTUPDATEDATE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATELASTUPDATELOGIN      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATELASTUPDATEDBY        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATEOBJECTVERSIONNUMBER  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATESTATUSCODE           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATETOCURRENCY           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_DAILYRATES_TBL
(
  DAILYRATECONVERSIONDATE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATECONVERSIONRATE       NUMBER,
  DAILYRATECONVERSIONTYPE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATECREATEDBY            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATECREATIONDATE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATEFROMCURRENCY         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATELASTUPDATEDATE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATELASTUPDATELOGIN      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATELASTUPDATEDBY        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATEOBJECTVERSIONNUMBER  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATESTATUSCODE           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DAILYRATETOCURRENCY           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_EVENTS_STG_TBL
(
  CORPCURRENCYCODE        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATEDBY               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURCYCONVRATETYPE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DECSRIPTION_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ERPPROJECTID_C          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EVENTDESCIPTION_C       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATELOGIN         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXOWNER_ID_C        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXSEARCHFILTER_C    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  REGISTRATIONALIAS_ID_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ROWTYPE                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TAXALIAS_ID_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TAXPERCENTAGE_C         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TEMPLATENAME_C          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_EVENTS_TBL
(
  CORPCURRENCYCODE        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATEDBY               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURCYCONVRATETYPE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DECSRIPTION_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ERPPROJECTID_C          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EVENTDESCIPTION_C       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATELOGIN         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXOWNER_ID_C        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXSEARCHFILTER_C    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  REGISTRATIONALIAS_ID_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ROWTYPE                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TAXALIAS_ID_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TAXPERCENTAGE_C         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TEMPLATENAME_C          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_GRANTS_STG_TBL
(
  CREATIONDATE    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DESCRIPTION_C   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ROWTYPE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TEMPLATENAME_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_GRANTS_TBL
(
  CREATIONDATE    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DESCRIPTION_C   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ROWTYPE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TEMPLATENAME_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_LOOKUP_TBL
(
  CREATIONDATE     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ENABLEDFLAG      VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  LANGUAGE         VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE   VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  LOOKUPCODE1      VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  LOOKUPTYPE1      VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  MEANING          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  STARTDATEACTIVE  VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  TAG              VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  TERRITORYCODE    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_PARTY_NFID_STG_TBL
(
  CREATEDBY              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EXTNATTRIBUTECHAR002   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGPARTYPARTYID        NUMBER,
  ORGPARTYPARTYTYPE      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGPARTYSTATUS         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGANIZATIONPROFILEID  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARTYID                NUMBER,
  PARTYNUMBER            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  STATUS                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_PARTY_NFID_TBL
(
  CREATEDBY              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EXTNATTRIBUTECHAR002   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGPARTYPARTYID        NUMBER,
  ORGPARTYPARTYTYPE      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGPARTYSTATUS         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGANIZATIONPROFILEID  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARTYID                NUMBER,
  PARTYNUMBER            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  STATUS                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_PLEDGES_STG_TBL
(
  ACCOUNTID_C        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ACCOUNTTYPE_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ACCOUNTINGDATE_C   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ALIAS_ID_C         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DONORNAME_ID_C     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FUND_C             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PLEDGEAMOUNT_C     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PLEDGECLOSEDATE_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PLEDGENAME_C       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PLEDGESTATUS_C     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_PLEDGES_TBL
(
  ACCOUNTID_C        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ACCOUNTTYPE_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ACCOUNTINGDATE_C   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ALIAS_ID_C         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DONORNAME_ID_C     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FUND_C             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PLEDGEAMOUNT_C     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PLEDGECLOSEDATE_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PLEDGENAME_C       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PLEDGESTATUS_C     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_RELATIONSHIP_STG_TBL
(
  OBJECTPARTYPEOPARTYID           NUMBER,
  OBJECTPARTYPEOPARTYNUMBER       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELTYPESTATUS                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIPCODE                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIPCREATIONDATE        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIPENDDATE             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIPID                  NUMBER,
  RELATIONSHIPRECID               NUMBER,
  RELATIONSHIPSTARTDATE           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIPTYPE                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBJECTPARTYPEOPARTYNAME        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBJECTPARTYPEOPARTYNUMBER      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBJECTPARTYPEOPARTYTYPE        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBJECTPARTYPEOPARTYUNIQUENAME  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBJECTPARTYPEOSUBJECTPARTYID   NUMBER
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_RELATIONSHIP_TBL
(
  OBJECTPARTYPEOPARTYID           NUMBER,
  OBJECTPARTYPEOPARTYNUMBER       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELTYPESTATUS                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIPCODE                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIPCREATIONDATE        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIPENDDATE             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIPID                  NUMBER,
  RELATIONSHIPRECID               NUMBER,
  RELATIONSHIPSTARTDATE           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIPTYPE                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBJECTPARTYPEOPARTYNAME        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBJECTPARTYPEOPARTYNUMBER      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBJECTPARTYPEOPARTYTYPE        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBJECTPARTYPEOPARTYUNIQUENAME  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBJECTPARTYPEOSUBJECTPARTYID   NUMBER
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_TERRITORIES
(
  CREATIONDATE          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TERRITORYCODE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TERRITORYSHORTNAME    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORD_CREATION_DATE  DATE
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_TRACKED_DONOR_STG_TBL
(
  ACTUALCONTRIBUTOR_C  VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CORPCURRENCYCODE     VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CREATEDBY            VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CURCYCONVRATETYPE    VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  DONOR_ID_C           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ID                   VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATELOGIN      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PRIMARYDONOR_C       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  REPORTRECIPIENT_C    VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  REPORTRECIPIENTS_C   VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ROWTYPE              VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TG_DONOR_ID_C        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TG_DONORTYPE_C       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TEMPLATENAME_C       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TRACKED_ID_C         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_TRACKED_DONOR_TBL
(
  ACTUALCONTRIBUTOR_C  VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CORPCURRENCYCODE     VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CREATEDBY            VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CURCYCONVRATETYPE    VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  DONOR_ID_C           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ID                   VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATELOGIN      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PRIMARYDONOR_C       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  REPORTRECIPIENT_C    VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  REPORTRECIPIENTS_C   VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ROWTYPE              VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TG_DONOR_ID_C        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TG_DONORTYPE_C       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TEMPLATENAME_C       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TRACKED_ID_C         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_TRACKED_STG_TBL
(
  ALIAS_ID_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  AREAOFFOCUS_C         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DESIGNATION_ID_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DONORNAME_ID_C        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ENTITY_C              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FUND_C                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  GIFTNAME_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  GIFTTYPE_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LIMITEDTODONORS_C     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXOWNER_ID_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PRIMARYDONORIDTYPE_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PRIMARYDONORID_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  REPORTPREFERRED_C     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ROWTYPE               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  STATUSID_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TEMPLATENAME_C        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_B_TRACKED_TBL
(
  ALIAS_ID_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  AREAOFFOCUS_C         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DESIGNATION_ID_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DONORNAME_ID_C        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ENTITY_C              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FUND_C                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  GIFTNAME_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  GIFTTYPE_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LIMITEDTODONORS_C     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXOWNER_ID_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PRIMARYDONORIDTYPE_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PRIMARYDONORID_C      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  REPORTPREFERRED_C     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ROWTYPE               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  STATUSID_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TEMPLATENAME_C        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_GET_INTEGRATION_STATUS
(
  INSTANCE_ID         VARCHAR2(255 BYTE) COLLATE USING_NLS_COMP,
  INTEGRATION_STATUS  VARCHAR2(255 BYTE) COLLATE USING_NLS_COMP,
  PARENT_INSTANCE_ID  VARCHAR2(255 BYTE) COLLATE USING_NLS_COMP,
  INTEGRATION_NAME    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE       VARCHAR2(20 BYTE) COLLATE USING_NLS_COMP DEFAULT sysdate,
  RECORD_LEVEL        VARCHAR2(20 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_PMT_DTL_STG_TBL
(
  FILE_ID                                NUMBER,
  FLOW_ID                                NUMBER,
  HDR_ID                                 NUMBER,
  LINE_ID                                NUMBER,
  CT_ID                                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  STATUS                                 VARCHAR2(10 BYTE) COLLATE USING_NLS_COMP,
  FILE_TYPE                              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP DEFAULT sysdate,
  COMMITMENTID_C                         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEADDRESS3_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEADDRESS1_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEDONORTYPE_C             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEDESCRIPTIONOVERRIDE_C   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CHARITABLEFOUNDATION_C                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TRANSFERTYPE_C                         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEFAMILYNAME_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALHONOREE_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COMMENTS_C                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOOFFICER_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ERRORCOMMENT_C                         VARCHAR2(10000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOADDRESS2_C                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PDDONORIDTYPE_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREDITORGTYPE_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PRESENTATIONDATE_C                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ALIAS_C                                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATEDBY                              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXOWNER_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALPHF_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREECOUNTRY_C                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOSTATEPROVINCE_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREECITY_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEPOSTAL_C                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXOWNER_ID_C                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTCURRENCY_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SEQUENTIALLINENUMBER_C                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEEMAIL_C                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PROCESSFLAG_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOPHONE_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREESTATEPROVINCE_C             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TRACKEDGIFTID_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECIPIENTID_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CRYSTALCERTIFNAME_C                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREDITORGANIZATIONID_C                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEADDRESS2_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECIPIENTIDTYPE_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEOCCASION_C              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOEMAIL_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEDONORID_C               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  NAMEONLETTER_C                         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOADDRESS1_C                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOPOSTAL_C                         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ADMINFEEPERCENT_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ERRORFLAG_C                            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOADDRESS3_C                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  UPLOADDATEANDTIME_C                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  GRANTS_C                               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ADMINFEEOVERRIDE_C                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TAXRECEIPTREQUIRED_C                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOCOUNTRY_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTONAME_C                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PD_DONORID_C                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DONORDISTRICT_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTESUPPRESSFAMILYLETTER_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTAMOUNT_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOCITY_C                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE                         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_RECIPIENT_NAME                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_DONORNAME                            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_TRACKEDGIFT                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARENTRECORDNUMBER                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_GRANTNAME                            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_PARTY_ID                             NUMBER,
  TOTALPAYMENTAMOUNT                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_ALIAS_ID_C                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_PROGRAM_YEAR                         NUMBER,
  C_DONORDISTRICTNAME                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE1                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE4                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE5                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_CREDITORGNAME                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_CREDITORGTYPE                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_CREDITORGANIZATIONID                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_DONOR_COUNTRY                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_DONOR_EMAIL                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_DONOR_ADDRESS1                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  IMPORT_ROUTE_ID                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CONVERSIONRATE                         VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  BATCH_ID                               NUMBER,
  LINE_ROW_ID                            NUMBER,
  C_PLEDGE_ID                            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_COMMITMENT_ID                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  C_UPDATE_PLEDGE                        VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  RECEIPTFREQUENCY_C                     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ASSOCIATETOPLEDGE_C                    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  PLEDGE_APPLIED_AMOUNT                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_PMT_ERR_TBL
(
  FILE_ID        NUMBER,
  FLOW_ID        NUMBER,
  HDR_ID         NUMBER,
  LINE_ID        NUMBER,
  ERR_CODE       VARCHAR2(5000 BYTE) COLLATE USING_NLS_COMP,
  ERR_MSG        VARCHAR2(5000 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE  VARCHAR2(20 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_PMT_FILE_ENTRY_TBL
(
  FLOW_ID        NUMBER,
  FILE_ID        NUMBER,
  FILE_NAME      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FILE_STATUS    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  BATCH_STATUS   VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE  VARCHAR2(20 BYTE) COLLATE USING_NLS_COMP,
  ERROR_MESSAGE  VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  INSTANCE_ID    VARCHAR2(200 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_PMT_REVERSAL_STG_TBL
(
  FLOW_ID                                VARCHAR2(200 BYTE) COLLATE USING_NLS_COMP,
  FILE_ID                                VARCHAR2(200 BYTE) COLLATE USING_NLS_COMP,
  INSTANCEID                             VARCHAR2(200 BYTE) COLLATE USING_NLS_COMP,
  STATUS                                 VARCHAR2(20 BYTE) COLLATE USING_NLS_COMP,
  ERROR_MSG                              VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PYID                                   VARCHAR2(50 BYTE) COLLATE USING_NLS_COMP,
  CTID                                   VARCHAR2(200 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME                             VARCHAR2(200 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER                           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTS_ID_C                          VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATELOGIN                        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CONFLICTID                             VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  USERLASTUPDATEDATE                     VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE                           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CURCYCONVRATETYPE                      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CORPCURRENCYCODE                       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  DONORNAME_ID_C                         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  DONORNAME_C                            VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ALIAS_ID_C                             VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ALIAS_C                                VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TRACKEDGIFTID_ID_C                     VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TRACKEDGIFTID_C                        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TAXRECEIPTREQUIRED_C                   VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TAXRECEIPTPRINT_C                      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  COMMENTS_C                             VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  GRANTS_ID_C                            VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  GRANTS_C                               VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TAXRECEIPT_C                           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTID_C                            VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ANONYMOUSFLAG_C                        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  DECEASED_C                             VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TRANSFERTYPE_C                         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  DONORADDRESSLINE1_C                    VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SENDERPFLAG_C                          VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SENDTORPM_C                            VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTAMOUNT_C                        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  RATETYPE_C                             VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CONVERSIONRATE_C                       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  USDAMOUNT_C                            VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  QUIDPROQUOCOUNT_C                      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  QUIDPROQUORATE_C                       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  QUIDPROQUORATES_C                      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  COMMITMENTID_ID_C                      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  COMMITMENTID_C                         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTCURRENCIES_C                    VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  USDAMOUNTS_C                           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  DONORDISTRICT_C                        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ADMINFEE_C                             VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PROGRAMYEAR_C                          VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PLEDGEID_ID_C                          VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PLEDGEID_C                             VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MULTIPLEPAYMENTDETAILIDS_C             VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  RECIPIENTNAME_ID_C                     VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  RECIPIENTNAME_C                        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  RECIPIENTID_C                          VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CREDITORG_ID_C                         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CREDITORG_C                            VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CREDITORGTYPE_C                        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CREDITORGANIZATIONID_C                 VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TEMPLATENAME_C                         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ASSOCIATETOPLEDGE_C                    VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  COPYCOLLAPSE_C                         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TAXRECEIPTNUMBER_C                     VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ERPUPDATEDATE_C                        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  IRAFLAG_C                              VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  EXTERNALDAFFLAG_C                      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CHARITABLEFOUNDATION_C                 VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTCANCEL_C                        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TOTALPAYMENTAMMOUNT_C                  VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PD_DONORID_C                           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SPLIT_C                                VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CAMPAIGNID_C                           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CORPORATEMATCHINGGIFT_C                VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CHANGECATEGORY_C                       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ORIGINALPAYMENTDETAILID_C              VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  STATUS_C                               VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PAYROLLDEDUCTION_C                     VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTHEADERAMOUNT_C                  VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PROGRAMYEAR2_C                         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PHS_C                                  VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ESTATEINPROCESS_C                      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  LEGACY_C                               VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALPHF_C                          VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SEQUENTIALLINENUMBER_C                 VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  QUIDPROQUODESCRIPTION_C                VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  QUIDPROQUOAMOUNT1_C                    VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PDDONORIDTYPE_C                        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEFAMILYNAME_C            VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEOCCASION_C              VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTESUPPRESSFAMILYLETTER_C  VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALHONEREE_C                      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEDESCRIPTIONOVERRIDE_C   VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEDONORID_C               VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEDONORIDTYPE_C           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEADDRESS1_C                  VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEADDRESS2_C                  VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREECITY_C                      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREECOUNTRY_C                   VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEEMAIL_C                     VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEPOSTAL_C                    VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREESTATEPROVINCE_C             VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOADDRESS1_C                       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOADDRESS2_C                       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOADDRESS3_C                       VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOCITY_C                           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOCOUNTRY_C                        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTONAME_C                           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOOFFICER_C                        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOPHONE_C                          VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOPOSTAL_C                         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOSTATEPROVENCE_C                  VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CRYSTALCERTIFNAME_C                    VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PRESENTATIONDATE_C                     VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEADDRESS3_C                  VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  NAMEONLETTER_C                         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SENDRECOGNITION_C                      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ADMINFEEPERCENT_C                      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  RECIPIENTIDTYPE_C                      VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  DONOREMAIL_C                           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  DONORCOUNTRY_C                         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  LINETYPE_C                             VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ERRORSTATISTICSCODE_C                  VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ERRORSTATISTICSQTY_C                   VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  RECEIPTFREQUENCY_C                     VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  PYCALCULATION_C                        VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOEMAIL_C                          VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOSTATEPROVINCE1_C                 VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CONVERTEDTRANSACTIONID_C               VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  SOURCENAME_C                           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CAMPAIGNIDENTIFIER_C                   VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CHUNKNUMBER_C                          VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  GLSTATUS_C                             VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  TAXRECEIPTINPROGRESS_C                 VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ACKNOWLEDGEMENTSENT_C                  VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ACKNOWLEDGEMENTSENTDATE_C              VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  CREATEDBY                              VARCHAR2(200 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE                           VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY                          VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE                         VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  BATCH_ID                               NUMBER,
  ATTRIBUTE1                             VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2                             VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3                             VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE4                             VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE5                             VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_PMT_REVERSAL_TRACKING_TBL
(
  FLOW_ID                   VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  FILE_ID                   VARCHAR2(50 BYTE) COLLATE USING_NLS_COMP,
  PY_NUMBER                 VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  FLOW_STATUS               VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  BATCH_STATUS              VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  UCMDOCID_SUM_STATUS       VARCHAR2(50 BYTE) COLLATE USING_NLS_COMP,
  UCMDOCID_SUM_FILE         VARCHAR2(50 BYTE) COLLATE USING_NLS_COMP,
  UCMDOCID_REV_LINE         VARCHAR2(50 BYTE) COLLATE USING_NLS_COMP,
  UCMDOCID_REV_STATUS       VARCHAR2(50 BYTE) COLLATE USING_NLS_COMP,
  UCMDOCID_COR_LINE         VARCHAR2(50 BYTE) COLLATE USING_NLS_COMP,
  UCMDOCID_COR_STATUS       VARCHAR2(50 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE             VARCHAR2(50 BYTE) COLLATE USING_NLS_COMP,
  TOTALLINECOUNT_C          VARCHAR2(10 BYTE) COLLATE USING_NLS_COMP,
  TOTALREVERSALLINECOUNT_C  VARCHAR2(10 BYTE) COLLATE USING_NLS_COMP,
  ERROR_MESSAGE             VARCHAR2(2000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE1                VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2                VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3                VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_PMT_STG_TBL
(
  FILE_ID                                NUMBER,
  FLOW_ID                                NUMBER,
  STATUS                                 VARCHAR2(10 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE                          DATE,
  Y_N                                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTID_C                            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TRANSACTIONTYPE_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  BANKACCOUNTNAME_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ACCOUNTINGDATE_C                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ROTARYREMITTERTYPE_C                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  REMITTERDONORID_ID_C                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EVENTID_C                              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LOCKBOXREMITTER_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EVENTREGISTRATIONID_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTCURRENCY_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTAMOUNT_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SEQUENTIALLINENUMBER_C                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTCURRENCYDETAIL_C                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTAMOUNTDETAIL_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ALIAS_ID_C                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PDDONORIDTYPE_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PD_DONORID_C                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREDITORGTYPE_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREDITORG_ID_C                         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DONORDISTRICT_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TRACKEDGIFTID_ID_C                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  GRANTS_C                               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CRYSTALCERTIFNAME_C                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOOFFICER_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTONAME_C                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PRESENTATIONDATE_C                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOCOUNTRY_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOADDRESS1_C                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOADDRESS2_C                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOADDRESS3_C                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOCITY_C                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOSTATEPROVINCE_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOPOSTAL_C                         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOPHONE_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOEMAIL_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECIPIENTIDTYPE_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECIPIENTID_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TRANSFERTYPE_C                         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COMMENTS_C                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TAXRECEIPTREQUIRED_C                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CHARITABLEFOUNDATION_C                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEFAMILYNAME_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEOCCASION_C              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALHONEREE_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALPHF_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEDESCRIPTIONOVERRIDE_C   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEDONORIDTYPE_C           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEDONORID_C               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEADDRESS1_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEADDRESS2_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEADDRESS3_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREECITY_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEPOSTAL_C                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREESTATEPROVINCE_C             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREECOUNTRY_C                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEEMAIL_C                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTESUPPRESSFAMILYLETTER_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  NAMEONLETTER_CTAXRECEIPTREQUIRED2_C    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EXCHANGERATEDATE                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ADMINFEEAMT                            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ADMINFEEOVERRIDE                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COMMITMENTID_ID_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ENTITY_C                               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                                     NUMBER,
  FILE_NAME                              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECEIPTFREQUENCY_C                     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ERROR_MESSAGE                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE1                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE4                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE5                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  HDR_ID                                 NUMBER,
  LINE_ID                                NUMBER
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_PMT_UPLOADS_IMPORT_ERR_TBL
(
  FLOW_ID             NUMBER,
  IMPORT_JOB_ID       NUMBER,
  FILE_RECORD_NUMBER  NUMBER,
  PAYMENTID_C         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORD_NUMBER       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ERROR_MESSAGE       VARCHAR2(10000 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE       DATE                      DEFAULT sysdate,
  FILE_ID             NUMBER,
  PAYMENT_LEVEL       VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_PMT_UPLOADS_STG_TBL
(
  FILE_ID                                NUMBER,
  FLOW_ID                                NUMBER,
  HDR_ID                                 NUMBER,
  PY_ID                                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  STATUS                                 VARCHAR2(10 BYTE) COLLATE USING_NLS_COMP,
  RECORDNAME                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP DEFAULT sysdate,
  BANKACCOUNTNAME_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EVENTREGISTRATIONID_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CHARITABLEFOUNDATION_C                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  REMITTERID_C                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYCODE                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  REMITTERTYPE_C                         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ERRORCOMMENT_C                         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LOCKBOXREMITTER_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATEDBY                              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXOWNER_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TRANSACTIONTYPE_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ENTITY_C                               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORAZCXOWNER_ID_C                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTCURRENCY_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTID_C                            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ID                                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FILE_TYPE                              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PROCESSFLAG_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORDNUMBER                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EXCHANGERATEDATE_C                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTSRECORDID_C                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CHUNKNUMBER_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ERRORFLAG_C                            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  UPLOADDATEANDTIME_C                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ACCOUNTINGDATE_C                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TAXRECEIPTREQUIRED_C                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EVENTID_C                              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTAMOUNT_C                        NUMBER,
  LASTUPDATEDATE                         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  REMITTERTYPE                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  REMITTERDONORID                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  REMITTERID                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PANPRESENT                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CURRENCYRATE                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EVENTID                                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE1                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE4                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE5                             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  IMPORT_ROUTE_ID                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  HDR_ROW_ID                             NUMBER,
  MEMORIALTRIBUTEOCCASION_C              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEFAMILYNAME_C            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALHONOREE_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALPHF_C                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEDESCRIPTIONOVERRIDE_C   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEDONORTYPE_C             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTEDONORID_C               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEADDRESS1_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEADDRESS2_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEADDRESS3_C                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEPOSTAL_C                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREESTATEPROVINCE_C             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREECITY_C                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREECOUNTRY_C                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MMRLHONOREEEMAIL_C                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMORIALTRIBUTESUPPRESSFAMILYLETTER_C  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CRYSTALCERTIFNAME_C                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOOFFICER_C                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PRESENTATIONDATE_C                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SHIPTOADDRESS1_C                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_TMP_LOOKUP_TBL
(
  CREATIONDATE     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ENABLEDFLAG      VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  LANGUAGE         VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDATE   VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  LASTUPDATEDBY    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  LOOKUPCODE1      VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  LOOKUPTYPE1      VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  MEANING          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  STARTDATEACTIVE  VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  TAG              VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  TERRITORYCODE    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_CX_TMP_TERRITORIES
(
  CREATIONDATE          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TERRITORYCODE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TERRITORYSHORTNAME    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RECORD_CREATION_DATE  DATE
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_I010_CRUD_TBL
(
  INSTANCE_ID    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  SQLTEXT        VARCHAR2(10000 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE  DATE                           DEFAULT sysdate,
  ERROR_MESSAGE  VARCHAR2(10000 BYTE) COLLATE USING_NLS_COMP,
  OPERATION      VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_I010_GRANTS_INVOICE_TBL
(
  INSTANCE_ID                NUMBER,
  INVOICE_NUMBER             VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  LEDGER_NAME                VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  INVOICE_STATUS             VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  JOURNAL_IMPORT_STATUS      VARCHAR2(10 BYTE) COLLATE USING_NLS_COMP,
  JOURNAL_IMPORT_REQUEST_ID  NUMBER,
  AUTO_POST_STATUS           VARCHAR2(10 BYTE) COLLATE USING_NLS_COMP,
  AUTO_POST_REQUEST_ID       NUMBER,
  GAAP_LEDGER_STATUS         VARCHAR2(10 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE              VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP DEFAULT sysdate,
  LAST_UPDATE_DATE           VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP DEFAULT sysdate,
  INVOICE_PAYMENT_ENTITY     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ENTITY                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ERROR_MESSAGE              VARCHAR2(10000 BYTE) COLLATE USING_NLS_COMP,
  LAST_PERIOD_DATE           VARCHAR2(30 BYTE) COLLATE USING_NLS_COMP,
  RETRY_COUNT                NUMBER             DEFAULT 0,
  CONVERSION_DATE            VARCHAR2(20 BYTE) COLLATE USING_NLS_COMP,
  CONVERSION_RATE            NUMBER,
  REPROCESS_INSTANCE_ID      VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE1                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE4                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE5                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_I027_CUSTOMER_DATA_TBL
(
  RECORDID                      NUMBER,
  FLOW_ID                       NUMBER,
  BATCH_ID                      NUMBER,
  STATUS                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FILE_NAME                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PROCESS_MODE                  VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  RETRY_COUNT                   NUMBER,
  RA0_STATUS                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RA0_KEY                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RA0_ID                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RA0_OBJECTNAME                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RA0_MODIFYTYPE                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RA0_PROCESSED                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RA0_QUEUE_NAME                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RA0_CST_KEY                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RA0_DELETE_FLAG               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RA0_ADD_USER                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RA0_ADD_DATE                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RA0_CHANGE_USER               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RA0_CHANGE_DATE               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGANIZATIONNAME              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGANIZATIONTYPE              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CHARTEREDDATE                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  NFID                          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TYPEID                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  NFIDTYPE                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LANGUAGEKEY                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREDITORGNAME                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREDITORGID                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREDITORGKEY                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  IDTYPE                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CLUBINVOICEPREFERENCE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CUSTOMER                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CUSTOMERID                    NUMBER,
  CUSTOMERTYPE                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CUSTOMERKEY                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  KEY                           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CUSTOMERNAME                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ADDRESSTYPEKEY                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ADDRESSLINE1                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ADDRESSLINE2                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ADDRESSLINE3                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ADDRESSCITY                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ADDRESSCOUNTRY                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  STATE                         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  POSTALCODE                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  INTERNATIONALPROVINCE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EMAILTYPE                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  EMAILADDRESS                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  BILLEDTO                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  BILLEDTOTYPE                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBSCRIBER                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBSCRIBERTYPE                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MAGAZINE                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DELIVERYMETHOD                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTMETHOD                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUBSCRIPTIONTYPE              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ISSUEDATE                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CLOSEDATE                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COPIES                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MONTHSTOISSUE                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DEFAULTFLAG                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  STARTDATE                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ENDDATE                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  INDIVIDUALKEY                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ORGANIZATIONKEY               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONTYPECODE              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DISTRICTID                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TERMINATIONDATE               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  TERMINATIONREASONKEY          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  JOINDATE                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  REJOINDATE                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MEMBERID                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PREFIX                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  FIRSTNAME                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  MIDDLENAME                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LASTNAME                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  LOCALIZEDNAME                 VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DATEOFBIRTH                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  YEAROFBIRTH                   VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ISYOUTH                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUFFIX                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  GENDER                        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ISDECEASED                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  DECEASEDDATE                  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ABOUTME                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PREFERREDRILANGUAGEKEY        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CLASSIFICATION                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PRIMARYLANGUAGEKEY            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SALUTATION                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ISANONYMOUSDONOR              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARENTCUSTOMERKEY             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARENTCUSTOMERID              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARENTRELATIONSHIP            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CHILDCUSTOMERKEY              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CHILDCUSTOMERID               VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CHILDRELATIONSHIP             VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIPSTARTDATE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIPENDDATE           VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUSPENDSTARTDATE              VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUSPENDENDDATE                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  SUSPENDTYPEKEY                VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COMMENT_C                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ISONLINE                      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ISDELETED                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ISPRIMARY                     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ADDUSER                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ADDDATE                       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CHANGEUSER                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CHANGEDATE                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  IMPORT_ACTIVITY_ID            NUMBER,
  RELATIONSHIPRECID             VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  FILE_RECORD_NUMBER            NUMBER,
  BATCH_ROW_ID                  NUMBER,
  UCM_CONTENT_ID                VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE                 VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ERROR_MESSAGE                 VARCHAR2(3000 BYTE) COLLATE USING_NLS_COMP,
  PROCESS_MODE_FLOW_ID          NUMBER,
  TERMINATION_REASON            VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ACC_UPD_REL_STATUS            VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ACC_DELETE_REL_STATUS         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIP_START_DATE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIP_END_DATE         VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  RELATIONSHIP_REC_ID           NUMBER,
  SUBJECT_PARTY_NUMBER          VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  DELETE_RELATIONSHIP_REC_ID    NUMBER,
  ACC_UPD_END_REL_STATUS        VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ACCOUNT_UPDATE_STATUS         VARCHAR2(10000 BYTE) COLLATE USING_NLS_COMP,
  ACCT_NEW_RELATIONSHIP_STATUS  VARCHAR2(20 BYTE) COLLATE USING_NLS_COMP,
  ORGID                         VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  AFFILIATION_UPDATE_RELSHIP    VARCHAR2(10 BYTE) COLLATE USING_NLS_COMP,
  AFFILIATION_CREATE_RELSHIP    VARCHAR2(10 BYTE) COLLATE USING_NLS_COMP,
  TERMINATION_ACCOUNT           VARCHAR2(10 BYTE) COLLATE USING_NLS_COMP,
  CXRELATIONTYPE                VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ORGTYPEID                     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  CXRELATIONTYPECODE            VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  PARENT_BATCH_ID               NUMBER,
  CREDITORGTYPE                 VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  NF_ERR_UPDATED                VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE1                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE4                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE5                    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_I027_ERROR_LOG_TBL
(
  FROM_DATE      DATE,
  FILE_TO_DATE   DATE,
  FILE_NAME      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE  DATE,
  ATTRIBUTE1     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE4     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE5     VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_I027_ERR_TBL
(
  FLOW_ID         NUMBER,
  RAO_ID          NUMBER,
  RA0_KEY         VARCHAR2(500 BYTE) COLLATE USING_NLS_COMP,
  RA0_OBJECTNAME  VARCHAR2(500 BYTE) COLLATE USING_NLS_COMP,
  RA0_PROCESSED   VARCHAR2(500 BYTE) COLLATE USING_NLS_COMP,
  ERROR_MESSAGE   VARCHAR2(5000 BYTE) COLLATE USING_NLS_COMP,
  ERROR_DETAIL    VARCHAR2(5000 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE   VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  BATCH_ID        NUMBER,
  ATTRIBUTE1      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE4      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE5      VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_I027_IMPORTMGR_TBL_HDR
(
  OBJECTNAME  VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN1     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN2     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN3     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN4     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN5     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN6     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN7     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN8     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN9     VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN10    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN11    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN12    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN13    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN14    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN15    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN16    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN17    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN18    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN19    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN20    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN21    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN22    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN23    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN24    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN25    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN26    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN27    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN28    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN29    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN30    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  COLUMN31    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COLUMN32    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COLUMN33    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COLUMN34    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COLUMN35    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COLUMN36    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COLUMN37    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COLUMN38    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COLUMN39    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  COLUMN40    VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_I027_IMPORTROUTE_POLLING_TBL
(
  FLOW_ID          NUMBER,
  BATCH_ID         NUMBER,
  OBJECTHIERARCHY  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  OBJECT_NAME      VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  OBJECT_CODE      VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  OBJECT_STATUS    VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  FILE_NAME        VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE    VARCHAR2(20 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_I027_IMPORT_MANAGER_ERR_TBL
(
  FLOW_ID             NUMBER,
  BATCH_ID            NUMBER,
  OBJECTTYPE          VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  STATUS              VARCHAR2(10 BYTE) COLLATE USING_NLS_COMP,
  CREATION_DATE       VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  FILE_RECORD_NUMBER  NUMBER,
  IMPORT_JOB_ID       NUMBER,
  SYSTEM_TASK_ID      NUMBER,
  ERROR_TYPE          VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ERROR_MESSAGE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  PARTY_NUMBER        VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE1          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE4          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE5          VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_I027_LANGUAGE_TBL
(
  GUI       VARCHAR2(200 BYTE) COLLATE USING_NLS_COMP,
  ISO2      VARCHAR2(300 BYTE) COLLATE USING_NLS_COMP,
  ISO3      VARCHAR2(300 BYTE) COLLATE USING_NLS_COMP,
  LANGUAGE  VARCHAR2(300 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_I027_TRACK_TBL
(
  BATCH_ID    NUMBER,
  ERRMSG      VARCHAR2(10000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE1  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE4  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE5  VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_I047_AH_LOG_TBL
(
  FLGUPD_INSTANCEID      VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  STATUS                 VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  FLGUPD_DATE            VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  AHSCHEDULE_INSTANCEID  VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  AHSCHEDULE_SUBMITDATE  VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  AHMAIN_INSTANCEID      VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  AHMAIN_STARTDATE       VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  AHMAIN_ENDDATE         VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE1             VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE2             VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE3             VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE4             VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  ATTRIBUTE5             VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_I047_AH_TRNS_ERR_TBL
(
  AHMAIN_INSTANCEID  VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  TRANSACTIONNUMBER  VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTID          VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  CT_ID              VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  ERRORMESSAGE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP,
  CREATIONDATE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;


CREATE TABLE RTY_I047_AH_TRNS_TBL
(
  FLGUPD_INSTANCEID  VARCHAR2(100 BYTE) COLLATE USING_NLS_COMP,
  TRANSACTIONNUMBER  VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  PAYMENTID          VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  CT_ID              VARCHAR2(240 BYTE) COLLATE USING_NLS_COMP,
  ERRORMESSAGE       VARCHAR2(1000 BYTE) COLLATE USING_NLS_COMP
)
DEFAULT COLLATION USING_NLS_COMP
LOGGING 
NOCOMPRESS 
NO INMEMORY
NOCACHE
RESULT_CACHE (MODE DEFAULT)
NOPARALLEL;
